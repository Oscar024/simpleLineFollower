

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Mon Aug 28 13:29:00 2017

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,delta=1
    35                           	psect	text26,global,reloc=2,class=CODE,delta=1
    36                           	psect	text27,global,reloc=2,class=CODE,delta=1
    37                           	psect	text28,global,reloc=2,class=CODE,delta=1
    38                           	psect	text29,global,reloc=2,class=CODE,delta=1
    39                           	psect	text30,global,reloc=2,class=CODE,delta=1
    40                           	psect	text31,global,reloc=2,class=CODE,delta=1
    41                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    42                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    43  0000                     
    44                           	psect	smallconst
    45  000800                     __psmallconst:
    46                           	opt stack 0
    47  000800  00                 	db	0
    48  000801                     _dpowers:
    49                           	opt stack 0
    50  000801  0001               	dw	1
    51  000803  0000               	dw	0
    52  000805  000A               	dw	10
    53  000807  0000               	dw	0
    54  000809  0064               	dw	100
    55  00080B  0000               	dw	0
    56  00080D  03E8               	dw	1000
    57  00080F  0000               	dw	0
    58  000811  2710               	dw	10000
    59  000813  0000               	dw	0
    60  000815  86A0               	dw	34464
    61  000817  0001               	dw	1
    62  000819  4240               	dw	16960
    63  00081B  000F               	dw	15
    64  00081D  9680               	dw	38528
    65  00081F  0098               	dw	152
    66  000821  E100               	dw	57600
    67  000823  05F5               	dw	1525
    68  000825  CA00               	dw	51712
    69  000827  3B9A               	dw	15258
    70  000829                     __end_of_dpowers:
    71                           	opt stack 0
    72  000829                     __npowers_:
    73                           	opt stack 0
    74  000829  00                 	db	0
    75  00082A  80                 	db	128
    76  00082B  3F                 	db	63
    77  00082C  CD                 	db	205
    78  00082D  CC                 	db	204
    79  00082E  3D                 	db	61
    80  00082F  D7                 	db	215
    81  000830  23                 	db	35
    82  000831  3C                 	db	60
    83  000832  12                 	db	18
    84  000833  83                 	db	131
    85  000834  3A                 	db	58
    86  000835  B7                 	db	183
    87  000836  D1                 	db	209
    88  000837  38                 	db	56
    89  000838  C6                 	db	198
    90  000839  27                 	db	39
    91  00083A  37                 	db	55
    92  00083B  38                 	db	56
    93  00083C  86                 	db	134
    94  00083D  35                 	db	53
    95  00083E  C0                 	db	192
    96  00083F  D6                 	db	214
    97  000840  33                 	db	51
    98  000841  CC                 	db	204
    99  000842  2B                 	db	43
   100  000843  32                 	db	50
   101  000844  70                 	db	112
   102  000845  89                 	db	137
   103  000846  30                 	db	48
   104  000847  E7                 	db	231
   105  000848  DB                 	db	219
   106  000849  2E                 	db	46
   107  00084A  E5                 	db	229
   108  00084B  3C                 	db	60
   109  00084C  1E                 	db	30
   110  00084D  42                 	db	66
   111  00084E  A2                 	db	162
   112  00084F  0D                 	db	13
   113  000850                     __end_of__npowers_:
   114                           	opt stack 0
   115  000850                     __powers_:
   116                           	opt stack 0
   117  000850  00                 	db	0
   118  000851  80                 	db	128
   119  000852  3F                 	db	63
   120  000853  00                 	db	0
   121  000854  20                 	db	32
   122  000855  41                 	db	65
   123  000856  00                 	db	0
   124  000857  C8                 	db	200
   125  000858  42                 	db	66
   126  000859  00                 	db	0
   127  00085A  7A                 	db	122
   128  00085B  44                 	db	68
   129  00085C  40                 	db	64
   130  00085D  1C                 	db	28
   131  00085E  46                 	db	70
   132  00085F  50                 	db	80
   133  000860  C3                 	db	195
   134  000861  47                 	db	71
   135  000862  24                 	db	36
   136  000863  74                 	db	116
   137  000864  49                 	db	73
   138  000865  97                 	db	151
   139  000866  18                 	db	24
   140  000867  4B                 	db	75
   141  000868  BC                 	db	188
   142  000869  BE                 	db	190
   143  00086A  4C                 	db	76
   144  00086B  6B                 	db	107
   145  00086C  6E                 	db	110
   146  00086D  4E                 	db	78
   147  00086E  03                 	db	3
   148  00086F  15                 	db	21
   149  000870  50                 	db	80
   150  000871  79                 	db	121
   151  000872  AD                 	db	173
   152  000873  60                 	db	96
   153  000874  F3                 	db	243
   154  000875  49                 	db	73
   155  000876  71                 	db	113
   156  000877                     __end_of__powers_:
   157                           	opt stack 0
   158  0000                     _ADCON1bits	set	4033
   159  0000                     _INTCON	set	4082
   160  0000                     _OSCCONbits	set	4051
   161  0000                     _PORTA	set	3968
   162  0000                     _PORTB	set	3969
   163  0000                     _PORTBbits	set	3969
   164  0000                     _PORTDbits	set	3971
   165  0000                     _PORTE	set	3972
   166  0000                     _PORTEbits	set	3972
   167  0000                     _TRISA	set	3986
   168  0000                     _TRISB	set	3987
   169  0000                     _TRISBbits	set	3987
   170  0000                     _TRISC	set	3988
   171  0000                     _TRISCbits	set	3988
   172  0000                     _TRISD	set	3989
   173  0000                     _TRISE	set	3990
   174  000877                     __stringdata:
   175                           	opt stack 0
   176  000877                     STR_9:
   177  000877  49                 	db	73	;'I'
   178  000878  6E                 	db	110	;'n'
   179  000879  74                 	db	116	;'t'
   180  00087A  65                 	db	101	;'e'
   181  00087B  67                 	db	103	;'g'
   182  00087C  65                 	db	101	;'e'
   183  00087D  72                 	db	114	;'r'
   184  00087E  20                 	db	32
   185  00087F  3D                 	db	61	;'='
   186  000880  20                 	db	32
   187  000881  25                 	db	37
   188  000882  64                 	db	100	;'d'
   189  000883  00                 	db	0
   190  000884  46                 	db	70	;'F'
   191  000885  6C                 	db	108	;'l'
   192  000886  6F                 	db	111	;'o'
   193  000887  61                 	db	97	;'a'
   194  000888  74                 	db	116	;'t'
   195  000889  20                 	db	32
   196  00088A  3D                 	db	61	;'='
   197  00088B  20                 	db	32
   198  00088C  25                 	db	37
   199  00088D  66                 	db	102	;'f'
   200  00088E  00                 	db	0
   201  00088F                     STR_6:
   202  00088F  4D                 	db	77	;'M'
   203  000890  6F                 	db	111	;'o'
   204  000891  72                 	db	114	;'r'
   205  000892  65                 	db	101	;'e'
   206  000893  20                 	db	32
   207  000894  52                 	db	82	;'R'
   208  000895  69                 	db	105	;'i'
   209  000896  67                 	db	103	;'g'
   210  000897  68                 	db	104	;'h'
   211  000898  74                 	db	116	;'t'
   212  000899  00                 	db	0
   213  00089A                     STR_4:
   214  00089A  4D                 	db	77	;'M'
   215  00089B  6F                 	db	111	;'o'
   216  00089C  72                 	db	114	;'r'
   217  00089D  65                 	db	101	;'e'
   218  00089E  20                 	db	32
   219  00089F  4C                 	db	76	;'L'
   220  0008A0  65                 	db	101	;'e'
   221  0008A1  66                 	db	102	;'f'
   222  0008A2  74                 	db	116	;'t'
   223  0008A3  00                 	db	0
   224  0008A4                     STR_2:
   225  0008A4  47                 	db	71	;'G'
   226  0008A5  6F                 	db	111	;'o'
   227  0008A6  20                 	db	32
   228  0008A7  61                 	db	97	;'a'
   229  0008A8  68                 	db	104	;'h'
   230  0008A9  65                 	db	101	;'e'
   231  0008AA  61                 	db	97	;'a'
   232  0008AB  64                 	db	100	;'d'
   233  0008AC  00                 	db	0
   234  0008AD                     STR_1:
   235  0008AD  49                 	db	73	;'I'
   236  0008AE  4E                 	db	78	;'N'
   237  0008AF  49                 	db	73	;'I'
   238  0008B0  43                 	db	67	;'C'
   239  0008B1  49                 	db	73	;'I'
   240  0008B2  4F                 	db	79	;'O'
   241  0008B3  00                 	db	0
   242  0008B4                     __end_of__stringdata:
   243                           	opt stack 0
   244                           
   245                           ; #config settings
   246  0008B4  00                 	db	0	; dummy byte at the end
   247  0000                     
   248                           	psect	cinit
   249  0025C4                     __pcinit:
   250                           	opt stack 0
   251  0025C4                     start_initialization:
   252                           	opt stack 0
   253  0025C4                     __initialization:
   254                           	opt stack 0
   255  0025C4                     end_of_initialization:
   256                           	opt stack 0
   257  0025C4                     __end_of__initialization:
   258                           	opt stack 0
   259  0025C4  0E00               	movlw	low (__Lmediumconst shr (0+16))
   260  0025C6  6EF8               	movwf	tblptru,c
   261  0025C8  0100               	movlb	0
   262  0025CA  EFD3  F012         	goto	_main	;jump to C main() function
   263                           tblptru	equ	0xFF8
   264                           
   265                           	psect	cstackBANK0
   266  000060                     __pcstackBANK0:
   267                           	opt stack 0
   268  000060                     _sprintf$1281:
   269                           	opt stack 0
   270                           
   271                           ; 3 bytes @ 0x0
   272  000060                     	ds	3
   273  000063                     _sprintf$754:
   274                           	opt stack 0
   275                           
   276                           ; 4 bytes @ 0x3
   277  000063                     	ds	4
   278  000067                     sprintf@vd:
   279                           	opt stack 0
   280                           
   281                           ; 4 bytes @ 0x7
   282  000067                     	ds	4
   283  00006B                     sprintf@vd_756:
   284                           	opt stack 0
   285                           
   286                           ; 4 bytes @ 0xB
   287  00006B                     	ds	4
   288  00006F                     sprintf@ap:
   289                           	opt stack 0
   290                           
   291                           ; 2 bytes @ 0xF
   292  00006F                     	ds	2
   293  000071                     sprintf@flag:
   294                           	opt stack 0
   295                           
   296                           ; 2 bytes @ 0x11
   297  000071                     	ds	2
   298  000073                     sprintf@integ:
   299                           	opt stack 0
   300                           
   301                           ; 3 bytes @ 0x13
   302  000073                     	ds	3
   303  000076                     sprintf@prec:
   304                           	opt stack 0
   305                           
   306                           ; 2 bytes @ 0x16
   307  000076                     	ds	2
   308  000078                     sprintf@_val:
   309                           	opt stack 0
   310                           
   311                           ; 5 bytes @ 0x18
   312  000078                     	ds	5
   313  00007D                     sprintf@exp:
   314                           	opt stack 0
   315                           
   316                           ; 2 bytes @ 0x1D
   317  00007D                     	ds	2
   318  00007F                     sprintf@fval:
   319                           	opt stack 0
   320                           
   321                           ; 3 bytes @ 0x1F
   322  00007F                     	ds	3
   323  000082                     sprintf@c:
   324                           	opt stack 0
   325                           
   326                           ; 1 bytes @ 0x22
   327  000082                     	ds	1
   328  000083                     Lcd_Write_Integer@s:
   329                           	opt stack 0
   330                           
   331                           ; 20 bytes @ 0x23
   332  000083                     	ds	20
   333                           tblptru	equ	0xFF8
   334                           
   335                           	psect	cstackCOMRAM
   336  000001                     __pcstackCOMRAM:
   337                           	opt stack 0
   338  000001                     ?_getCNY70Value:
   339                           	opt stack 0
   340  000001                     ?___awmod:
   341                           	opt stack 0
   342  000001                     ?___ftpack:
   343                           	opt stack 0
   344  000001                     ?___ftneg:
   345                           	opt stack 0
   346  000001                     ?__tdiv_to_l_:
   347                           	opt stack 0
   348  000001                     ?__div_to_l_:
   349                           	opt stack 0
   350  000001                     ?___lldiv:
   351                           	opt stack 0
   352  000001                     Lcd_Port@a:
   353                           	opt stack 0
   354  000001                     Pause_ms@x:
   355                           	opt stack 0
   356  000001                     ___awmod@dividend:
   357                           	opt stack 0
   358  000001                     __div_to_l_@f1:
   359                           	opt stack 0
   360  000001                     ___ftpack@arg:
   361                           	opt stack 0
   362  000001                     __tdiv_to_l_@f1:
   363                           	opt stack 0
   364  000001                     ___ftge@ff1:
   365                           	opt stack 0
   366  000001                     ___ftneg@f1:
   367                           	opt stack 0
   368  000001                     ___lldiv@dividend:
   369                           	opt stack 0
   370                           
   371                           ; 4 bytes @ 0x0
   372  000001                     	ds	1
   373  000002                     ??_Lcd_Cmd:
   374  000002                     Lcd_Write_Char@temp:
   375                           	opt stack 0
   376                           
   377                           ; 1 bytes @ 0x1
   378  000002                     	ds	1
   379  000003                     Lcd_Cmd@a:
   380                           	opt stack 0
   381  000003                     Lcd_Write_Char@y:
   382                           	opt stack 0
   383  000003                     Pause_ms@i:
   384                           	opt stack 0
   385  000003                     ___awmod@divisor:
   386                           	opt stack 0
   387                           
   388                           ; 2 bytes @ 0x2
   389  000003                     	ds	1
   390  000004                     ??_Lcd_Init:
   391  000004                     Lcd_Set_Cursor@b:
   392                           	opt stack 0
   393  000004                     Lcd_Write_Char@a:
   394                           	opt stack 0
   395  000004                     ___ftpack@exp:
   396                           	opt stack 0
   397  000004                     __div_to_l_@f2:
   398                           	opt stack 0
   399  000004                     __tdiv_to_l_@f2:
   400                           	opt stack 0
   401  000004                     ___ftge@ff2:
   402                           	opt stack 0
   403                           
   404                           ; 3 bytes @ 0x3
   405  000004                     	ds	1
   406  000005                     Lcd_Set_Cursor@a:
   407                           	opt stack 0
   408  000005                     Pause_seg@x:
   409                           	opt stack 0
   410  000005                     ___awmod@counter:
   411                           	opt stack 0
   412  000005                     ___ftpack@sign:
   413                           	opt stack 0
   414  000005                     Lcd_Write_String@a:
   415                           	opt stack 0
   416  000005                     ___lldiv@divisor:
   417                           	opt stack 0
   418                           
   419                           ; 4 bytes @ 0x4
   420  000005                     	ds	1
   421  000006                     ??___ftpack:
   422  000006                     Lcd_Set_Cursor@z:
   423                           	opt stack 0
   424  000006                     Pause_seg@i:
   425                           	opt stack 0
   426  000006                     ___awmod@sign:
   427                           	opt stack 0
   428                           
   429                           ; 1 bytes @ 0x5
   430  000006                     	ds	1
   431  000007                     ??_Lcd_Write_String:
   432  000007                     ??__tdiv_to_l_:
   433  000007                     ??__div_to_l_:
   434  000007                     ??___ftge:
   435  000007                     ?___awdiv:
   436                           	opt stack 0
   437  000007                     Lcd_Set_Cursor@y:
   438                           	opt stack 0
   439  000007                     ___awdiv@dividend:
   440                           	opt stack 0
   441                           
   442                           ; 2 bytes @ 0x6
   443  000007                     	ds	1
   444  000008                     Lcd_Set_Cursor@temp:
   445                           	opt stack 0
   446                           
   447                           ; 1 bytes @ 0x7
   448  000008                     	ds	1
   449  000009                     ?___lltoft:
   450                           	opt stack 0
   451  000009                     Lcd_Write_String@i:
   452                           	opt stack 0
   453  000009                     ___awdiv@divisor:
   454                           	opt stack 0
   455  000009                     ___lldiv@quotient:
   456                           	opt stack 0
   457  000009                     ___lltoft@c:
   458                           	opt stack 0
   459                           
   460                           ; 4 bytes @ 0x8
   461  000009                     	ds	1
   462  00000A                     __tdiv_to_l_@quot:
   463                           	opt stack 0
   464                           
   465                           ; 4 bytes @ 0x9
   466  00000A                     	ds	1
   467  00000B                     ??_mcu_init:
   468  00000B                     ___awdiv@counter:
   469                           	opt stack 0
   470  00000B                     __div_to_l_@quot:
   471                           	opt stack 0
   472                           
   473                           ; 4 bytes @ 0xA
   474  00000B                     	ds	1
   475  00000C                     ___awdiv@sign:
   476                           	opt stack 0
   477  00000C                     mcu_init@i:
   478                           	opt stack 0
   479                           
   480                           ; 2 bytes @ 0xB
   481  00000C                     	ds	1
   482  00000D                     ??___lltoft:
   483  00000D                     ___lldiv@counter:
   484                           	opt stack 0
   485  00000D                     ___awdiv@quotient:
   486                           	opt stack 0
   487                           
   488                           ; 2 bytes @ 0xC
   489  00000D                     	ds	1
   490  00000E                     ?___llmod:
   491                           	opt stack 0
   492  00000E                     __tdiv_to_l_@cntr:
   493                           	opt stack 0
   494  00000E                     ___llmod@dividend:
   495                           	opt stack 0
   496                           
   497                           ; 4 bytes @ 0xD
   498  00000E                     	ds	1
   499  00000F                     ?___wmul:
   500                           	opt stack 0
   501  00000F                     __div_to_l_@cntr:
   502                           	opt stack 0
   503  00000F                     __tdiv_to_l_@exp1:
   504                           	opt stack 0
   505  00000F                     ___wmul@multiplier:
   506                           	opt stack 0
   507                           
   508                           ; 2 bytes @ 0xE
   509  00000F                     	ds	1
   510  000010                     __div_to_l_@exp1:
   511                           	opt stack 0
   512                           
   513                           ; 1 bytes @ 0xF
   514  000010                     	ds	1
   515  000011                     ___lltoft@exp:
   516                           	opt stack 0
   517  000011                     ___wmul@multiplicand:
   518                           	opt stack 0
   519                           
   520                           ; 2 bytes @ 0x10
   521  000011                     	ds	1
   522  000012                     ___llmod@divisor:
   523                           	opt stack 0
   524                           
   525                           ; 4 bytes @ 0x11
   526  000012                     	ds	1
   527  000013                     ___wmul@product:
   528                           	opt stack 0
   529                           
   530                           ; 2 bytes @ 0x12
   531  000013                     	ds	2
   532  000015                     ?___ftmul:
   533                           	opt stack 0
   534  000015                     ___ftmul@f1:
   535                           	opt stack 0
   536                           
   537                           ; 3 bytes @ 0x14
   538  000015                     	ds	1
   539  000016                     ___llmod@counter:
   540                           	opt stack 0
   541                           
   542                           ; 1 bytes @ 0x15
   543  000016                     	ds	2
   544  000018                     ___ftmul@f2:
   545                           	opt stack 0
   546                           
   547                           ; 3 bytes @ 0x17
   548  000018                     	ds	3
   549  00001B                     ??___ftmul:
   550                           
   551                           ; 0 bytes @ 0x1A
   552  00001B                     	ds	3
   553  00001E                     ___ftmul@exp:
   554                           	opt stack 0
   555                           
   556                           ; 1 bytes @ 0x1D
   557  00001E                     	ds	1
   558  00001F                     ___ftmul@f3_as_product:
   559                           	opt stack 0
   560                           
   561                           ; 3 bytes @ 0x1E
   562  00001F                     	ds	3
   563  000022                     ___ftmul@cntr:
   564                           	opt stack 0
   565                           
   566                           ; 1 bytes @ 0x21
   567  000022                     	ds	1
   568  000023                     ___ftmul@sign:
   569                           	opt stack 0
   570                           
   571                           ; 1 bytes @ 0x22
   572  000023                     	ds	1
   573  000024                     ?_fround:
   574                           	opt stack 0
   575  000024                     ?_scale:
   576                           	opt stack 0
   577                           
   578                           ; 3 bytes @ 0x23
   579  000024                     	ds	3
   580  000027                     _fround$1279:
   581                           	opt stack 0
   582  000027                     _scale$1280:
   583                           	opt stack 0
   584                           
   585                           ; 3 bytes @ 0x26
   586  000027                     	ds	3
   587  00002A                     scale@scl:
   588                           	opt stack 0
   589  00002A                     _fround$1278:
   590                           	opt stack 0
   591                           
   592                           ; 3 bytes @ 0x29
   593  00002A                     	ds	1
   594  00002B                     ?___fttol:
   595                           	opt stack 0
   596  00002B                     ___fttol@f1:
   597                           	opt stack 0
   598                           
   599                           ; 3 bytes @ 0x2A
   600  00002B                     	ds	2
   601  00002D                     fround@prec:
   602                           	opt stack 0
   603                           
   604                           ; 1 bytes @ 0x2C
   605  00002D                     	ds	1
   606  00002E                     ?___ftadd:
   607                           	opt stack 0
   608  00002E                     ___ftadd@f1:
   609                           	opt stack 0
   610                           
   611                           ; 3 bytes @ 0x2D
   612  00002E                     	ds	1
   613  00002F                     ??___fttol:
   614                           
   615                           ; 0 bytes @ 0x2E
   616  00002F                     	ds	2
   617  000031                     ___ftadd@f2:
   618                           	opt stack 0
   619                           
   620                           ; 3 bytes @ 0x30
   621  000031                     	ds	3
   622  000034                     ??___ftadd:
   623  000034                     ___fttol@sign1:
   624                           	opt stack 0
   625                           
   626                           ; 1 bytes @ 0x33
   627  000034                     	ds	1
   628  000035                     ___fttol@lval:
   629                           	opt stack 0
   630                           
   631                           ; 4 bytes @ 0x34
   632  000035                     	ds	2
   633  000037                     ___ftadd@sign:
   634                           	opt stack 0
   635                           
   636                           ; 1 bytes @ 0x36
   637  000037                     	ds	1
   638  000038                     ___ftadd@exp2:
   639                           	opt stack 0
   640                           
   641                           ; 1 bytes @ 0x37
   642  000038                     	ds	1
   643  000039                     ___ftadd@exp1:
   644                           	opt stack 0
   645  000039                     ___fttol@exp1:
   646                           	opt stack 0
   647                           
   648                           ; 1 bytes @ 0x38
   649  000039                     	ds	1
   650  00003A                     ?___ftsub:
   651                           	opt stack 0
   652  00003A                     ___ftsub@f1:
   653                           	opt stack 0
   654                           
   655                           ; 3 bytes @ 0x39
   656  00003A                     	ds	3
   657  00003D                     ___ftsub@f2:
   658                           	opt stack 0
   659                           
   660                           ; 3 bytes @ 0x3C
   661  00003D                     	ds	3
   662  000040                     ?_sprintf:
   663                           	opt stack 0
   664  000040                     sprintf@sp:
   665                           	opt stack 0
   666                           
   667                           ; 2 bytes @ 0x3F
   668  000040                     	ds	2
   669  000042                     sprintf@f:
   670                           	opt stack 0
   671                           
   672                           ; 2 bytes @ 0x41
   673  000042                     	ds	5
   674  000047                     ??_sprintf:
   675                           
   676                           ; 0 bytes @ 0x46
   677  000047                     	ds	6
   678  00004D                     Lcd_Write_Integer@a:
   679                           	opt stack 0
   680                           
   681                           ; 2 bytes @ 0x4C
   682  00004D                     	ds	2
   683  00004F                     ??_RobotControl:
   684  00004F                     
   685                           ; 0 bytes @ 0x4E
   686  00004F                     	ds	2
   687  000051                     RobotControl@sensed:
   688                           	opt stack 0
   689                           
   690                           ; 2 bytes @ 0x50
   691  000051                     	ds	2
   692  000053                     tblptru	equ	0xFF8
   693                           
   694                           ; 0 bytes @ 0x52
   695 ;;
   696 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   697 ;;
   698 ;; *************** function _main *****************
   699 ;; Defined at:
   700 ;;		line 18 in file "main line follower.c"
   701 ;; Parameters:    Size  Location     Type
   702 ;;		None
   703 ;; Auto vars:     Size  Location     Type
   704 ;;  sensed          2    0        int 
   705 ;; Return value:  Size  Location     Type
   706 ;;		None               void
   707 ;; Registers used:
   708 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   709 ;; Tracked objects:
   710 ;;		On entry : 0/0
   711 ;;		On exit  : 0/0
   712 ;;		Unchanged: 0/0
   713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   714 ;;      Params:         0       0       0       0       0       0       0       0       0
   715 ;;      Locals:         0       0       0       0       0       0       0       0       0
   716 ;;      Temps:          0       0       0       0       0       0       0       0       0
   717 ;;      Totals:         0       0       0       0       0       0       0       0       0
   718 ;;Total ram usage:        0 bytes
   719 ;; Hardware stack levels required when called:    6
   720 ;; This function calls:
   721 ;;		_Pause_seg
   722 ;;		_RobotControl
   723 ;;		_mcu_init
   724 ;; This function is called by:
   725 ;;		Startup code after reset
   726 ;; This function uses a non-reentrant model
   727 ;;
   728                           
   729                           	psect	text0
   730  0025A6                     __ptext0:
   731                           	opt stack 0
   732  0025A6                     _main:
   733                           	opt stack 25
   734                           
   735                           ;main line follower.c: 19: int sensed;
   736                           ;main line follower.c: 20: mcu_init();
   737                           
   738                           ;incstack = 0
   739  0025A6  ECED  F00E         	call	_mcu_init	;wreg free
   740  0025AA                     l2906:
   741                           
   742                           ;main line follower.c: 22: RobotControl();
   743  0025AA  EC8A  F00E         	call	_RobotControl	;wreg free
   744                           
   745                           ;main line follower.c: 23: Pause_seg(1);
   746  0025AE  0E01               	movlw	1
   747  0025B0  ECFD  F011         	call	_Pause_seg
   748  0025B4  D7FA               	goto	l2906
   749  0025B6                     __end_of_main:
   750                           	opt stack 0
   751                           tblptru	equ	0xFF8
   752                           
   753 ;; *************** function _mcu_init *****************
   754 ;; Defined at:
   755 ;;		line 4 in file "funciones.c"
   756 ;; Parameters:    Size  Location     Type
   757 ;;		None
   758 ;; Auto vars:     Size  Location     Type
   759 ;;  i               2   11[COMRAM] int 
   760 ;; Return value:  Size  Location     Type
   761 ;;		None               void
   762 ;; Registers used:
   763 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   764 ;; Tracked objects:
   765 ;;		On entry : 0/0
   766 ;;		On exit  : 0/0
   767 ;;		Unchanged: 0/0
   768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   769 ;;      Params:         0       0       0       0       0       0       0       0       0
   770 ;;      Locals:         2       0       0       0       0       0       0       0       0
   771 ;;      Temps:          1       0       0       0       0       0       0       0       0
   772 ;;      Totals:         3       0       0       0       0       0       0       0       0
   773 ;;Total ram usage:        3 bytes
   774 ;; Hardware stack levels used:    1
   775 ;; Hardware stack levels required when called:    3
   776 ;; This function calls:
   777 ;;		_Lcd_Clear
   778 ;;		_Lcd_Init
   779 ;;		_Lcd_Set_Cursor
   780 ;;		_Lcd_Write_String
   781 ;; This function is called by:
   782 ;;		_main
   783 ;; This function uses a non-reentrant model
   784 ;;
   785                           
   786                           	psect	text1
   787  001DDA                     __ptext1:
   788                           	opt stack 0
   789  001DDA                     _mcu_init:
   790                           	opt stack 27
   791                           
   792                           ;funciones.c: 7: INTCON =0X00;
   793                           
   794                           ;incstack = 0
   795  001DDA  0E00               	movlw	0
   796  001DDC  6EF2               	movwf	intcon,c	;volatile
   797                           
   798                           ;funciones.c: 8: TRISD = 0x00;
   799  001DDE  0E00               	movlw	0
   800  001DE0  6E95               	movwf	3989,c	;volatile
   801                           
   802                           ;funciones.c: 9: TRISE = 0x00;
   803  001DE2  0E00               	movlw	0
   804  001DE4  6E96               	movwf	3990,c	;volatile
   805                           
   806                           ;funciones.c: 10: PORTEbits.RE1=0;
   807  001DE6  9284               	bcf	3972,1,c	;volatile
   808                           
   809                           ;funciones.c: 11: ADCON1bits.PCFG=0b1111;
   810  001DE8  80C1               	bsf	4033,0,c	;volatile
   811  001DEA  82C1               	bsf	4033,1,c	;volatile
   812  001DEC  84C1               	bsf	4033,2,c	;volatile
   813  001DEE  86C1               	bsf	4033,3,c	;volatile
   814                           
   815                           ;funciones.c: 12: Lcd_Init();
   816  001DF0  EC3B  F011         	call	_Lcd_Init	;wreg free
   817                           
   818                           ;funciones.c: 13: Lcd_Clear();
   819  001DF4  ECDB  F012         	call	_Lcd_Clear	;wreg free
   820                           
   821                           ;funciones.c: 14: Lcd_Set_Cursor(1,1);
   822  001DF8  0E01               	movlw	1
   823  001DFA  6E04               	movwf	Lcd_Set_Cursor@b,c
   824  001DFC  0E01               	movlw	1
   825  001DFE  ECD5  F011         	call	_Lcd_Set_Cursor
   826                           
   827                           ;funciones.c: 15: TRISA = TRISB = TRISC = TRISD = 0;
   828  001E02  0E00               	movlw	0
   829  001E04  6E95               	movwf	3989,c	;volatile
   830  001E06  CF95 FF94          	movff	3989,3988	;volatile
   831  001E0A  CF94 FF93          	movff	3988,3987	;volatile
   832  001E0E  CF93 FF92          	movff	3987,3986	;volatile
   833                           
   834                           ;funciones.c: 18: int i = 0;
   835  001E12  0E00               	movlw	0
   836  001E14  6E0D               	movwf	mcu_init@i+1,c
   837  001E16  0E00               	movlw	0
   838  001E18  6E0C               	movwf	mcu_init@i,c
   839                           
   840                           ;funciones.c: 19: _delay((unsigned long)((40)*(4000000/4000.0)));
   841  001E1A  0E34               	movlw	52
   842  001E1C  6E0B               	movwf	??_mcu_init& (0+255),c
   843  001E1E  0EF2               	movlw	242
   844  001E20                     u2937:
   845  001E20  2EE8               	decfsz	wreg,f,c
   846  001E22  D7FE               	goto	u2937
   847  001E24  2E0B               	decfsz	??_mcu_init& (0+255),f,c
   848  001E26  D7FC               	goto	u2937
   849                           
   850                           ;funciones.c: 20: OSCCONbits.IRCF = 0b111;
   851  001E28  88D3               	bsf	4051,4,c	;volatile
   852  001E2A  8AD3               	bsf	4051,5,c	;volatile
   853  001E2C  8CD3               	bsf	4051,6,c	;volatile
   854                           
   855                           ;funciones.c: 25: TRISA = 0;
   856  001E2E  0E00               	movlw	0
   857  001E30  6E92               	movwf	3986,c	;volatile
   858                           
   859                           ;funciones.c: 26: PORTA = 0;
   860  001E32  0E00               	movlw	0
   861  001E34  6E80               	movwf	3968,c	;volatile
   862                           
   863                           ;funciones.c: 27: TRISCbits.TRISC7 = 1;
   864  001E36  8E94               	bsf	3988,7,c	;volatile
   865                           
   866                           ;funciones.c: 28: TRISCbits.TRISC6 = 0;
   867  001E38  9C94               	bcf	3988,6,c	;volatile
   868                           
   869                           ;funciones.c: 29: TRISBbits.TRISB0 = 1;
   870  001E3A  8093               	bsf	3987,0,c	;volatile
   871                           
   872                           ;funciones.c: 30: TRISBbits.TRISB1 = 1;
   873  001E3C  8293               	bsf	3987,1,c	;volatile
   874                           
   875                           ;funciones.c: 31: TRISBbits.TRISB2 = 1;
   876  001E3E  8493               	bsf	3987,2,c	;volatile
   877                           
   878                           ;funciones.c: 32: TRISBbits.TRISB3 = 1;
   879  001E40  8693               	bsf	3987,3,c	;volatile
   880                           
   881                           ;funciones.c: 33: TRISBbits.TRISB4 = 1;
   882  001E42  8893               	bsf	3987,4,c	;volatile
   883                           
   884                           ;funciones.c: 34: for (i = 1; i <= 50; i++)
   885  001E44  0E00               	movlw	0
   886  001E46  6E0D               	movwf	mcu_init@i+1,c
   887  001E48  0E01               	movlw	1
   888  001E4A  6E0C               	movwf	mcu_init@i,c
   889  001E4C  500D               	movf	mcu_init@i+1,w,c
   890  001E4E  0A80               	xorlw	128
   891  001E50  0F80               	addlw	-128
   892  001E52  0E33               	movlw	51
   893  001E54  B4D8               	btfsc	status,2,c
   894  001E56  5C0C               	subwf	mcu_init@i,w,c
   895  001E58  B0D8               	btfsc	status,0,c
   896  001E5A  D00B               	goto	l2864
   897                           
   898                           ;funciones.c: 35: _delay((unsigned long)((20)*(4000000/4000.0)));
   899  001E5C  0E1A               	movlw	26
   900  001E5E  6E0B               	movwf	??_mcu_init& (0+255),c
   901  001E60  0EF8               	movlw	248
   902  001E62                     u2947:
   903  001E62  2EE8               	decfsz	wreg,f,c
   904  001E64  D7FE               	goto	u2947
   905  001E66  2E0B               	decfsz	??_mcu_init& (0+255),f,c
   906  001E68  D7FC               	goto	u2947
   907  001E6A  D000               	nop2	
   908  001E6C  4A0C               	infsnz	mcu_init@i,f,c
   909  001E6E  2A0D               	incf	mcu_init@i+1,f,c
   910  001E70  D7ED               	goto	L1
   911  001E72                     l2864:
   912                           
   913                           ;funciones.c: 36: PORTE = 0;
   914  001E72  0E00               	movlw	0
   915  001E74  6E84               	movwf	3972,c	;volatile
   916                           
   917                           ;funciones.c: 37: PORTB = 0;
   918  001E76  0E00               	movlw	0
   919  001E78  6E81               	movwf	3969,c	;volatile
   920                           
   921                           ;funciones.c: 38: Lcd_Clear();
   922  001E7A  ECDB  F012         	call	_Lcd_Clear	;wreg free
   923                           
   924                           ;funciones.c: 39: Lcd_Set_Cursor(1, 1);
   925  001E7E  0E01               	movlw	1
   926  001E80  6E04               	movwf	Lcd_Set_Cursor@b,c
   927  001E82  0E01               	movlw	1
   928  001E84  ECD5  F011         	call	_Lcd_Set_Cursor
   929                           
   930                           ;funciones.c: 40: Lcd_Write_String("INICIO");
   931  001E88  0E08               	movlw	high STR_1
   932  001E8A  6E06               	movwf	Lcd_Write_String@a+1,c
   933  001E8C  0EAD               	movlw	low STR_1
   934  001E8E  6E05               	movwf	Lcd_Write_String@a,c
   935  001E90  ECC2  F010         	call	_Lcd_Write_String	;wreg free
   936  001E94  0012               	return	
   937  001E96                     __end_of_mcu_init:
   938                           	opt stack 0
   939                           tblptru	equ	0xFF8
   940                           intcon	equ	0xFF2
   941                           wreg	equ	0xFE8
   942                           status	equ	0xFD8
   943                           
   944 ;; *************** function _Lcd_Init *****************
   945 ;; Defined at:
   946 ;;		line 57 in file "lcd.c"
   947 ;; Parameters:    Size  Location     Type
   948 ;;		None
   949 ;; Auto vars:     Size  Location     Type
   950 ;;		None
   951 ;; Return value:  Size  Location     Type
   952 ;;		None               void
   953 ;; Registers used:
   954 ;;		wreg, status,2, cstack
   955 ;; Tracked objects:
   956 ;;		On entry : 0/0
   957 ;;		On exit  : 0/0
   958 ;;		Unchanged: 0/0
   959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   960 ;;      Params:         0       0       0       0       0       0       0       0       0
   961 ;;      Locals:         0       0       0       0       0       0       0       0       0
   962 ;;      Temps:          1       0       0       0       0       0       0       0       0
   963 ;;      Totals:         1       0       0       0       0       0       0       0       0
   964 ;;Total ram usage:        1 bytes
   965 ;; Hardware stack levels used:    1
   966 ;; Hardware stack levels required when called:    2
   967 ;; This function calls:
   968 ;;		_Lcd_Cmd
   969 ;;		_Lcd_Port
   970 ;; This function is called by:
   971 ;;		_mcu_init
   972 ;; This function uses a non-reentrant model
   973 ;;
   974                           
   975                           	psect	text2
   976  002276                     __ptext2:
   977                           	opt stack 0
   978  002276                     _Lcd_Init:
   979                           	opt stack 27
   980                           
   981                           ;lcd.c: 58: Lcd_Port(0x00);
   982                           
   983                           ;incstack = 0
   984  002276  0E00               	movlw	0
   985  002278  EC71  F012         	call	_Lcd_Port
   986                           
   987                           ;lcd.c: 59: _delay((unsigned long)((20)*(4000000/4000.0)));
   988  00227C  0E1A               	movlw	26
   989  00227E  6E04               	movwf	??_Lcd_Init& (0+255),c
   990  002280  0EF8               	movlw	248
   991  002282                     u2957:
   992  002282  2EE8               	decfsz	wreg,f,c
   993  002284  D7FE               	goto	u2957
   994  002286  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
   995  002288  D7FC               	goto	u2957
   996  00228A  D000               	nop2	
   997                           
   998                           ;lcd.c: 60: Lcd_Cmd(0x03);
   999  00228C  0E03               	movlw	3
  1000  00228E  ECC3  F012         	call	_Lcd_Cmd
  1001                           
  1002                           ;lcd.c: 61: _delay((unsigned long)((5)*(4000000/4000.0)));
  1003  002292  0E07               	movlw	7
  1004  002294  6E04               	movwf	??_Lcd_Init& (0+255),c
  1005  002296  0E7D               	movlw	125
  1006  002298                     u2967:
  1007  002298  2EE8               	decfsz	wreg,f,c
  1008  00229A  D7FE               	goto	u2967
  1009  00229C  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  1010  00229E  D7FC               	goto	u2967
  1011  0022A0  F000               	nop	
  1012                           
  1013                           ;lcd.c: 62: Lcd_Cmd(0x03);
  1014  0022A2  0E03               	movlw	3
  1015  0022A4  ECC3  F012         	call	_Lcd_Cmd
  1016                           
  1017                           ;lcd.c: 63: _delay((unsigned long)((11)*(4000000/4000.0)));
  1018  0022A8  0E0F               	movlw	15
  1019  0022AA  6E04               	movwf	??_Lcd_Init& (0+255),c
  1020  0022AC  0E48               	movlw	72
  1021  0022AE                     u2977:
  1022  0022AE  2EE8               	decfsz	wreg,f,c
  1023  0022B0  D7FE               	goto	u2977
  1024  0022B2  2E04               	decfsz	??_Lcd_Init& (0+255),f,c
  1025  0022B4  D7FC               	goto	u2977
  1026                           
  1027                           ;lcd.c: 64: Lcd_Cmd(0x03);
  1028  0022B6  0E03               	movlw	3
  1029  0022B8  ECC3  F012         	call	_Lcd_Cmd
  1030                           
  1031                           ;lcd.c: 66: Lcd_Cmd(0x02);
  1032  0022BC  0E02               	movlw	2
  1033  0022BE  ECC3  F012         	call	_Lcd_Cmd
  1034                           
  1035                           ;lcd.c: 67: Lcd_Cmd(0x02);
  1036  0022C2  0E02               	movlw	2
  1037  0022C4  ECC3  F012         	call	_Lcd_Cmd
  1038                           
  1039                           ;lcd.c: 68: Lcd_Cmd(0x08);
  1040  0022C8  0E08               	movlw	8
  1041  0022CA  ECC3  F012         	call	_Lcd_Cmd
  1042                           
  1043                           ;lcd.c: 69: Lcd_Cmd(0x00);
  1044  0022CE  0E00               	movlw	0
  1045  0022D0  ECC3  F012         	call	_Lcd_Cmd
  1046                           
  1047                           ;lcd.c: 70: Lcd_Cmd(0x0C);
  1048  0022D4  0E0C               	movlw	12
  1049  0022D6  ECC3  F012         	call	_Lcd_Cmd
  1050                           
  1051                           ;lcd.c: 71: Lcd_Cmd(0x00);
  1052  0022DA  0E00               	movlw	0
  1053  0022DC  ECC3  F012         	call	_Lcd_Cmd
  1054                           
  1055                           ;lcd.c: 72: Lcd_Cmd(0x06);
  1056  0022E0  0E06               	movlw	6
  1057  0022E2  ECC3  F012         	call	_Lcd_Cmd
  1058  0022E6  0012               	return	
  1059  0022E8                     __end_of_Lcd_Init:
  1060                           	opt stack 0
  1061                           tblptru	equ	0xFF8
  1062                           intcon	equ	0xFF2
  1063                           wreg	equ	0xFE8
  1064                           status	equ	0xFD8
  1065                           
  1066 ;; *************** function _RobotControl *****************
  1067 ;; Defined at:
  1068 ;;		line 44 in file "funciones.c"
  1069 ;; Parameters:    Size  Location     Type
  1070 ;;		None
  1071 ;; Auto vars:     Size  Location     Type
  1072 ;;  sensed          2   80[COMRAM] int 
  1073 ;; Return value:  Size  Location     Type
  1074 ;;		None               void
  1075 ;; Registers used:
  1076 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1077 ;; Tracked objects:
  1078 ;;		On entry : 0/0
  1079 ;;		On exit  : 0/0
  1080 ;;		Unchanged: 0/0
  1081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1082 ;;      Params:         0       0       0       0       0       0       0       0       0
  1083 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1084 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1085 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1086 ;;Total ram usage:        4 bytes
  1087 ;; Hardware stack levels used:    1
  1088 ;; Hardware stack levels required when called:    5
  1089 ;; This function calls:
  1090 ;;		_Lcd_Clear
  1091 ;;		_Lcd_Set_Cursor
  1092 ;;		_Lcd_Write_Integer
  1093 ;;		_Lcd_Write_String
  1094 ;;		_getCNY70Value
  1095 ;; This function is called by:
  1096 ;;		_main
  1097 ;; This function uses a non-reentrant model
  1098 ;;
  1099                           
  1100                           	psect	text3
  1101  001D14                     __ptext3:
  1102                           	opt stack 0
  1103  001D14                     _RobotControl:
  1104                           	opt stack 25
  1105                           
  1106                           ;funciones.c: 46: int sensed;
  1107                           ;funciones.c: 47: sensed = getCNY70Value();
  1108                           
  1109                           ;incstack = 0
  1110  001D14  ECFF  F010         	call	_getCNY70Value	;wreg free
  1111  001D18  C001  F051         	movff	?_getCNY70Value,RobotControl@sensed
  1112  001D1C  C002  F052         	movff	?_getCNY70Value+1,RobotControl@sensed+1
  1113                           
  1114                           ;funciones.c: 48: Lcd_Clear();
  1115  001D20  ECDB  F012         	call	_Lcd_Clear	;wreg free
  1116                           
  1117                           ;funciones.c: 49: Lcd_Set_Cursor(1,1);
  1118  001D24  0E01               	movlw	1
  1119  001D26  6E04               	movwf	Lcd_Set_Cursor@b,c
  1120  001D28  0E01               	movlw	1
  1121  001D2A  ECD5  F011         	call	_Lcd_Set_Cursor
  1122                           
  1123                           ;funciones.c: 50: Lcd_Write_Integer(sensed);
  1124  001D2E  C051  F04D         	movff	RobotControl@sensed,Lcd_Write_Integer@a
  1125  001D32  C052  F04E         	movff	RobotControl@sensed+1,Lcd_Write_Integer@a+1
  1126  001D36  EC58  F012         	call	_Lcd_Write_Integer	;wreg free
  1127                           
  1128                           ;funciones.c: 51: Lcd_Set_Cursor(2,1);
  1129  001D3A  0E01               	movlw	1
  1130  001D3C  6E04               	movwf	Lcd_Set_Cursor@b,c
  1131  001D3E  0E02               	movlw	2
  1132  001D40  ECD5  F011         	call	_Lcd_Set_Cursor
  1133                           
  1134                           ;funciones.c: 52: switch ( sensed) {
  1135  001D44  D02A               	goto	l2894
  1136  001D46                     l2880:
  1137                           
  1138                           ;funciones.c: 55: Lcd_Write_String("Go ahead");
  1139  001D46  0E08               	movlw	high STR_2
  1140  001D48  6E06               	movwf	Lcd_Write_String@a+1,c
  1141  001D4A  0EA4               	movlw	low STR_2
  1142  001D4C  6E05               	movwf	Lcd_Write_String@a,c
  1143  001D4E  ECC2  F010         	call	_Lcd_Write_String	;wreg free
  1144                           
  1145                           ;funciones.c: 56: break;
  1146  001D52  D042               	goto	l70
  1147  001D54                     l2882:
  1148                           
  1149                           ;funciones.c: 59: Lcd_Write_String("Left");
  1150  001D54  0E08               	movlw	high (STR_4+5)
  1151  001D56  6E06               	movwf	Lcd_Write_String@a+1,c
  1152  001D58  0E9F               	movlw	low (STR_4+5)
  1153  001D5A  6E05               	movwf	Lcd_Write_String@a,c
  1154  001D5C  ECC2  F010         	call	_Lcd_Write_String	;wreg free
  1155                           
  1156                           ;funciones.c: 60: break;
  1157  001D60  D03B               	goto	l70
  1158  001D62                     l2884:
  1159                           
  1160                           ;funciones.c: 63: Lcd_Write_String("More Left");
  1161  001D62  0E08               	movlw	high STR_4
  1162  001D64  6E06               	movwf	Lcd_Write_String@a+1,c
  1163  001D66  0E9A               	movlw	low STR_4
  1164  001D68  6E05               	movwf	Lcd_Write_String@a,c
  1165  001D6A  ECC2  F010         	call	_Lcd_Write_String	;wreg free
  1166                           
  1167                           ;funciones.c: 64: break;
  1168  001D6E  D034               	goto	l70
  1169  001D70                     l2886:
  1170                           
  1171                           ;funciones.c: 67: Lcd_Write_String("Right");
  1172  001D70  0E08               	movlw	high (STR_6+5)
  1173  001D72  6E06               	movwf	Lcd_Write_String@a+1,c
  1174  001D74  0E94               	movlw	low (STR_6+5)
  1175  001D76  6E05               	movwf	Lcd_Write_String@a,c
  1176  001D78  ECC2  F010         	call	_Lcd_Write_String	;wreg free
  1177                           
  1178                           ;funciones.c: 68: break;
  1179  001D7C  D02D               	goto	l70
  1180  001D7E                     l2888:
  1181                           
  1182                           ;funciones.c: 71: Lcd_Write_String("More Right");
  1183  001D7E  0E08               	movlw	high STR_6
  1184  001D80  6E06               	movwf	Lcd_Write_String@a+1,c
  1185  001D82  0E8F               	movlw	low STR_6
  1186  001D84  6E05               	movwf	Lcd_Write_String@a,c
  1187  001D86  ECC2  F010         	call	_Lcd_Write_String	;wreg free
  1188                           
  1189                           ;funciones.c: 72: break;
  1190  001D8A  D026               	goto	l70
  1191  001D8C                     l2890:
  1192                           
  1193                           ;funciones.c: 75: Lcd_Write_String("Go ahead");
  1194  001D8C  0E08               	movlw	high STR_2
  1195  001D8E  6E06               	movwf	Lcd_Write_String@a+1,c
  1196  001D90  0EA4               	movlw	low STR_2
  1197  001D92  6E05               	movwf	Lcd_Write_String@a,c
  1198  001D94  ECC2  F010         	call	_Lcd_Write_String	;wreg free
  1199                           
  1200                           ;funciones.c: 76: break;
  1201  001D98  D01F               	goto	l70
  1202  001D9A                     l2894:
  1203  001D9A  C051  F04F         	movff	RobotControl@sensed,??_RobotControl
  1204  001D9E  C052  F050         	movff	RobotControl@sensed+1,??_RobotControl+1
  1205                           
  1206                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  1207                           ; Switch size 1, requested type "space"
  1208                           ; Number of cases is 2, Range of values is 0 to 255
  1209                           ; switch strategies available:
  1210                           ; Name         Instructions Cycles
  1211                           ; simple_byte            7     4 (average)
  1212                           ;	Chosen strategy is simple_byte
  1213  001DA2  5050               	movf	??_RobotControl+1,w,c
  1214  001DA4  0A00               	xorlw	0	; case 0
  1215  001DA6  B4D8               	btfsc	status,2,c
  1216  001DA8  D004               	goto	l2958
  1217  001DAA  0AFF               	xorlw	255	; case 255
  1218  001DAC  B4D8               	btfsc	status,2,c
  1219  001DAE  D00C               	goto	l2960
  1220  001DB0  D7ED               	goto	l2890
  1221  001DB2                     l2958:
  1222                           
  1223                           ; Switch size 1, requested type "space"
  1224                           ; Number of cases is 3, Range of values is 0 to 2
  1225                           ; switch strategies available:
  1226                           ; Name         Instructions Cycles
  1227                           ; simple_byte           10     6 (average)
  1228                           ;	Chosen strategy is simple_byte
  1229  001DB2  504F               	movf	??_RobotControl,w,c
  1230  001DB4  0A00               	xorlw	0	; case 0
  1231  001DB6  B4D8               	btfsc	status,2,c
  1232  001DB8  D7C6               	goto	l2880
  1233  001DBA  0A01               	xorlw	1	; case 1
  1234  001DBC  B4D8               	btfsc	status,2,c
  1235  001DBE  D7CA               	goto	l2882
  1236  001DC0  0A03               	xorlw	3	; case 2
  1237  001DC2  B4D8               	btfsc	status,2,c
  1238  001DC4  D7CE               	goto	l2884
  1239  001DC6  D7E2               	goto	l2890
  1240  001DC8                     l2960:
  1241                           
  1242                           ; Switch size 1, requested type "space"
  1243                           ; Number of cases is 2, Range of values is 254 to 255
  1244                           ; switch strategies available:
  1245                           ; Name         Instructions Cycles
  1246                           ; simple_byte            7     4 (average)
  1247                           ;	Chosen strategy is simple_byte
  1248  001DC8  504F               	movf	??_RobotControl,w,c
  1249  001DCA  0AFE               	xorlw	254	; case 254
  1250  001DCC  B4D8               	btfsc	status,2,c
  1251  001DCE  D7D7               	goto	l2888
  1252  001DD0  0A01               	xorlw	1	; case 255
  1253  001DD2  B4D8               	btfsc	status,2,c
  1254  001DD4  D7CD               	goto	l2886
  1255  001DD6  D7DA               	goto	l2890
  1256  001DD8                     l70:
  1257  001DD8  0012               	return	
  1258  001DDA                     __end_of_RobotControl:
  1259                           	opt stack 0
  1260                           tblptru	equ	0xFF8
  1261                           intcon	equ	0xFF2
  1262                           wreg	equ	0xFE8
  1263                           status	equ	0xFD8
  1264                           
  1265 ;; *************** function _getCNY70Value *****************
  1266 ;; Defined at:
  1267 ;;		line 3 in file "cny70.c"
  1268 ;; Parameters:    Size  Location     Type
  1269 ;;		None
  1270 ;; Auto vars:     Size  Location     Type
  1271 ;;		None
  1272 ;; Return value:  Size  Location     Type
  1273 ;;                  2    0[COMRAM] int 
  1274 ;; Registers used:
  1275 ;;		wreg, status,2
  1276 ;; Tracked objects:
  1277 ;;		On entry : 0/0
  1278 ;;		On exit  : 0/0
  1279 ;;		Unchanged: 0/0
  1280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1281 ;;      Params:         2       0       0       0       0       0       0       0       0
  1282 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1283 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1284 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1285 ;;Total ram usage:        2 bytes
  1286 ;; Hardware stack levels used:    1
  1287 ;; This function calls:
  1288 ;;		Nothing
  1289 ;; This function is called by:
  1290 ;;		_RobotControl
  1291 ;; This function uses a non-reentrant model
  1292 ;;
  1293                           
  1294                           	psect	text4
  1295  0021FE                     __ptext4:
  1296                           	opt stack 0
  1297  0021FE                     _getCNY70Value:
  1298                           	opt stack 29
  1299                           
  1300                           ;cny70.c: 5: if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 0 && PORTBb
      +                          its.RB3 == 1 && PORTBbits.RB4 == 1)
  1301                           
  1302                           ;incstack = 0
  1303  0021FE  B081               	btfsc	3969,0,c	;volatile
  1304  002200  A281               	btfss	3969,1,c	;volatile
  1305  002202  D005               	goto	l130
  1306  002204  A481               	btfss	3969,2,c	;volatile
  1307  002206  A681               	btfss	3969,3,c	;volatile
  1308  002208  D002               	goto	l130
  1309  00220A  B881               	btfsc	3969,4,c	;volatile
  1310  00220C  D02F               	goto	l1796
  1311  00220E                     l130:
  1312                           
  1313                           ;cny70.c: 7: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 0 && PORTBbits.RB2 == 1 && P
      +                          ORTBbits.RB3 == 1 && PORTBbits.RB4 == 1)
  1314  00220E  B081               	btfsc	3969,0,c	;volatile
  1315  002210  B281               	btfsc	3969,1,c	;volatile
  1316  002212  D008               	goto	l133
  1317  002214  B481               	btfsc	3969,2,c	;volatile
  1318  002216  A681               	btfss	3969,3,c	;volatile
  1319  002218  D005               	goto	l133
  1320  00221A  A881               	btfss	3969,4,c	;volatile
  1321  00221C  D003               	goto	l133
  1322                           
  1323                           ;cny70.c: 8: return -1;
  1324  00221E  6801               	setf	?_getCNY70Value,c
  1325  002220  6802               	setf	?_getCNY70Value+1,c
  1326  002222  D028               	goto	l131
  1327  002224                     l133:
  1328                           
  1329                           ;cny70.c: 9: else if(PORTBbits.RB0 == 0 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 1 && P
      +                          ORTBbits.RB3 == 1 && PORTBbits.RB4 == 1)
  1330  002224  A081               	btfss	3969,0,c	;volatile
  1331  002226  A281               	btfss	3969,1,c	;volatile
  1332  002228  D009               	goto	l135
  1333  00222A  B481               	btfsc	3969,2,c	;volatile
  1334  00222C  A681               	btfss	3969,3,c	;volatile
  1335  00222E  D006               	goto	l135
  1336  002230  A881               	btfss	3969,4,c	;volatile
  1337  002232  D004               	goto	l135
  1338                           
  1339                           ;cny70.c: 10: return -2;
  1340  002234  0EFF               	movlw	255
  1341  002236  6E02               	movwf	?_getCNY70Value+1,c
  1342  002238  0EFE               	movlw	254
  1343  00223A  D01B               	goto	L5
  1344  00223C                     l135:
  1345                           
  1346                           ;cny70.c: 11: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 1 && 
      +                          PORTBbits.RB3 == 0 && PORTBbits.RB4 == 1)
  1347  00223C  B081               	btfsc	3969,0,c	;volatile
  1348  00223E  A281               	btfss	3969,1,c	;volatile
  1349  002240  D009               	goto	l137
  1350  002242  B481               	btfsc	3969,2,c	;volatile
  1351  002244  B681               	btfsc	3969,3,c	;volatile
  1352  002246  D006               	goto	l137
  1353  002248  A881               	btfss	3969,4,c	;volatile
  1354  00224A  D004               	goto	l137
  1355                           
  1356                           ;cny70.c: 12: return 1;
  1357  00224C  0E00               	movlw	0
  1358  00224E  6E02               	movwf	?_getCNY70Value+1,c
  1359  002250  0E01               	movlw	1
  1360  002252  D00F               	goto	L5
  1361  002254                     l137:
  1362                           
  1363                           ;cny70.c: 13: else if(PORTBbits.RB0 == 1 && PORTBbits.RB1 == 1 && PORTBbits.RB2 == 1 && 
      +                          PORTBbits.RB3 == 1 && PORTBbits.RB4 == 0)
  1364  002254  B081               	btfsc	3969,0,c	;volatile
  1365  002256  A281               	btfss	3969,1,c	;volatile
  1366  002258  D009               	goto	l1796
  1367  00225A  B481               	btfsc	3969,2,c	;volatile
  1368  00225C  A681               	btfss	3969,3,c	;volatile
  1369  00225E  D006               	goto	l1796
  1370  002260  B881               	btfsc	3969,4,c	;volatile
  1371  002262  D004               	goto	l1796
  1372                           
  1373                           ;cny70.c: 14: return 2;
  1374  002264  0E00               	movlw	0
  1375  002266  6E02               	movwf	?_getCNY70Value+1,c
  1376  002268  0E02               	movlw	2
  1377  00226A  D003               	goto	L5
  1378  00226C                     l1796:
  1379                           
  1380                           ;cny70.c: 15: else
  1381                           ;cny70.c: 16: return 0;
  1382  00226C  0E00               	movlw	0
  1383  00226E  6E02               	movwf	?_getCNY70Value+1,c
  1384  002270  0E00               	movlw	0
  1385  002272                     L5:
  1386  002272  6E01               	movwf	?_getCNY70Value,c
  1387  002274                     l131:
  1388  002274  0012               	return	
  1389  002276                     __end_of_getCNY70Value:
  1390                           	opt stack 0
  1391                           tblptru	equ	0xFF8
  1392                           intcon	equ	0xFF2
  1393                           wreg	equ	0xFE8
  1394                           status	equ	0xFD8
  1395                           
  1396 ;; *************** function _Lcd_Write_Integer *****************
  1397 ;; Defined at:
  1398 ;;		line 113 in file "lcd.c"
  1399 ;; Parameters:    Size  Location     Type
  1400 ;;  a               2   76[COMRAM] int 
  1401 ;; Auto vars:     Size  Location     Type
  1402 ;;  s              20   35[BANK0 ] unsigned char [20]
  1403 ;; Return value:  Size  Location     Type
  1404 ;;		None               void
  1405 ;; Registers used:
  1406 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1407 ;; Tracked objects:
  1408 ;;		On entry : 0/0
  1409 ;;		On exit  : 0/0
  1410 ;;		Unchanged: 0/0
  1411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1412 ;;      Params:         2       0       0       0       0       0       0       0       0
  1413 ;;      Locals:         0      20       0       0       0       0       0       0       0
  1414 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1415 ;;      Totals:         2      20       0       0       0       0       0       0       0
  1416 ;;Total ram usage:       22 bytes
  1417 ;; Hardware stack levels used:    1
  1418 ;; Hardware stack levels required when called:    4
  1419 ;; This function calls:
  1420 ;;		_Lcd_Write_String
  1421 ;;		_sprintf
  1422 ;; This function is called by:
  1423 ;;		_RobotControl
  1424 ;; This function uses a non-reentrant model
  1425 ;;
  1426                           
  1427                           	psect	text5
  1428  0024B0                     __ptext5:
  1429                           	opt stack 0
  1430  0024B0                     _Lcd_Write_Integer:
  1431                           	opt stack 25
  1432                           
  1433                           ;lcd.c: 114: unsigned char s[20];
  1434                           ;lcd.c: 115: sprintf(s, "Integer = %d", a);
  1435                           
  1436                           ;incstack = 0
  1437  0024B0  0100               	movlb	0	; () banked
  1438  0024B2  0E00               	movlw	high Lcd_Write_Integer@s
  1439  0024B4  6E41               	movwf	sprintf@sp+1,c
  1440  0024B6  0100               	movlb	0	; () banked
  1441  0024B8  0E83               	movlw	low Lcd_Write_Integer@s
  1442  0024BA  6E40               	movwf	sprintf@sp,c
  1443  0024BC  0E08               	movlw	high STR_9
  1444  0024BE  6E43               	movwf	sprintf@f+1,c
  1445  0024C0  0E77               	movlw	low STR_9
  1446  0024C2  6E42               	movwf	sprintf@f,c
  1447  0024C4  C04D  F044         	movff	Lcd_Write_Integer@a,?_sprintf+4
  1448  0024C8  C04E  F045         	movff	Lcd_Write_Integer@a+1,?_sprintf+5
  1449  0024CC  EC5B  F004         	call	_sprintf	;wreg free
  1450                           
  1451                           ;lcd.c: 117: Lcd_Write_String(s);
  1452  0024D0  0100               	movlb	0	; () banked
  1453  0024D2  0E00               	movlw	high Lcd_Write_Integer@s
  1454  0024D4  6E06               	movwf	Lcd_Write_String@a+1,c
  1455  0024D6  0100               	movlb	0	; () banked
  1456  0024D8  0E83               	movlw	low Lcd_Write_Integer@s
  1457  0024DA  6E05               	movwf	Lcd_Write_String@a,c
  1458  0024DC  ECC2  F010         	call	_Lcd_Write_String	;wreg free
  1459  0024E0  0012               	return	
  1460  0024E2                     __end_of_Lcd_Write_Integer:
  1461                           	opt stack 0
  1462                           tblptru	equ	0xFF8
  1463                           intcon	equ	0xFF2
  1464                           wreg	equ	0xFE8
  1465                           status	equ	0xFD8
  1466                           
  1467 ;; *************** function _sprintf *****************
  1468 ;; Defined at:
  1469 ;;		line 492 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  1470 ;; Parameters:    Size  Location     Type
  1471 ;;  sp              2   63[COMRAM] PTR unsigned char 
  1472 ;;		 -> Lcd_Write_Integer@s(20), Lcd_Write_Float@s(20), 
  1473 ;;  f               2   65[COMRAM] PTR const unsigned char 
  1474 ;;		 -> STR_9(13), STR_8(11), 
  1475 ;; Auto vars:     Size  Location     Type
  1476 ;;  vd              4    7[BANK0 ] unsigned long 
  1477 ;;  vd              4   11[BANK0 ] unsigned long 
  1478 ;;  _val            5   24[BANK0 ] struct .
  1479 ;;  fval            3   31[BANK0 ] struct .
  1480 ;;  integ           3   19[BANK0 ] struct .
  1481 ;;  ival            3    0        struct .
  1482 ;;  exp             2   29[BANK0 ] int 
  1483 ;;  prec            2   22[BANK0 ] int 
  1484 ;;  flag            2   17[BANK0 ] unsigned short 
  1485 ;;  ap              2   15[BANK0 ] PTR void [1]
  1486 ;;		 -> ?_sprintf(2), 
  1487 ;;  width           2    0        int 
  1488 ;;  c               1   34[BANK0 ] char 
  1489 ;;  d               1    0        unsigned char 
  1490 ;; Return value:  Size  Location     Type
  1491 ;;                  2   63[COMRAM] int 
  1492 ;; Registers used:
  1493 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1494 ;; Tracked objects:
  1495 ;;		On entry : 0/0
  1496 ;;		On exit  : 0/0
  1497 ;;		Unchanged: 0/0
  1498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1499 ;;      Params:         7       0       0       0       0       0       0       0       0
  1500 ;;      Locals:         0      35       0       0       0       0       0       0       0
  1501 ;;      Temps:          6       0       0       0       0       0       0       0       0
  1502 ;;      Totals:        13      35       0       0       0       0       0       0       0
  1503 ;;Total ram usage:       48 bytes
  1504 ;; Hardware stack levels used:    1
  1505 ;; Hardware stack levels required when called:    3
  1506 ;; This function calls:
  1507 ;;		___awdiv
  1508 ;;		___ftadd
  1509 ;;		___ftge
  1510 ;;		___ftmul
  1511 ;;		___ftneg
  1512 ;;		___ftsub
  1513 ;;		___fttol
  1514 ;;		___lldiv
  1515 ;;		___llmod
  1516 ;;		___lltoft
  1517 ;;		___wmul
  1518 ;;		__div_to_l_
  1519 ;;		__tdiv_to_l_
  1520 ;;		_fround
  1521 ;;		_scale
  1522 ;; This function is called by:
  1523 ;;		_Lcd_Write_Integer
  1524 ;;		_Lcd_Write_Float
  1525 ;; This function uses a non-reentrant model
  1526 ;;
  1527                           
  1528                           	psect	text6
  1529  0008B6                     __ptext6:
  1530                           	opt stack 0
  1531  0008B6                     _sprintf:
  1532                           	opt stack 25
  1533                           
  1534                           ;doprnt.c: 494: va_list ap;
  1535                           ;doprnt.c: 499: signed char c;
  1536                           ;doprnt.c: 501: int width;
  1537                           ;doprnt.c: 504: int prec;
  1538                           ;doprnt.c: 508: unsigned short flag;
  1539                           ;doprnt.c: 515: char d;
  1540                           ;doprnt.c: 516: double fval, integ;
  1541                           ;doprnt.c: 517: int exp;
  1542                           ;doprnt.c: 518: double ival;
  1543                           ;doprnt.c: 519: union {
  1544                           ;doprnt.c: 520: unsigned long _val;
  1545                           ;doprnt.c: 521: struct {
  1546                           ;doprnt.c: 522: const char * _cp;
  1547                           ;doprnt.c: 523: unsigned _len;
  1548                           ;doprnt.c: 524: } _str;
  1549                           ;doprnt.c: 525: } _val;
  1550                           ;doprnt.c: 542: *ap = __va_start();
  1551                           
  1552                           ;incstack = 0
  1553  0008B6  0E00               	movlw	high (?_sprintf+4)
  1554  0008B8  0100               	movlb	0	; () banked
  1555  0008BA  6F70               	movwf	(sprintf@ap+1)& (0+255),b
  1556  0008BC  0E44               	movlw	low (?_sprintf+4)
  1557  0008BE  0100               	movlb	0	; () banked
  1558  0008C0  6F6F               	movwf	sprintf@ap& (0+255),b
  1559                           
  1560                           ;doprnt.c: 545: while(c = *f++) {
  1561  0008C2  EFA4  F008         	goto	l2760
  1562  0008C6                     l2558:
  1563                           
  1564                           ; BSR set to: 0
  1565                           ;doprnt.c: 547: if(c != '%')
  1566  0008C6  0100               	movlb	0	; () banked
  1567  0008C8  5182               	movf	sprintf@c& (0+255),w,b
  1568  0008CA  0A25               	xorlw	37
  1569  0008CC  B4D8               	btfsc	status,2,c
  1570  0008CE  D00B               	goto	l2564
  1571                           
  1572                           ; BSR set to: 0
  1573                           ;doprnt.c: 549: {
  1574                           ;doprnt.c: 550: ((*sp++ = (c)));
  1575  0008D0  C040  FFD9         	movff	sprintf@sp,fsr2l
  1576  0008D4  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  1577  0008D8  0100               	movlb	0	; () banked
  1578  0008DA  C082  FFDF         	movff	sprintf@c,indf2
  1579                           
  1580                           ; BSR set to: 0
  1581  0008DE  4A40               	infsnz	sprintf@sp,f,c
  1582  0008E0  2A41               	incf	sprintf@sp+1,f,c
  1583                           
  1584                           ;doprnt.c: 551: continue;
  1585  0008E2  EFA4  F008         	goto	l2760
  1586  0008E6                     l2564:
  1587                           
  1588                           ; BSR set to: 0
  1589                           ;doprnt.c: 552: }
  1590                           ;doprnt.c: 557: flag = 0;
  1591  0008E6  0E00               	movlw	0
  1592  0008E8  0100               	movlb	0	; () banked
  1593  0008EA  6F72               	movwf	(sprintf@flag+1)& (0+255),b
  1594  0008EC  0E00               	movlw	0
  1595  0008EE  0100               	movlb	0	; () banked
  1596  0008F0  6F71               	movwf	sprintf@flag& (0+255),b
  1597                           
  1598                           ;doprnt.c: 644: switch(c = *f++) {
  1599  0008F2  D003               	goto	l2570
  1600  0008F4                     l2566:
  1601                           
  1602                           ; BSR set to: 0
  1603                           ;doprnt.c: 672: flag |= 0x400;
  1604  0008F4  0100               	movlb	0	; () banked
  1605  0008F6  8572               	bsf	(sprintf@flag+1)& (0+255),2,b
  1606                           
  1607                           ;doprnt.c: 673: break;
  1608  0008F8  D01A               	goto	l2572
  1609  0008FA                     l2570:
  1610                           
  1611                           ; BSR set to: 0
  1612  0008FA  C042  FFF6         	movff	sprintf@f,tblptrl
  1613  0008FE  C043  FFF7         	movff	sprintf@f+1,tblptrh
  1614  000902  4A42               	infsnz	sprintf@f,f,c
  1615  000904  2A43               	incf	sprintf@f+1,f,c
  1616  000906                     	if	0	;tblptru may be non-zero
  1617  000906                     	endif
  1618  000906                     	if	0	;tblptru may be non-zero
  1619  000906                     	endif
  1620  000906  0008               	tblrd		*
  1621  000908  0100               	movlb	0	; () banked
  1622  00090A  CFF5 F082          	movff	tablat,sprintf@c
  1623  00090E  0100               	movlb	0	; () banked
  1624  000910  5182               	movf	sprintf@c& (0+255),w,b
  1625                           
  1626                           ; Switch size 1, requested type "space"
  1627                           ; Number of cases is 4, Range of values is 0 to 105
  1628                           ; switch strategies available:
  1629                           ; Name         Instructions Cycles
  1630                           ; simple_byte           13     7 (average)
  1631                           ;	Chosen strategy is simple_byte
  1632  000912  0A00               	xorlw	0	; case 0
  1633  000914  B4D8               	btfsc	status,2,c
  1634  000916  EFB2  F008         	goto	l2762
  1635  00091A  0A64               	xorlw	100	; case 100
  1636  00091C  B4D8               	btfsc	status,2,c
  1637  00091E  D007               	goto	l2572
  1638  000920  0A02               	xorlw	2	; case 102
  1639  000922  B4D8               	btfsc	status,2,c
  1640  000924  D7E7               	goto	l2566
  1641  000926  0A0F               	xorlw	15	; case 105
  1642  000928  A4D8               	btfss	status,2,c
  1643  00092A  EFA4  F008         	goto	l2760
  1644  00092E                     l2572:
  1645                           
  1646                           ; BSR set to: 0
  1647                           ;doprnt.c: 834: if(flag & (0x700)) {
  1648  00092E  0E07               	movlw	7
  1649  000930  0100               	movlb	0	; () banked
  1650  000932  1572               	andwf	(sprintf@flag+1)& (0+255),w,b
  1651  000934  B4D8               	btfsc	status,2,c
  1652  000936  D32E               	goto	l2720
  1653                           
  1654                           ; BSR set to: 0
  1655                           ;doprnt.c: 838: prec = 6;
  1656  000938  0E00               	movlw	0
  1657  00093A  0100               	movlb	0	; () banked
  1658  00093C  6F77               	movwf	(sprintf@prec+1)& (0+255),b
  1659  00093E  0E06               	movlw	6
  1660  000940  0100               	movlb	0	; () banked
  1661  000942  6F76               	movwf	sprintf@prec& (0+255),b
  1662                           
  1663                           ; BSR set to: 0
  1664                           ;doprnt.c: 839: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1665  000944  C06F  FFD9         	movff	sprintf@ap,fsr2l
  1666  000948  C070  FFDA         	movff	sprintf@ap+1,fsr2h
  1667  00094C  0100               	movlb	0	; () banked
  1668  00094E  CFDE F07F          	movff	postinc2,sprintf@fval
  1669  000952  0100               	movlb	0	; () banked
  1670  000954  CFDE F080          	movff	postinc2,sprintf@fval+1
  1671  000958  0100               	movlb	0	; () banked
  1672  00095A  CFDD F081          	movff	postdec2,sprintf@fval+2
  1673                           
  1674                           ; BSR set to: 0
  1675  00095E  0E03               	movlw	3
  1676  000960  0100               	movlb	0	; () banked
  1677  000962  276F               	addwf	sprintf@ap& (0+255),f,b
  1678  000964  0E00               	movlw	0
  1679  000966  0100               	movlb	0	; () banked
  1680  000968  2370               	addwfc	(sprintf@ap+1)& (0+255),f,b
  1681                           
  1682                           ; BSR set to: 0
  1683                           ;doprnt.c: 840: if(fval < 0.0) {
  1684  00096A  0100               	movlb	0	; () banked
  1685  00096C  5181               	movf	(sprintf@fval+2)& (0+255),w,b
  1686  00096E  0A80               	xorlw	128
  1687  000970  0F80               	addlw	128
  1688  000972  E107               	bnz	u2605
  1689  000974  0E00               	movlw	0
  1690  000976  0100               	movlb	0	; () banked
  1691  000978  5D80               	subwf	(sprintf@fval+1)& (0+255),w,b
  1692  00097A  E103               	bnz	u2605
  1693  00097C  0E00               	movlw	0
  1694  00097E  0100               	movlb	0	; () banked
  1695  000980  5D7F               	subwf	sprintf@fval& (0+255),w,b
  1696  000982                     u2605:
  1697  000982  B0D8               	btfsc	status,0,c
  1698  000984  D011               	goto	l2586
  1699                           
  1700                           ; BSR set to: 0
  1701                           ;doprnt.c: 841: fval = -fval;
  1702  000986  C07F  F001         	movff	sprintf@fval,___ftneg@f1
  1703  00098A  C080  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  1704  00098E  C081  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  1705  000992  ECB0  F012         	call	___ftneg	;wreg free
  1706  000996  C001  F07F         	movff	?___ftneg,sprintf@fval
  1707  00099A  C002  F080         	movff	?___ftneg+1,sprintf@fval+1
  1708  00099E  C003  F081         	movff	?___ftneg+2,sprintf@fval+2
  1709                           
  1710                           ;doprnt.c: 842: flag |= 0x03;
  1711  0009A2  0E03               	movlw	3
  1712  0009A4  0100               	movlb	0	; () banked
  1713  0009A6  1371               	iorwf	sprintf@flag& (0+255),f,b
  1714  0009A8                     l2586:
  1715                           
  1716                           ; BSR set to: 0
  1717                           ;doprnt.c: 843: }
  1718                           ;doprnt.c: 844: exp = 0;
  1719  0009A8  0E00               	movlw	0
  1720  0009AA  0100               	movlb	0	; () banked
  1721  0009AC  6F7E               	movwf	(sprintf@exp+1)& (0+255),b
  1722  0009AE  0E00               	movlw	0
  1723  0009B0  0100               	movlb	0	; () banked
  1724  0009B2  6F7D               	movwf	sprintf@exp& (0+255),b
  1725                           
  1726                           ; BSR set to: 0
  1727                           ;doprnt.c: 845: if( fval!=0) {
  1728  0009B4  0E7F               	movlw	127
  1729  0009B6  0100               	movlb	0	; () banked
  1730  0009B8  1581               	andwf	(sprintf@fval+2)& (0+255),w,b
  1731  0009BA  0100               	movlb	0	; () banked
  1732  0009BC  1180               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1733  0009BE  0100               	movlb	0	; () banked
  1734  0009C0  117F               	iorwf	sprintf@fval& (0+255),w,b
  1735  0009C2  B4D8               	btfsc	status,2,c
  1736  0009C4  D097               	goto	l2614
  1737                           
  1738                           ; BSR set to: 0
  1739                           ;doprnt.c: 846: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1740  0009C6  0E82               	movlw	130
  1741  0009C8  6E47               	movwf	??_sprintf& (0+255),c
  1742  0009CA  0EFF               	movlw	255
  1743  0009CC  6E48               	movwf	(??_sprintf+1)& (0+255),c
  1744  0009CE  0100               	movlb	0	; () banked
  1745  0009D0  C07F  F049         	movff	sprintf@fval,??_sprintf+2
  1746  0009D4  0100               	movlb	0	; () banked
  1747  0009D6  C080  F04A         	movff	sprintf@fval+1,??_sprintf+3
  1748  0009DA  0100               	movlb	0	; () banked
  1749  0009DC  C081  F04B         	movff	sprintf@fval+2,??_sprintf+4
  1750  0009E0  0100               	movlb	0	; () banked
  1751  0009E2  C082  F04C         	movff	sprintf@fval+3,??_sprintf+5
  1752  0009E6  0E10               	movlw	16
  1753  0009E8  D005               	goto	u2620
  1754  0009EA                     u2625:
  1755  0009EA  90D8               	bcf	status,0,c
  1756  0009EC  324C               	rrcf	??_sprintf+5,f,c
  1757  0009EE  324B               	rrcf	??_sprintf+4,f,c
  1758  0009F0  324A               	rrcf	??_sprintf+3,f,c
  1759  0009F2  3249               	rrcf	??_sprintf+2,f,c
  1760  0009F4                     u2620:
  1761  0009F4  2EE8               	decfsz	wreg,f,c
  1762  0009F6  D7F9               	goto	u2625
  1763  0009F8  5049               	movf	??_sprintf+2,w,c
  1764  0009FA  2447               	addwf	??_sprintf,w,c
  1765  0009FC  0100               	movlb	0	; () banked
  1766  0009FE  6F7D               	movwf	sprintf@exp& (0+255),b
  1767  000A00  0E00               	movlw	0
  1768  000A02  2048               	addwfc	??_sprintf+1,w,c
  1769  000A04  0100               	movlb	0	; () banked
  1770  000A06  6F7E               	movwf	(sprintf@exp+1)& (0+255),b
  1771                           
  1772                           ; BSR set to: 0
  1773                           ;doprnt.c: 847: exp--;
  1774  000A08  0100               	movlb	0	; () banked
  1775  000A0A  077D               	decf	sprintf@exp& (0+255),f,b
  1776  000A0C  A0D8               	btfss	status,0,c
  1777  000A0E  077E               	decf	(sprintf@exp+1)& (0+255),f,b
  1778                           
  1779                           ; BSR set to: 0
  1780                           ;doprnt.c: 848: exp *= 3;
  1781  000A10  C07D  F00F         	movff	sprintf@exp,___wmul@multiplier
  1782  000A14  C07E  F010         	movff	sprintf@exp+1,___wmul@multiplier+1
  1783  000A18  0E00               	movlw	0
  1784  000A1A  6E12               	movwf	___wmul@multiplicand+1,c
  1785  000A1C  0E03               	movlw	3
  1786  000A1E  6E11               	movwf	___wmul@multiplicand,c
  1787  000A20  EC9D  F012         	call	___wmul	;wreg free
  1788  000A24  C00F  F07D         	movff	?___wmul,sprintf@exp
  1789  000A28  C010  F07E         	movff	?___wmul+1,sprintf@exp+1
  1790                           
  1791                           ;doprnt.c: 849: exp /= 10;
  1792  000A2C  C07D  F007         	movff	sprintf@exp,___awdiv@dividend
  1793  000A30  C07E  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  1794  000A34  0E00               	movlw	0
  1795  000A36  6E0A               	movwf	___awdiv@divisor+1,c
  1796  000A38  0E0A               	movlw	10
  1797  000A3A  6E09               	movwf	___awdiv@divisor,c
  1798  000A3C  EC9F  F00F         	call	___awdiv	;wreg free
  1799  000A40  C007  F07D         	movff	?___awdiv,sprintf@exp
  1800  000A44  C008  F07E         	movff	?___awdiv+1,sprintf@exp+1
  1801                           
  1802                           ;doprnt.c: 850: if(exp < 0)
  1803  000A48  0100               	movlb	0	; () banked
  1804  000A4A  517E               	movf	(sprintf@exp+1)& (0+255),w,b
  1805  000A4C  0A80               	xorlw	128
  1806  000A4E  6EF3               	movwf	prodl,c
  1807  000A50  0E80               	movlw	128
  1808  000A52  5CF3               	subwf	prodl,w,c
  1809  000A54  0E00               	movlw	0
  1810  000A56  B4D8               	btfsc	status,2,c
  1811  000A58  5D7D               	subwf	sprintf@exp& (0+255),w,b
  1812  000A5A  B0D8               	btfsc	status,0,c
  1813  000A5C  D004               	goto	l2602
  1814                           
  1815                           ; BSR set to: 0
  1816                           ;doprnt.c: 851: exp--;
  1817  000A5E  0100               	movlb	0	; () banked
  1818  000A60  077D               	decf	sprintf@exp& (0+255),f,b
  1819  000A62  A0D8               	btfss	status,0,c
  1820  000A64  077E               	decf	(sprintf@exp+1)& (0+255),f,b
  1821  000A66                     l2602:
  1822                           
  1823                           ; BSR set to: 0
  1824                           ;doprnt.c: 855: integ = scale(-exp);
  1825  000A66  0100               	movlb	0	; () banked
  1826  000A68  517D               	movf	sprintf@exp& (0+255),w,b
  1827  000A6A  0800               	sublw	0
  1828  000A6C  ECB9  F008         	call	_scale
  1829  000A70  C024  F073         	movff	?_scale,sprintf@integ
  1830  000A74  C025  F074         	movff	?_scale+1,sprintf@integ+1
  1831  000A78  C026  F075         	movff	?_scale+2,sprintf@integ+2
  1832                           
  1833                           ;doprnt.c: 856: integ *= fval;
  1834  000A7C  C073  F015         	movff	sprintf@integ,___ftmul@f1
  1835  000A80  C074  F016         	movff	sprintf@integ+1,___ftmul@f1+1
  1836  000A84  C075  F017         	movff	sprintf@integ+2,___ftmul@f1+2
  1837  000A88  C07F  F018         	movff	sprintf@fval,___ftmul@f2
  1838  000A8C  C080  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  1839  000A90  C081  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  1840  000A94  ECAE  F00D         	call	___ftmul	;wreg free
  1841  000A98  C015  F073         	movff	?___ftmul,sprintf@integ
  1842  000A9C  C016  F074         	movff	?___ftmul+1,sprintf@integ+1
  1843  000AA0  C017  F075         	movff	?___ftmul+2,sprintf@integ+2
  1844                           
  1845                           ;doprnt.c: 857: if(integ < 1.0)
  1846  000AA4  C073  F001         	movff	sprintf@integ,___ftge@ff1
  1847  000AA8  C074  F002         	movff	sprintf@integ+1,___ftge@ff1+1
  1848  000AAC  C075  F003         	movff	sprintf@integ+2,___ftge@ff1+2
  1849  000AB0  0E00               	movlw	0
  1850  000AB2  6E04               	movwf	___ftge@ff2,c
  1851  000AB4  0E80               	movlw	128
  1852  000AB6  6E05               	movwf	___ftge@ff2+1,c
  1853  000AB8  0E3F               	movlw	63
  1854  000ABA  6E06               	movwf	___ftge@ff2+2,c
  1855  000ABC  EC39  F010         	call	___ftge	;wreg free
  1856  000AC0  B0D8               	btfsc	status,0,c
  1857  000AC2  D005               	goto	l2610
  1858                           
  1859                           ;doprnt.c: 858: exp--;
  1860  000AC4  0100               	movlb	0	; () banked
  1861  000AC6  077D               	decf	sprintf@exp& (0+255),f,b
  1862  000AC8  A0D8               	btfss	status,0,c
  1863  000ACA  077E               	decf	(sprintf@exp+1)& (0+255),f,b
  1864  000ACC  D013               	goto	l2614
  1865  000ACE                     l2610:
  1866                           
  1867                           ;doprnt.c: 859: else if(integ >= 10.0)
  1868  000ACE  C073  F001         	movff	sprintf@integ,___ftge@ff1
  1869  000AD2  C074  F002         	movff	sprintf@integ+1,___ftge@ff1+1
  1870  000AD6  C075  F003         	movff	sprintf@integ+2,___ftge@ff1+2
  1871  000ADA  0E00               	movlw	0
  1872  000ADC  6E04               	movwf	___ftge@ff2,c
  1873  000ADE  0E20               	movlw	32
  1874  000AE0  6E05               	movwf	___ftge@ff2+1,c
  1875  000AE2  0E41               	movlw	65
  1876  000AE4  6E06               	movwf	___ftge@ff2+2,c
  1877  000AE6  EC39  F010         	call	___ftge	;wreg free
  1878  000AEA  A0D8               	btfss	status,0,c
  1879  000AEC  D003               	goto	l2614
  1880                           
  1881                           ;doprnt.c: 860: exp++;
  1882  000AEE  0100               	movlb	0	; () banked
  1883  000AF0  4B7D               	infsnz	sprintf@exp& (0+255),f,b
  1884  000AF2  2B7E               	incf	(sprintf@exp+1)& (0+255),f,b
  1885  000AF4                     l2614:
  1886                           
  1887                           ;doprnt.c: 861: }
  1888                           ;doprnt.c: 1121: if(prec <= 12)
  1889  000AF4  0100               	movlb	0	; () banked
  1890  000AF6  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  1891  000AF8  0A80               	xorlw	128
  1892  000AFA  6EF3               	movwf	prodl,c
  1893  000AFC  0E80               	movlw	128
  1894  000AFE  5CF3               	subwf	prodl,w,c
  1895  000B00  0E0D               	movlw	13
  1896  000B02  B4D8               	btfsc	status,2,c
  1897  000B04  5D76               	subwf	sprintf@prec& (0+255),w,b
  1898  000B06  B0D8               	btfsc	status,0,c
  1899  000B08  D018               	goto	l2618
  1900                           
  1901                           ; BSR set to: 0
  1902                           ;doprnt.c: 1122: fval += fround(prec);
  1903  000B0A  C07F  F02E         	movff	sprintf@fval,___ftadd@f1
  1904  000B0E  C080  F02F         	movff	sprintf@fval+1,___ftadd@f1+1
  1905  000B12  C081  F030         	movff	sprintf@fval+2,___ftadd@f1+2
  1906  000B16  0100               	movlb	0	; () banked
  1907  000B18  5176               	movf	sprintf@prec& (0+255),w,b
  1908  000B1A  ECA0  F00A         	call	_fround
  1909  000B1E  C024  F031         	movff	?_fround,___ftadd@f2
  1910  000B22  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1911  000B26  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1912  000B2A  ECBD  F00B         	call	___ftadd	;wreg free
  1913  000B2E  C02E  F07F         	movff	?___ftadd,sprintf@fval
  1914  000B32  C02F  F080         	movff	?___ftadd+1,sprintf@fval+1
  1915  000B36  C030  F081         	movff	?___ftadd+2,sprintf@fval+2
  1916  000B3A                     l2618:
  1917                           
  1918                           ;doprnt.c: 1125: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1919  000B3A  0100               	movlb	0	; () banked
  1920  000B3C  517E               	movf	(sprintf@exp+1)& (0+255),w,b
  1921  000B3E  0A80               	xorlw	128
  1922  000B40  6EF3               	movwf	prodl,c
  1923  000B42  0E80               	movlw	128
  1924  000B44  5CF3               	subwf	prodl,w,c
  1925  000B46  0E0A               	movlw	10
  1926  000B48  B4D8               	btfsc	status,2,c
  1927  000B4A  5D7D               	subwf	sprintf@exp& (0+255),w,b
  1928  000B4C  B0D8               	btfsc	status,0,c
  1929  000B4E  D028               	goto	l2626
  1930                           
  1931                           ; BSR set to: 0
  1932  000B50  0E7F               	movlw	127
  1933  000B52  0100               	movlb	0	; () banked
  1934  000B54  1581               	andwf	(sprintf@fval+2)& (0+255),w,b
  1935  000B56  0100               	movlb	0	; () banked
  1936  000B58  1180               	iorwf	(sprintf@fval+1)& (0+255),w,b
  1937  000B5A  0100               	movlb	0	; () banked
  1938  000B5C  117F               	iorwf	sprintf@fval& (0+255),w,b
  1939  000B5E  B4D8               	btfsc	status,2,c
  1940  000B60  D06B               	goto	l2642
  1941                           
  1942                           ; BSR set to: 0
  1943  000B62  C07F  F02B         	movff	sprintf@fval,___fttol@f1
  1944  000B66  C080  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  1945  000B6A  C081  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  1946  000B6E  EC20  F00E         	call	___fttol	;wreg free
  1947  000B72  C02B  F047         	movff	?___fttol,??_sprintf
  1948  000B76  C02C  F048         	movff	?___fttol+1,??_sprintf+1
  1949  000B7A  C02D  F049         	movff	?___fttol+2,??_sprintf+2
  1950  000B7E  C02E  F04A         	movff	?___fttol+3,??_sprintf+3
  1951  000B82  504A               	movf	??_sprintf+3,w,c
  1952  000B84  1047               	iorwf	??_sprintf,w,c
  1953  000B86  1048               	iorwf	??_sprintf+1,w,c
  1954  000B88  1049               	iorwf	??_sprintf+2,w,c
  1955  000B8A  A4D8               	btfss	status,2,c
  1956  000B8C  D055               	goto	l2642
  1957  000B8E  0100               	movlb	0	; () banked
  1958  000B90  517E               	movf	(sprintf@exp+1)& (0+255),w,b
  1959  000B92  0A80               	xorlw	128
  1960  000B94  0F80               	addlw	-128
  1961  000B96  0E02               	movlw	2
  1962  000B98  B4D8               	btfsc	status,2,c
  1963  000B9A  5D7D               	subwf	sprintf@exp& (0+255),w,b
  1964  000B9C  A0D8               	btfss	status,0,c
  1965  000B9E  D04C               	goto	l2642
  1966  000BA0                     l2626:
  1967                           
  1968                           ; BSR set to: 0
  1969                           ;doprnt.c: 1129: if(integ < 4.294967296){
  1970  000BA0  C073  F001         	movff	sprintf@integ,___ftge@ff1
  1971  000BA4  C074  F002         	movff	sprintf@integ+1,___ftge@ff1+1
  1972  000BA8  C075  F003         	movff	sprintf@integ+2,___ftge@ff1+2
  1973  000BAC  0E70               	movlw	112
  1974  000BAE  6E04               	movwf	___ftge@ff2,c
  1975  000BB0  0E89               	movlw	137
  1976  000BB2  6E05               	movwf	___ftge@ff2+1,c
  1977  000BB4  0E40               	movlw	64
  1978  000BB6  6E06               	movwf	___ftge@ff2+2,c
  1979  000BB8  EC39  F010         	call	___ftge	;wreg free
  1980  000BBC  B0D8               	btfsc	status,0,c
  1981  000BBE  D003               	goto	l2630
  1982                           
  1983                           ;doprnt.c: 1130: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1984  000BC0  0100               	movlb	0	; () banked
  1985  000BC2  0EF7               	movlw	247
  1986  000BC4  D002               	goto	L6
  1987  000BC6                     l2630:
  1988                           
  1989                           ;doprnt.c: 1132: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1990  000BC6  0100               	movlb	0	; () banked
  1991  000BC8  0EF8               	movlw	248
  1992  000BCA                     L6:
  1993  000BCA  0100               	movlb	0	; () banked
  1994  000BCC  277D               	addwf	sprintf@exp& (0+255),f,b
  1995  000BCE  0EFF               	movlw	255
  1996  000BD0  0100               	movlb	0	; () banked
  1997  000BD2  237E               	addwfc	(sprintf@exp+1)& (0+255),f,b
  1998                           
  1999                           ; BSR set to: 0
  2000                           ;doprnt.c: 1133: }
  2001                           ;doprnt.c: 1134: integ = scale(exp);
  2002                           
  2003                           ; BSR set to: 0
  2004  000BD4  0100               	movlb	0	; () banked
  2005  000BD6  517D               	movf	sprintf@exp& (0+255),w,b
  2006  000BD8  ECB9  F008         	call	_scale
  2007  000BDC  C024  F073         	movff	?_scale,sprintf@integ
  2008  000BE0  C025  F074         	movff	?_scale+1,sprintf@integ+1
  2009  000BE4  C026  F075         	movff	?_scale+2,sprintf@integ+2
  2010                           
  2011                           ;doprnt.c: 1135: _val._val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,integ) : _div_to_l
      +                          _(fval,integ));
  2012  000BE8  C07F  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  2013  000BEC  C080  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  2014  000BF0  C081  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  2015  000BF4  C073  F004         	movff	sprintf@integ,__tdiv_to_l_@f2
  2016  000BF8  C074  F005         	movff	sprintf@integ+1,__tdiv_to_l_@f2+1
  2017  000BFC  C075  F006         	movff	sprintf@integ+2,__tdiv_to_l_@f2+2
  2018  000C00  EC2E  F00D         	call	__tdiv_to_l_	;wreg free
  2019  000C04  C001  F063         	movff	?__tdiv_to_l_,_sprintf$754
  2020  000C08  C002  F064         	movff	?__tdiv_to_l_+1,_sprintf$754+1
  2021  000C0C  C003  F065         	movff	?__tdiv_to_l_+2,_sprintf$754+2
  2022  000C10  C004  F066         	movff	?__tdiv_to_l_+3,_sprintf$754+3
  2023  000C14  C063  F078         	movff	_sprintf$754,sprintf@_val
  2024  000C18  C064  F079         	movff	_sprintf$754+1,sprintf@_val+1
  2025  000C1C  C065  F07A         	movff	_sprintf$754+2,sprintf@_val+2
  2026  000C20  C066  F07B         	movff	_sprintf$754+3,sprintf@_val+3
  2027                           
  2028                           ;doprnt.c: 1138: fval = 0.0;
  2029  000C24  0E00               	movlw	0
  2030  000C26  0100               	movlb	0	; () banked
  2031  000C28  6F7F               	movwf	sprintf@fval& (0+255),b
  2032  000C2A  0E00               	movlw	0
  2033  000C2C  0100               	movlb	0	; () banked
  2034  000C2E  6F80               	movwf	(sprintf@fval+1)& (0+255),b
  2035  000C30  0E00               	movlw	0
  2036  000C32  0100               	movlb	0	; () banked
  2037  000C34  6F81               	movwf	(sprintf@fval+2)& (0+255),b
  2038                           
  2039                           ;doprnt.c: 1139: } else {
  2040  000C36  D034               	goto	l2646
  2041  000C38                     l2642:
  2042                           
  2043                           ;doprnt.c: 1140: _val._val = (unsigned long)fval;
  2044  000C38  C07F  F02B         	movff	sprintf@fval,___fttol@f1
  2045  000C3C  C080  F02C         	movff	sprintf@fval+1,___fttol@f1+1
  2046  000C40  C081  F02D         	movff	sprintf@fval+2,___fttol@f1+2
  2047  000C44  EC20  F00E         	call	___fttol	;wreg free
  2048  000C48  C02B  F078         	movff	?___fttol,sprintf@_val
  2049  000C4C  C02C  F079         	movff	?___fttol+1,sprintf@_val+1
  2050  000C50  C02D  F07A         	movff	?___fttol+2,sprintf@_val+2
  2051  000C54  C02E  F07B         	movff	?___fttol+3,sprintf@_val+3
  2052                           
  2053                           ;doprnt.c: 1141: fval -= (double)_val._val;
  2054  000C58  C07F  F03A         	movff	sprintf@fval,___ftsub@f1
  2055  000C5C  C080  F03B         	movff	sprintf@fval+1,___ftsub@f1+1
  2056  000C60  C081  F03C         	movff	sprintf@fval+2,___ftsub@f1+2
  2057  000C64  C078  F009         	movff	sprintf@_val,___lltoft@c
  2058  000C68  C079  F00A         	movff	sprintf@_val+1,___lltoft@c+1
  2059  000C6C  C07A  F00B         	movff	sprintf@_val+2,___lltoft@c+2
  2060  000C70  C07B  F00C         	movff	sprintf@_val+3,___lltoft@c+3
  2061  000C74  ECA7  F011         	call	___lltoft	;wreg free
  2062  000C78  C009  F03D         	movff	?___lltoft,___ftsub@f2
  2063  000C7C  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  2064  000C80  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  2065  000C84  EC3D  F012         	call	___ftsub	;wreg free
  2066  000C88  C03A  F07F         	movff	?___ftsub,sprintf@fval
  2067  000C8C  C03B  F080         	movff	?___ftsub+1,sprintf@fval+1
  2068  000C90  C03C  F081         	movff	?___ftsub+2,sprintf@fval+2
  2069                           
  2070                           ;doprnt.c: 1142: exp = 0;
  2071  000C94  0E00               	movlw	0
  2072  000C96  0100               	movlb	0	; () banked
  2073  000C98  6F7E               	movwf	(sprintf@exp+1)& (0+255),b
  2074  000C9A  0E00               	movlw	0
  2075  000C9C  0100               	movlb	0	; () banked
  2076  000C9E  6F7D               	movwf	sprintf@exp& (0+255),b
  2077  000CA0                     l2646:
  2078                           
  2079                           ; BSR set to: 0
  2080                           ;doprnt.c: 1143: }
  2081                           ;doprnt.c: 1145: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2082  000CA0  0E01               	movlw	1
  2083  000CA2  0100               	movlb	0	; () banked
  2084  000CA4  6F82               	movwf	sprintf@c& (0+255),b
  2085  000CA6                     
  2086                           ; BSR set to: 0
  2087  000CA6  0100               	movlb	0	; () banked
  2088  000CA8  5182               	movf	sprintf@c& (0+255),w,b
  2089  000CAA  0A0A               	xorlw	10
  2090  000CAC  B4D8               	btfsc	status,2,c
  2091  000CAE  D01E               	goto	l2660
  2092                           
  2093                           ; BSR set to: 0
  2094                           ;doprnt.c: 1146: if(_val._val < dpowers[c])
  2095                           
  2096                           ; BSR set to: 0
  2097                           
  2098                           ; BSR set to: 0
  2099  000CB0  0100               	movlb	0	; () banked
  2100  000CB2  5182               	movf	sprintf@c& (0+255),w,b
  2101  000CB4  0D04               	mullw	4
  2102  000CB6  0E01               	movlw	low _dpowers
  2103  000CB8  24F3               	addwf	prodl,w,c
  2104  000CBA  6EF6               	movwf	tblptrl,c
  2105  000CBC  0E08               	movlw	high _dpowers
  2106  000CBE  20F4               	addwfc	prodh,w,c
  2107  000CC0  6EF7               	movwf	tblptrh,c
  2108  000CC2                     	if	0	;There are less than 3 active tblptr bytes
  2109  000CC2                     	endif
  2110  000CC2  0009               	tblrd		*+
  2111  000CC4  50F5               	movf	tablat,w,c
  2112  000CC6  0100               	movlb	0	; () banked
  2113  000CC8  5D78               	subwf	sprintf@_val& (0+255),w,b
  2114  000CCA  0009               	tblrd		*+
  2115  000CCC  50F5               	movf	tablat,w,c
  2116  000CCE  0100               	movlb	0	; () banked
  2117  000CD0  5979               	subwfb	(sprintf@_val+1)& (0+255),w,b
  2118  000CD2  0009               	tblrd		*+
  2119  000CD4  50F5               	movf	tablat,w,c
  2120  000CD6  0100               	movlb	0	; () banked
  2121  000CD8  597A               	subwfb	(sprintf@_val+2)& (0+255),w,b
  2122  000CDA  0009               	tblrd		*+
  2123  000CDC  50F5               	movf	tablat,w,c
  2124  000CDE  0100               	movlb	0	; () banked
  2125  000CE0  597B               	subwfb	(sprintf@_val+3)& (0+255),w,b
  2126  000CE2  A0D8               	btfss	status,0,c
  2127  000CE4  D003               	goto	l2660
  2128                           
  2129                           ; BSR set to: 0
  2130                           
  2131                           ; BSR set to: 0
  2132                           
  2133                           ; BSR set to: 0
  2134                           ;doprnt.c: 1147: break;
  2135  000CE6  0100               	movlb	0	; () banked
  2136  000CE8  2B82               	incf	sprintf@c& (0+255),f,b
  2137  000CEA  D7DD               	goto	L7
  2138  000CEC                     l2660:
  2139                           
  2140                           ; BSR set to: 0
  2141                           ;doprnt.c: 1184: {
  2142                           ;doprnt.c: 1197: if(flag & 0x03)
  2143  000CEC  0E03               	movlw	3
  2144  000CEE  0100               	movlb	0	; () banked
  2145  000CF0  1571               	andwf	sprintf@flag& (0+255),w,b
  2146  000CF2  6E47               	movwf	??_sprintf& (0+255),c
  2147  000CF4  0E00               	movlw	0
  2148  000CF6  0100               	movlb	0	; () banked
  2149  000CF8  1572               	andwf	(sprintf@flag+1)& (0+255),w,b
  2150  000CFA  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2151  000CFC  5048               	movf	??_sprintf+1,w,c
  2152  000CFE  1047               	iorwf	??_sprintf,w,c
  2153  000D00  B4D8               	btfsc	status,2,c
  2154  000D02  D051               	goto	l2674
  2155                           
  2156                           ; BSR set to: 0
  2157                           ;doprnt.c: 1199: ((*sp++ = ('-')));
  2158  000D04  C040  FFD9         	movff	sprintf@sp,fsr2l
  2159  000D08  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2160  000D0C  0E2D               	movlw	45
  2161  000D0E  D048               	goto	L8
  2162  000D10                     l2666:
  2163                           
  2164                           ; BSR set to: 0
  2165                           ;doprnt.c: 1209: {
  2166                           ;doprnt.c: 1210: unsigned long vd = _val._val/dpowers[c];
  2167  000D10  C078  F001         	movff	sprintf@_val,___lldiv@dividend
  2168  000D14  C079  F002         	movff	sprintf@_val+1,___lldiv@dividend+1
  2169  000D18  C07A  F003         	movff	sprintf@_val+2,___lldiv@dividend+2
  2170  000D1C  C07B  F004         	movff	sprintf@_val+3,___lldiv@dividend+3
  2171  000D20  0100               	movlb	0	; () banked
  2172  000D22  5182               	movf	sprintf@c& (0+255),w,b
  2173  000D24  0D04               	mullw	4
  2174  000D26  0E01               	movlw	low _dpowers
  2175  000D28  24F3               	addwf	prodl,w,c
  2176  000D2A  6EF6               	movwf	tblptrl,c
  2177  000D2C  0E08               	movlw	high _dpowers
  2178  000D2E  20F4               	addwfc	prodh,w,c
  2179  000D30  6EF7               	movwf	tblptrh,c
  2180  000D32                     	if	0	;There are less than 3 active tblptr bytes
  2181  000D32                     	endif
  2182  000D32  0009               	tblrd		*+
  2183  000D34  CFF5 F005          	movff	tablat,___lldiv@divisor
  2184  000D38  0009               	tblrd		*+
  2185  000D3A  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2186  000D3E  0009               	tblrd		*+
  2187  000D40  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2188  000D44  000A               	tblrd		*-
  2189  000D46  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2190  000D4A  EC81  F010         	call	___lldiv	;wreg free
  2191  000D4E  C001  F067         	movff	?___lldiv,sprintf@vd
  2192  000D52  C002  F068         	movff	?___lldiv+1,sprintf@vd+1
  2193  000D56  C003  F069         	movff	?___lldiv+2,sprintf@vd+2
  2194  000D5A  C004  F06A         	movff	?___lldiv+3,sprintf@vd+3
  2195                           
  2196                           ;doprnt.c: 1211: vd %= 10;
  2197  000D5E  C067  F00E         	movff	sprintf@vd,___llmod@dividend
  2198  000D62  C068  F00F         	movff	sprintf@vd+1,___llmod@dividend+1
  2199  000D66  C069  F010         	movff	sprintf@vd+2,___llmod@dividend+2
  2200  000D6A  C06A  F011         	movff	sprintf@vd+3,___llmod@dividend+3
  2201  000D6E  0E0A               	movlw	10
  2202  000D70  6E12               	movwf	___llmod@divisor,c
  2203  000D72  0E00               	movlw	0
  2204  000D74  6E13               	movwf	___llmod@divisor+1,c
  2205  000D76  0E00               	movlw	0
  2206  000D78  6E14               	movwf	___llmod@divisor+2,c
  2207  000D7A  0E00               	movlw	0
  2208  000D7C  6E15               	movwf	___llmod@divisor+3,c
  2209  000D7E  EC74  F011         	call	___llmod	;wreg free
  2210  000D82  C00E  F067         	movff	?___llmod,sprintf@vd
  2211  000D86  C00F  F068         	movff	?___llmod+1,sprintf@vd+1
  2212  000D8A  C010  F069         	movff	?___llmod+2,sprintf@vd+2
  2213  000D8E  C011  F06A         	movff	?___llmod+3,sprintf@vd+3
  2214                           
  2215                           ;doprnt.c: 1212: ((*sp++ = ('0' + vd)));
  2216  000D92  0100               	movlb	0	; () banked
  2217  000D94  5167               	movf	sprintf@vd& (0+255),w,b
  2218  000D96  0F30               	addlw	48
  2219  000D98  C040  FFD9         	movff	sprintf@sp,fsr2l
  2220  000D9C  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2221  000DA0                     L8:
  2222  000DA0  6EDF               	movwf	indf2,c
  2223                           
  2224                           ; BSR set to: 0
  2225  000DA2  4A40               	infsnz	sprintf@sp,f,c
  2226  000DA4  2A41               	incf	sprintf@sp+1,f,c
  2227  000DA6                     l2674:
  2228                           
  2229                           ; BSR set to: 0
  2230  000DA6  0100               	movlb	0	; () banked
  2231  000DA8  0782               	decf	sprintf@c& (0+255),f,b
  2232  000DAA  0100               	movlb	0	; () banked
  2233  000DAC  2982               	incf	sprintf@c& (0+255),w,b
  2234  000DAE  B4D8               	btfsc	status,2,c
  2235  000DB0  D00D               	goto	l2682
  2236  000DB2  D7AE               	goto	l2666
  2237  000DB4                     l2676:
  2238                           
  2239                           ; BSR set to: 0
  2240                           ;doprnt.c: 1217: ((*sp++ = ('0')));
  2241  000DB4  C040  FFD9         	movff	sprintf@sp,fsr2l
  2242  000DB8  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2243  000DBC  0E30               	movlw	48
  2244  000DBE  6EDF               	movwf	indf2,c
  2245                           
  2246                           ; BSR set to: 0
  2247  000DC0  4A40               	infsnz	sprintf@sp,f,c
  2248  000DC2  2A41               	incf	sprintf@sp+1,f,c
  2249                           
  2250                           ; BSR set to: 0
  2251                           ;doprnt.c: 1218: exp--;
  2252  000DC4  0100               	movlb	0	; () banked
  2253  000DC6  077D               	decf	sprintf@exp& (0+255),f,b
  2254  000DC8  A0D8               	btfss	status,0,c
  2255  000DCA  077E               	decf	(sprintf@exp+1)& (0+255),f,b
  2256  000DCC                     l2682:
  2257                           
  2258                           ; BSR set to: 0
  2259  000DCC  0100               	movlb	0	; () banked
  2260  000DCE  517E               	movf	(sprintf@exp+1)& (0+255),w,b
  2261  000DD0  0A80               	xorlw	128
  2262  000DD2  6EF3               	movwf	prodl,c
  2263  000DD4  0E80               	movlw	128
  2264  000DD6  5CF3               	subwf	prodl,w,c
  2265  000DD8  0E01               	movlw	1
  2266  000DDA  B4D8               	btfsc	status,2,c
  2267  000DDC  5D7D               	subwf	sprintf@exp& (0+255),w,b
  2268  000DDE  B0D8               	btfsc	status,0,c
  2269  000DE0  D7E9               	goto	l2676
  2270                           
  2271                           ; BSR set to: 0
  2272                           ;doprnt.c: 1219: }
  2273                           ;doprnt.c: 1220: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2274                           
  2275                           ; BSR set to: 0
  2276  000DE2  0100               	movlb	0	; () banked
  2277  000DE4  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  2278  000DE6  0A80               	xorlw	128
  2279  000DE8  0F80               	addlw	-128
  2280  000DEA  0E09               	movlw	9
  2281  000DEC  B4D8               	btfsc	status,2,c
  2282  000DEE  5D76               	subwf	sprintf@prec& (0+255),w,b
  2283  000DF0  A0D8               	btfss	status,0,c
  2284  000DF2  D004               	goto	l232
  2285                           
  2286                           ; BSR set to: 0
  2287                           ;doprnt.c: 1221: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2288  000DF4  0E08               	movlw	8
  2289  000DF6  0100               	movlb	0	; () banked
  2290  000DF8  6F82               	movwf	sprintf@c& (0+255),b
  2291  000DFA  D002               	goto	l2688
  2292  000DFC                     l232:
  2293                           
  2294                           ; BSR set to: 0
  2295                           ;doprnt.c: 1222: else
  2296                           ;doprnt.c: 1223: c = prec;
  2297  000DFC  C076  F082         	movff	sprintf@prec,sprintf@c
  2298  000E00                     l2688:
  2299                           
  2300                           ; BSR set to: 0
  2301                           ;doprnt.c: 1224: prec -= c;
  2302  000E00  0100               	movlb	0	; () banked
  2303  000E02  5182               	movf	sprintf@c& (0+255),w,b
  2304  000E04  0100               	movlb	0	; () banked
  2305  000E06  5F76               	subwf	sprintf@prec& (0+255),f,b
  2306  000E08  0E00               	movlw	0
  2307  000E0A  0100               	movlb	0	; () banked
  2308  000E0C  BF82               	btfsc	sprintf@c& (0+255),7,b
  2309  000E0E  0EFF               	movlw	255
  2310  000E10  0100               	movlb	0	; () banked
  2311  000E12  5B77               	subwfb	(sprintf@prec+1)& (0+255),f,b
  2312                           
  2313                           ; BSR set to: 0
  2314                           ;doprnt.c: 1228: if(c)
  2315  000E14  0100               	movlb	0	; () banked
  2316  000E16  5182               	movf	sprintf@c& (0+255),w,b
  2317  000E18  B4D8               	btfsc	status,2,c
  2318  000E1A  D008               	goto	l2696
  2319                           
  2320                           ; BSR set to: 0
  2321                           ;doprnt.c: 1230: ((*sp++ = ('.')));
  2322  000E1C  C040  FFD9         	movff	sprintf@sp,fsr2l
  2323  000E20  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2324  000E24  0E2E               	movlw	46
  2325  000E26  6EDF               	movwf	indf2,c
  2326                           
  2327                           ; BSR set to: 0
  2328  000E28  4A40               	infsnz	sprintf@sp,f,c
  2329  000E2A  2A41               	incf	sprintf@sp+1,f,c
  2330  000E2C                     l2696:
  2331                           
  2332                           ; BSR set to: 0
  2333                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  2334  000E2C  0100               	movlb	0	; () banked
  2335  000E2E  5182               	movf	sprintf@c& (0+255),w,b
  2336  000E30  ECB9  F008         	call	_scale
  2337  000E34  C024  F060         	movff	?_scale,_sprintf$1281
  2338  000E38  C025  F061         	movff	?_scale+1,_sprintf$1281+1
  2339  000E3C  C026  F062         	movff	?_scale+2,_sprintf$1281+2
  2340                           
  2341                           ;doprnt.c: 1236: _val._val = (long)(fval * scale(c));
  2342  000E40  C07F  F018         	movff	sprintf@fval,___ftmul@f2
  2343  000E44  C080  F019         	movff	sprintf@fval+1,___ftmul@f2+1
  2344  000E48  C081  F01A         	movff	sprintf@fval+2,___ftmul@f2+2
  2345  000E4C  C060  F015         	movff	_sprintf$1281,___ftmul@f1
  2346  000E50  C061  F016         	movff	_sprintf$1281+1,___ftmul@f1+1
  2347  000E54  C062  F017         	movff	_sprintf$1281+2,___ftmul@f1+2
  2348  000E58  ECAE  F00D         	call	___ftmul	;wreg free
  2349  000E5C  C015  F02B         	movff	?___ftmul,___fttol@f1
  2350  000E60  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2351  000E64  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2352  000E68  EC20  F00E         	call	___fttol	;wreg free
  2353  000E6C  C02B  F078         	movff	?___fttol,sprintf@_val
  2354  000E70  C02C  F079         	movff	?___fttol+1,sprintf@_val+1
  2355  000E74  C02D  F07A         	movff	?___fttol+2,sprintf@_val+2
  2356  000E78  C02E  F07B         	movff	?___fttol+3,sprintf@_val+3
  2357                           
  2358                           ;doprnt.c: 1237: while(c--) {
  2359  000E7C  D072               	goto	l2710
  2360  000E7E                     l2700:
  2361                           
  2362                           ;doprnt.c: 1238: unsigned long vd = _val._val/dpowers[c];
  2363  000E7E  C078  F001         	movff	sprintf@_val,___lldiv@dividend
  2364  000E82  C079  F002         	movff	sprintf@_val+1,___lldiv@dividend+1
  2365  000E86  C07A  F003         	movff	sprintf@_val+2,___lldiv@dividend+2
  2366  000E8A  C07B  F004         	movff	sprintf@_val+3,___lldiv@dividend+3
  2367  000E8E  0100               	movlb	0	; () banked
  2368  000E90  5182               	movf	sprintf@c& (0+255),w,b
  2369  000E92  0D04               	mullw	4
  2370  000E94  0E01               	movlw	low _dpowers
  2371  000E96  24F3               	addwf	prodl,w,c
  2372  000E98  6EF6               	movwf	tblptrl,c
  2373  000E9A  0E08               	movlw	high _dpowers
  2374  000E9C  20F4               	addwfc	prodh,w,c
  2375  000E9E  6EF7               	movwf	tblptrh,c
  2376  000EA0                     	if	0	;There are less than 3 active tblptr bytes
  2377  000EA0                     	endif
  2378  000EA0  0009               	tblrd		*+
  2379  000EA2  CFF5 F005          	movff	tablat,___lldiv@divisor
  2380  000EA6  0009               	tblrd		*+
  2381  000EA8  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2382  000EAC  0009               	tblrd		*+
  2383  000EAE  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2384  000EB2  000A               	tblrd		*-
  2385  000EB4  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2386  000EB8  EC81  F010         	call	___lldiv	;wreg free
  2387  000EBC  C001  F06B         	movff	?___lldiv,sprintf@vd_756
  2388  000EC0  C002  F06C         	movff	?___lldiv+1,sprintf@vd_756+1
  2389  000EC4  C003  F06D         	movff	?___lldiv+2,sprintf@vd_756+2
  2390  000EC8  C004  F06E         	movff	?___lldiv+3,sprintf@vd_756+3
  2391                           
  2392                           ;doprnt.c: 1239: vd %= 10;
  2393  000ECC  C06B  F00E         	movff	sprintf@vd_756,___llmod@dividend
  2394  000ED0  C06C  F00F         	movff	sprintf@vd_756+1,___llmod@dividend+1
  2395  000ED4  C06D  F010         	movff	sprintf@vd_756+2,___llmod@dividend+2
  2396  000ED8  C06E  F011         	movff	sprintf@vd_756+3,___llmod@dividend+3
  2397  000EDC  0E0A               	movlw	10
  2398  000EDE  6E12               	movwf	___llmod@divisor,c
  2399  000EE0  0E00               	movlw	0
  2400  000EE2  6E13               	movwf	___llmod@divisor+1,c
  2401  000EE4  0E00               	movlw	0
  2402  000EE6  6E14               	movwf	___llmod@divisor+2,c
  2403  000EE8  0E00               	movlw	0
  2404  000EEA  6E15               	movwf	___llmod@divisor+3,c
  2405  000EEC  EC74  F011         	call	___llmod	;wreg free
  2406  000EF0  C00E  F06B         	movff	?___llmod,sprintf@vd_756
  2407  000EF4  C00F  F06C         	movff	?___llmod+1,sprintf@vd_756+1
  2408  000EF8  C010  F06D         	movff	?___llmod+2,sprintf@vd_756+2
  2409  000EFC  C011  F06E         	movff	?___llmod+3,sprintf@vd_756+3
  2410                           
  2411                           ;doprnt.c: 1240: ((*sp++ = ('0' + vd)));
  2412  000F00  0100               	movlb	0	; () banked
  2413  000F02  516B               	movf	sprintf@vd_756& (0+255),w,b
  2414  000F04  0F30               	addlw	48
  2415  000F06  C040  FFD9         	movff	sprintf@sp,fsr2l
  2416  000F0A  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2417  000F0E  6EDF               	movwf	indf2,c
  2418                           
  2419                           ; BSR set to: 0
  2420  000F10  4A40               	infsnz	sprintf@sp,f,c
  2421  000F12  2A41               	incf	sprintf@sp+1,f,c
  2422                           
  2423                           ; BSR set to: 0
  2424                           ;doprnt.c: 1241: _val._val %= dpowers[c];
  2425  000F14  C078  F00E         	movff	sprintf@_val,___llmod@dividend
  2426  000F18  C079  F00F         	movff	sprintf@_val+1,___llmod@dividend+1
  2427  000F1C  C07A  F010         	movff	sprintf@_val+2,___llmod@dividend+2
  2428  000F20  C07B  F011         	movff	sprintf@_val+3,___llmod@dividend+3
  2429  000F24  0100               	movlb	0	; () banked
  2430  000F26  5182               	movf	sprintf@c& (0+255),w,b
  2431  000F28  0D04               	mullw	4
  2432  000F2A  0E01               	movlw	low _dpowers
  2433  000F2C  24F3               	addwf	prodl,w,c
  2434  000F2E  6EF6               	movwf	tblptrl,c
  2435  000F30  0E08               	movlw	high _dpowers
  2436  000F32  20F4               	addwfc	prodh,w,c
  2437  000F34  6EF7               	movwf	tblptrh,c
  2438  000F36                     	if	0	;There are less than 3 active tblptr bytes
  2439  000F36                     	endif
  2440  000F36  0009               	tblrd		*+
  2441  000F38  CFF5 F012          	movff	tablat,___llmod@divisor
  2442  000F3C  0009               	tblrd		*+
  2443  000F3E  CFF5 F013          	movff	tablat,___llmod@divisor+1
  2444  000F42  0009               	tblrd		*+
  2445  000F44  CFF5 F014          	movff	tablat,___llmod@divisor+2
  2446  000F48  000A               	tblrd		*-
  2447  000F4A  CFF5 F015          	movff	tablat,___llmod@divisor+3
  2448  000F4E  EC74  F011         	call	___llmod	;wreg free
  2449  000F52  C00E  F078         	movff	?___llmod,sprintf@_val
  2450  000F56  C00F  F079         	movff	?___llmod+1,sprintf@_val+1
  2451  000F5A  C010  F07A         	movff	?___llmod+2,sprintf@_val+2
  2452  000F5E  C011  F07B         	movff	?___llmod+3,sprintf@_val+3
  2453  000F62                     l2710:
  2454  000F62  0100               	movlb	0	; () banked
  2455  000F64  0782               	decf	sprintf@c& (0+255),f,b
  2456  000F66  0100               	movlb	0	; () banked
  2457  000F68  2982               	incf	sprintf@c& (0+255),w,b
  2458  000F6A  B4D8               	btfsc	status,2,c
  2459  000F6C  D00D               	goto	l2718
  2460  000F6E  D787               	goto	l2700
  2461  000F70                     l2712:
  2462                           
  2463                           ; BSR set to: 0
  2464                           ;doprnt.c: 1245: ((*sp++ = ('0')));
  2465  000F70  C040  FFD9         	movff	sprintf@sp,fsr2l
  2466  000F74  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2467  000F78  0E30               	movlw	48
  2468  000F7A  6EDF               	movwf	indf2,c
  2469                           
  2470                           ; BSR set to: 0
  2471  000F7C  4A40               	infsnz	sprintf@sp,f,c
  2472  000F7E  2A41               	incf	sprintf@sp+1,f,c
  2473                           
  2474                           ; BSR set to: 0
  2475                           ;doprnt.c: 1246: prec--;
  2476  000F80  0100               	movlb	0	; () banked
  2477  000F82  0776               	decf	sprintf@prec& (0+255),f,b
  2478  000F84  A0D8               	btfss	status,0,c
  2479  000F86  0777               	decf	(sprintf@prec+1)& (0+255),f,b
  2480  000F88                     l2718:
  2481                           
  2482                           ; BSR set to: 0
  2483  000F88  0100               	movlb	0	; () banked
  2484  000F8A  5177               	movf	(sprintf@prec+1)& (0+255),w,b
  2485  000F8C  1176               	iorwf	sprintf@prec& (0+255),w,b
  2486  000F8E  B4D8               	btfsc	status,2,c
  2487  000F90  D0DB               	goto	l2760
  2488  000F92  D7EE               	goto	l2712
  2489  000F94                     l2720:
  2490                           
  2491                           ; BSR set to: 0
  2492                           ;doprnt.c: 1255: }
  2493                           ;doprnt.c: 1262: {
  2494                           ;doprnt.c: 1268: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2495  000F94  C06F  FFD9         	movff	sprintf@ap,fsr2l
  2496  000F98  C070  FFDA         	movff	sprintf@ap+1,fsr2h
  2497  000F9C  0100               	movlb	0	; () banked
  2498  000F9E  CFDE F078          	movff	postinc2,sprintf@_val
  2499  000FA2  0100               	movlb	0	; () banked
  2500  000FA4  CFDD F079          	movff	postdec2,sprintf@_val+1
  2501  000FA8  0100               	movlb	0	; () banked
  2502  000FAA  0E00               	movlw	0
  2503  000FAC  0100               	movlb	0	; () banked
  2504  000FAE  BF79               	btfsc	(sprintf@_val+1)& (0+255),7,b
  2505  000FB0  0EFF               	movlw	-1
  2506  000FB2  0100               	movlb	0	; () banked
  2507  000FB4  6F7A               	movwf	(sprintf@_val+2)& (0+255),b
  2508  000FB6  0100               	movlb	0	; () banked
  2509  000FB8  6F7B               	movwf	(sprintf@_val+3)& (0+255),b
  2510                           
  2511                           ; BSR set to: 0
  2512  000FBA  0E02               	movlw	2
  2513  000FBC  0100               	movlb	0	; () banked
  2514  000FBE  276F               	addwf	sprintf@ap& (0+255),f,b
  2515  000FC0  0E00               	movlw	0
  2516  000FC2  0100               	movlb	0	; () banked
  2517  000FC4  2370               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2518                           
  2519                           ; BSR set to: 0
  2520                           ;doprnt.c: 1270: if((long)_val._val < 0) {
  2521  000FC6  0100               	movlb	0	; () banked
  2522  000FC8  517B               	movf	(sprintf@_val+3)& (0+255),w,b
  2523  000FCA  0A80               	xorlw	128
  2524  000FCC  0F80               	addlw	128
  2525  000FCE  E10B               	bnz	u2825
  2526  000FD0  0E00               	movlw	0
  2527  000FD2  0100               	movlb	0	; () banked
  2528  000FD4  5D7A               	subwf	(sprintf@_val+2)& (0+255),w,b
  2529  000FD6  E107               	bnz	u2825
  2530  000FD8  0E00               	movlw	0
  2531  000FDA  0100               	movlb	0	; () banked
  2532  000FDC  5D79               	subwf	(sprintf@_val+1)& (0+255),w,b
  2533  000FDE  E103               	bnz	u2825
  2534  000FE0  0E00               	movlw	0
  2535  000FE2  0100               	movlb	0	; () banked
  2536  000FE4  5D78               	subwf	sprintf@_val& (0+255),w,b
  2537  000FE6                     u2825:
  2538  000FE6  B0D8               	btfsc	status,0,c
  2539  000FE8  D012               	goto	l2730
  2540                           
  2541                           ; BSR set to: 0
  2542                           ;doprnt.c: 1271: flag |= 0x03;
  2543  000FEA  0E03               	movlw	3
  2544  000FEC  0100               	movlb	0	; () banked
  2545  000FEE  1371               	iorwf	sprintf@flag& (0+255),f,b
  2546                           
  2547                           ; BSR set to: 0
  2548                           ;doprnt.c: 1272: _val._val = -_val._val;
  2549  000FF0  0100               	movlb	0	; () banked
  2550  000FF2  1F7B               	comf	(sprintf@_val+3)& (0+255),f,b
  2551  000FF4  0100               	movlb	0	; () banked
  2552  000FF6  1F7A               	comf	(sprintf@_val+2)& (0+255),f,b
  2553  000FF8  0100               	movlb	0	; () banked
  2554  000FFA  1F79               	comf	(sprintf@_val+1)& (0+255),f,b
  2555  000FFC  0100               	movlb	0	; () banked
  2556  000FFE  6D78               	negf	sprintf@_val& (0+255),b
  2557  001000  0E00               	movlw	0
  2558  001002  0100               	movlb	0	; () banked
  2559  001004  2379               	addwfc	(sprintf@_val+1)& (0+255),f,b
  2560  001006  0100               	movlb	0	; () banked
  2561  001008  237A               	addwfc	(sprintf@_val+2)& (0+255),f,b
  2562  00100A  0100               	movlb	0	; () banked
  2563  00100C  237B               	addwfc	(sprintf@_val+3)& (0+255),f,b
  2564  00100E                     l2730:
  2565                           
  2566                           ; BSR set to: 0
  2567                           ;doprnt.c: 1273: }
  2568                           ;doprnt.c: 1275: }
  2569                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2570  00100E  0E01               	movlw	1
  2571  001010  0100               	movlb	0	; () banked
  2572  001012  6F82               	movwf	sprintf@c& (0+255),b
  2573  001014                     
  2574                           ; BSR set to: 0
  2575  001014  0100               	movlb	0	; () banked
  2576  001016  5182               	movf	sprintf@c& (0+255),w,b
  2577  001018  0A0A               	xorlw	10
  2578  00101A  B4D8               	btfsc	status,2,c
  2579  00101C  D01E               	goto	l2744
  2580                           
  2581                           ; BSR set to: 0
  2582                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  2583                           
  2584                           ; BSR set to: 0
  2585                           
  2586                           ; BSR set to: 0
  2587  00101E  0100               	movlb	0	; () banked
  2588  001020  5182               	movf	sprintf@c& (0+255),w,b
  2589  001022  0D04               	mullw	4
  2590  001024  0E01               	movlw	low _dpowers
  2591  001026  24F3               	addwf	prodl,w,c
  2592  001028  6EF6               	movwf	tblptrl,c
  2593  00102A  0E08               	movlw	high _dpowers
  2594  00102C  20F4               	addwfc	prodh,w,c
  2595  00102E  6EF7               	movwf	tblptrh,c
  2596  001030                     	if	0	;There are less than 3 active tblptr bytes
  2597  001030                     	endif
  2598  001030  0009               	tblrd		*+
  2599  001032  50F5               	movf	tablat,w,c
  2600  001034  0100               	movlb	0	; () banked
  2601  001036  5D78               	subwf	sprintf@_val& (0+255),w,b
  2602  001038  0009               	tblrd		*+
  2603  00103A  50F5               	movf	tablat,w,c
  2604  00103C  0100               	movlb	0	; () banked
  2605  00103E  5979               	subwfb	(sprintf@_val+1)& (0+255),w,b
  2606  001040  0009               	tblrd		*+
  2607  001042  50F5               	movf	tablat,w,c
  2608  001044  0100               	movlb	0	; () banked
  2609  001046  597A               	subwfb	(sprintf@_val+2)& (0+255),w,b
  2610  001048  0009               	tblrd		*+
  2611  00104A  50F5               	movf	tablat,w,c
  2612  00104C  0100               	movlb	0	; () banked
  2613  00104E  597B               	subwfb	(sprintf@_val+3)& (0+255),w,b
  2614  001050  A0D8               	btfss	status,0,c
  2615  001052  D003               	goto	l2744
  2616                           
  2617                           ; BSR set to: 0
  2618                           
  2619                           ; BSR set to: 0
  2620                           
  2621                           ; BSR set to: 0
  2622                           ;doprnt.c: 1316: break;
  2623  001054  0100               	movlb	0	; () banked
  2624  001056  2B82               	incf	sprintf@c& (0+255),f,b
  2625  001058  D7DD               	goto	L9
  2626  00105A                     l2744:
  2627                           
  2628                           ; BSR set to: 0
  2629                           ;doprnt.c: 1431: {
  2630                           ;doprnt.c: 1447: if(flag & 0x03)
  2631  00105A  0E03               	movlw	3
  2632  00105C  0100               	movlb	0	; () banked
  2633  00105E  1571               	andwf	sprintf@flag& (0+255),w,b
  2634  001060  6E47               	movwf	??_sprintf& (0+255),c
  2635  001062  0E00               	movlw	0
  2636  001064  0100               	movlb	0	; () banked
  2637  001066  1572               	andwf	(sprintf@flag+1)& (0+255),w,b
  2638  001068  6E48               	movwf	(??_sprintf+1)& (0+255),c
  2639  00106A  5048               	movf	??_sprintf+1,w,c
  2640  00106C  1047               	iorwf	??_sprintf,w,c
  2641  00106E  B4D8               	btfsc	status,2,c
  2642  001070  D008               	goto	l2750
  2643                           
  2644                           ; BSR set to: 0
  2645                           ;doprnt.c: 1448: ((*sp++ = ('-')));
  2646  001072  C040  FFD9         	movff	sprintf@sp,fsr2l
  2647  001076  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2648  00107A  0E2D               	movlw	45
  2649  00107C  6EDF               	movwf	indf2,c
  2650                           
  2651                           ; BSR set to: 0
  2652  00107E  4A40               	infsnz	sprintf@sp,f,c
  2653  001080  2A41               	incf	sprintf@sp+1,f,c
  2654  001082                     l2750:
  2655                           
  2656                           ; BSR set to: 0
  2657                           ;doprnt.c: 1478: }
  2658                           ;doprnt.c: 1481: prec = c;
  2659  001082  0100               	movlb	0	; () banked
  2660  001084  5182               	movf	sprintf@c& (0+255),w,b
  2661  001086  0100               	movlb	0	; () banked
  2662  001088  6F76               	movwf	sprintf@prec& (0+255),b
  2663  00108A  0100               	movlb	0	; () banked
  2664  00108C  6B77               	clrf	(sprintf@prec+1)& (0+255),b
  2665  00108E  0100               	movlb	0	; () banked
  2666  001090  BF76               	btfsc	sprintf@prec& (0+255),7,b
  2667  001092  0777               	decf	(sprintf@prec+1)& (0+255),f,b
  2668                           
  2669                           ;doprnt.c: 1483: while(prec--) {
  2670  001094  D04F               	goto	l2758
  2671  001096                     l2752:
  2672                           
  2673                           ; BSR set to: 0
  2674                           ;doprnt.c: 1487: {
  2675                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  2676  001096  0100               	movlb	0	; () banked
  2677  001098  C076  F047         	movff	sprintf@prec,??_sprintf
  2678  00109C  0100               	movlb	0	; () banked
  2679  00109E  C077  F048         	movff	sprintf@prec+1,??_sprintf+1
  2680  0010A2  90D8               	bcf	status,0,c
  2681  0010A4  3647               	rlcf	??_sprintf,f,c
  2682  0010A6  3648               	rlcf	??_sprintf+1,f,c
  2683  0010A8  90D8               	bcf	status,0,c
  2684  0010AA  3647               	rlcf	??_sprintf,f,c
  2685  0010AC  3648               	rlcf	??_sprintf+1,f,c
  2686  0010AE  0E01               	movlw	low _dpowers
  2687  0010B0  2447               	addwf	??_sprintf,w,c
  2688  0010B2  6EF6               	movwf	tblptrl,c
  2689  0010B4  0E08               	movlw	high _dpowers
  2690  0010B6  2048               	addwfc	??_sprintf+1,w,c
  2691  0010B8  6EF7               	movwf	tblptrh,c
  2692  0010BA                     	if	0	;There are less than 3 active tblptr bytes
  2693  0010BA                     	endif
  2694  0010BA  0009               	tblrd		*+
  2695  0010BC  CFF5 F005          	movff	tablat,___lldiv@divisor
  2696  0010C0  0009               	tblrd		*+
  2697  0010C2  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2698  0010C6  0009               	tblrd		*+
  2699  0010C8  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2700  0010CC  000A               	tblrd		*-
  2701  0010CE  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2702  0010D2  C078  F001         	movff	sprintf@_val,___lldiv@dividend
  2703  0010D6  C079  F002         	movff	sprintf@_val+1,___lldiv@dividend+1
  2704  0010DA  C07A  F003         	movff	sprintf@_val+2,___lldiv@dividend+2
  2705  0010DE  C07B  F004         	movff	sprintf@_val+3,___lldiv@dividend+3
  2706  0010E2  EC81  F010         	call	___lldiv	;wreg free
  2707  0010E6  C001  F00E         	movff	?___lldiv,___llmod@dividend
  2708  0010EA  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  2709  0010EE  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  2710  0010F2  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  2711  0010F6  0E0A               	movlw	10
  2712  0010F8  6E12               	movwf	___llmod@divisor,c
  2713  0010FA  0E00               	movlw	0
  2714  0010FC  6E13               	movwf	___llmod@divisor+1,c
  2715  0010FE  0E00               	movlw	0
  2716  001100  6E14               	movwf	___llmod@divisor+2,c
  2717  001102  0E00               	movlw	0
  2718  001104  6E15               	movwf	___llmod@divisor+3,c
  2719  001106  EC74  F011         	call	___llmod	;wreg free
  2720  00110A  C00E  F049         	movff	?___llmod,??_sprintf+2
  2721  00110E  C00F  F04A         	movff	?___llmod+1,??_sprintf+3
  2722  001112  C010  F04B         	movff	?___llmod+2,??_sprintf+4
  2723  001116  C011  F04C         	movff	?___llmod+3,??_sprintf+5
  2724  00111A  5049               	movf	??_sprintf+2,w,c
  2725  00111C  0F30               	addlw	48
  2726  00111E  0100               	movlb	0	; () banked
  2727  001120  6F82               	movwf	sprintf@c& (0+255),b
  2728                           
  2729                           ; BSR set to: 0
  2730                           ;doprnt.c: 1532: }
  2731                           ;doprnt.c: 1533: ((*sp++ = (c)));
  2732  001122  C040  FFD9         	movff	sprintf@sp,fsr2l
  2733  001126  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2734  00112A  0100               	movlb	0	; () banked
  2735  00112C  C082  FFDF         	movff	sprintf@c,indf2
  2736                           
  2737                           ; BSR set to: 0
  2738  001130  4A40               	infsnz	sprintf@sp,f,c
  2739  001132  2A41               	incf	sprintf@sp+1,f,c
  2740  001134                     l2758:
  2741                           
  2742                           ; BSR set to: 0
  2743  001134  0100               	movlb	0	; () banked
  2744  001136  0776               	decf	sprintf@prec& (0+255),f,b
  2745  001138  A0D8               	btfss	status,0,c
  2746  00113A  0777               	decf	(sprintf@prec+1)& (0+255),f,b
  2747  00113C  0100               	movlb	0	; () banked
  2748  00113E  2976               	incf	sprintf@prec& (0+255),w,b
  2749  001140  B4D8               	btfsc	status,2,c
  2750  001142  2977               	incf	(sprintf@prec+1)& (0+255),w,b
  2751  001144  A4D8               	btfss	status,2,c
  2752  001146  D7A7               	goto	l2752
  2753  001148                     l2760:
  2754                           
  2755                           ; BSR set to: 0
  2756  001148  C042  FFF6         	movff	sprintf@f,tblptrl
  2757  00114C  C043  FFF7         	movff	sprintf@f+1,tblptrh
  2758  001150  4A42               	infsnz	sprintf@f,f,c
  2759  001152  2A43               	incf	sprintf@f+1,f,c
  2760  001154                     	if	0	;tblptru may be non-zero
  2761  001154                     	endif
  2762  001154                     	if	0	;tblptru may be non-zero
  2763  001154                     	endif
  2764  001154  0008               	tblrd		*
  2765  001156  0100               	movlb	0	; () banked
  2766  001158  CFF5 F082          	movff	tablat,sprintf@c
  2767  00115C  0100               	movlb	0	; () banked
  2768  00115E  6782               	tstfsz	sprintf@c& (0+255),b
  2769  001160  EF63  F004         	goto	l2558
  2770  001164                     l2762:
  2771                           
  2772                           ; BSR set to: 0
  2773                           ;doprnt.c: 1547: *sp = 0;
  2774  001164  C040  FFD9         	movff	sprintf@sp,fsr2l
  2775  001168  C041  FFDA         	movff	sprintf@sp+1,fsr2h
  2776  00116C  0E00               	movlw	0
  2777  00116E  6EDF               	movwf	indf2,c
  2778                           
  2779                           ; BSR set to: 0
  2780                           
  2781                           ; BSR set to: 0
  2782                           ;doprnt.c: 1549: return 0;
  2783                           ;	Return value of _sprintf is never used
  2784  001170  0012               	return	
  2785  001172                     __end_of_sprintf:
  2786                           	opt stack 0
  2787                           tblptru	equ	0xFF8
  2788                           tblptrh	equ	0xFF7
  2789                           tblptrl	equ	0xFF6
  2790                           tablat	equ	0xFF5
  2791                           prodh	equ	0xFF4
  2792                           prodl	equ	0xFF3
  2793                           intcon	equ	0xFF2
  2794                           wreg	equ	0xFE8
  2795                           indf2	equ	0xFDF
  2796                           postinc2	equ	0xFDE
  2797                           postdec2	equ	0xFDD
  2798                           fsr2h	equ	0xFDA
  2799                           fsr2l	equ	0xFD9
  2800                           status	equ	0xFD8
  2801                           
  2802 ;; *************** function _scale *****************
  2803 ;; Defined at:
  2804 ;;		line 425 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  2805 ;; Parameters:    Size  Location     Type
  2806 ;;  scl             1    wreg     char 
  2807 ;; Auto vars:     Size  Location     Type
  2808 ;;  scl             1   41[COMRAM] char 
  2809 ;; Return value:  Size  Location     Type
  2810 ;;                  3   35[COMRAM] char 
  2811 ;; Registers used:
  2812 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2813 ;; Tracked objects:
  2814 ;;		On entry : 0/0
  2815 ;;		On exit  : 0/0
  2816 ;;		Unchanged: 0/0
  2817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2818 ;;      Params:         3       0       0       0       0       0       0       0       0
  2819 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2820 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2821 ;;      Totals:         7       0       0       0       0       0       0       0       0
  2822 ;;Total ram usage:        7 bytes
  2823 ;; Hardware stack levels used:    1
  2824 ;; Hardware stack levels required when called:    2
  2825 ;; This function calls:
  2826 ;;		___awdiv
  2827 ;;		___awmod
  2828 ;;		___ftmul
  2829 ;;		___wmul
  2830 ;; This function is called by:
  2831 ;;		_sprintf
  2832 ;; This function uses a non-reentrant model
  2833 ;;
  2834                           
  2835                           	psect	text7
  2836  001172                     __ptext7:
  2837                           	opt stack 0
  2838  001172                     _scale:
  2839                           	opt stack 25
  2840                           
  2841                           ; BSR set to: 0
  2842                           ;incstack = 0
  2843                           ;scale@scl stored from wreg
  2844  001172  6E2A               	movwf	scale@scl,c
  2845                           
  2846                           ;doprnt.c: 428: if(scl < 0) {
  2847  001174  AE2A               	btfss	scale@scl,7,c
  2848  001176  D0EA               	goto	l2286
  2849                           
  2850                           ;doprnt.c: 429: scl = -scl;
  2851  001178  6C2A               	negf	scale@scl,c
  2852                           
  2853                           ;doprnt.c: 430: if(scl>=110)
  2854  00117A  502A               	movf	scale@scl,w,c
  2855  00117C  0A80               	xorlw	128
  2856  00117E  0F12               	addlw	-238
  2857  001180  A0D8               	btfss	status,0,c
  2858  001182  D08B               	goto	l2276
  2859                           
  2860                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2861  001184  0E00               	movlw	0
  2862  001186  6E12               	movwf	___wmul@multiplicand+1,c
  2863  001188  0E03               	movlw	3
  2864  00118A  6E11               	movwf	___wmul@multiplicand,c
  2865  00118C  0E00               	movlw	0
  2866  00118E  6E0A               	movwf	___awdiv@divisor+1,c
  2867  001190  0E0A               	movlw	10
  2868  001192  6E09               	movwf	___awdiv@divisor,c
  2869  001194  0E00               	movlw	0
  2870  001196  6E04               	movwf	___awmod@divisor+1,c
  2871  001198  0E64               	movlw	100
  2872  00119A  6E03               	movwf	___awmod@divisor,c
  2873  00119C  502A               	movf	scale@scl,w,c
  2874  00119E  6E01               	movwf	___awmod@dividend,c
  2875  0011A0  6A02               	clrf	___awmod@dividend+1,c
  2876  0011A2  BE01               	btfsc	___awmod@dividend,7,c
  2877  0011A4  0602               	decf	___awmod@dividend+1,f,c
  2878  0011A6  ECF1  F00F         	call	___awmod	;wreg free
  2879  0011AA  C001  F007         	movff	?___awmod,___awdiv@dividend
  2880  0011AE  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2881  0011B2  EC9F  F00F         	call	___awdiv	;wreg free
  2882  0011B6  0E09               	movlw	9
  2883  0011B8  2407               	addwf	?___awdiv,w,c
  2884  0011BA  6E0F               	movwf	___wmul@multiplier,c
  2885  0011BC  0E00               	movlw	0
  2886  0011BE  2008               	addwfc	?___awdiv+1,w,c
  2887  0011C0  6E10               	movwf	___wmul@multiplier+1,c
  2888  0011C2  EC9D  F012         	call	___wmul	;wreg free
  2889  0011C6  0E29               	movlw	low __npowers_
  2890  0011C8  240F               	addwf	?___wmul,w,c
  2891  0011CA  6EF6               	movwf	tblptrl,c
  2892  0011CC  0E08               	movlw	high __npowers_
  2893  0011CE  2010               	addwfc	?___wmul+1,w,c
  2894  0011D0  6EF7               	movwf	tblptrh,c
  2895  0011D2                     	if	0	;There are less than 3 active tblptr bytes
  2896  0011D2                     	endif
  2897  0011D2  0009               	tblrd		*+
  2898  0011D4  CFF5 F018          	movff	tablat,___ftmul@f2
  2899  0011D8  0009               	tblrd		*+
  2900  0011DA  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2901  0011DE  000A               	tblrd		*-
  2902  0011E0  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2903  0011E4  0E00               	movlw	0
  2904  0011E6  6E0A               	movwf	___awdiv@divisor+1,c
  2905  0011E8  0E64               	movlw	100
  2906  0011EA  6E09               	movwf	___awdiv@divisor,c
  2907  0011EC  502A               	movf	scale@scl,w,c
  2908  0011EE  6E07               	movwf	___awdiv@dividend,c
  2909  0011F0  6A08               	clrf	___awdiv@dividend+1,c
  2910  0011F2  BE07               	btfsc	___awdiv@dividend,7,c
  2911  0011F4  0608               	decf	___awdiv@dividend+1,f,c
  2912  0011F6  EC9F  F00F         	call	___awdiv	;wreg free
  2913  0011FA  0E12               	movlw	18
  2914  0011FC  2407               	addwf	?___awdiv,w,c
  2915  0011FE  6E0F               	movwf	___wmul@multiplier,c
  2916  001200  0E00               	movlw	0
  2917  001202  2008               	addwfc	?___awdiv+1,w,c
  2918  001204  6E10               	movwf	___wmul@multiplier+1,c
  2919  001206  0E00               	movlw	0
  2920  001208  6E12               	movwf	___wmul@multiplicand+1,c
  2921  00120A  0E03               	movlw	3
  2922  00120C  6E11               	movwf	___wmul@multiplicand,c
  2923  00120E  EC9D  F012         	call	___wmul	;wreg free
  2924  001212  0E29               	movlw	low __npowers_
  2925  001214  240F               	addwf	?___wmul,w,c
  2926  001216  6EF6               	movwf	tblptrl,c
  2927  001218  0E08               	movlw	high __npowers_
  2928  00121A  2010               	addwfc	?___wmul+1,w,c
  2929  00121C  6EF7               	movwf	tblptrh,c
  2930  00121E                     	if	0	;There are less than 3 active tblptr bytes
  2931  00121E                     	endif
  2932  00121E  0009               	tblrd		*+
  2933  001220  CFF5 F015          	movff	tablat,___ftmul@f1
  2934  001224  0009               	tblrd		*+
  2935  001226  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2936  00122A  000A               	tblrd		*-
  2937  00122C  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2938  001230  ECAE  F00D         	call	___ftmul	;wreg free
  2939  001234  C015  F027         	movff	?___ftmul,_scale$1280
  2940  001238  C016  F028         	movff	?___ftmul+1,_scale$1280+1
  2941  00123C  C017  F029         	movff	?___ftmul+2,_scale$1280+2
  2942                           
  2943                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2944  001240  C027  F015         	movff	_scale$1280,___ftmul@f1
  2945  001244  C028  F016         	movff	_scale$1280+1,___ftmul@f1+1
  2946  001248  C029  F017         	movff	_scale$1280+2,___ftmul@f1+2
  2947  00124C  0E00               	movlw	0
  2948  00124E  6E12               	movwf	___wmul@multiplicand+1,c
  2949  001250  0E03               	movlw	3
  2950  001252  6E11               	movwf	___wmul@multiplicand,c
  2951  001254  0E00               	movlw	0
  2952  001256  6E04               	movwf	___awmod@divisor+1,c
  2953  001258  0E0A               	movlw	10
  2954  00125A  6E03               	movwf	___awmod@divisor,c
  2955  00125C  502A               	movf	scale@scl,w,c
  2956  00125E  6E01               	movwf	___awmod@dividend,c
  2957  001260  6A02               	clrf	___awmod@dividend+1,c
  2958  001262  BE01               	btfsc	___awmod@dividend,7,c
  2959  001264  0602               	decf	___awmod@dividend+1,f,c
  2960  001266  ECF1  F00F         	call	___awmod	;wreg free
  2961  00126A  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2962  00126E  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2963  001272  EC9D  F012         	call	___wmul	;wreg free
  2964  001276  0E29               	movlw	low __npowers_
  2965  001278  240F               	addwf	?___wmul,w,c
  2966  00127A  6EF6               	movwf	tblptrl,c
  2967  00127C  0E08               	movlw	high __npowers_
  2968  00127E  2010               	addwfc	?___wmul+1,w,c
  2969  001280  6EF7               	movwf	tblptrh,c
  2970  001282                     	if	0	;There are less than 3 active tblptr bytes
  2971  001282                     	endif
  2972  001282  0009               	tblrd		*+
  2973  001284  CFF5 F018          	movff	tablat,___ftmul@f2
  2974  001288  0009               	tblrd		*+
  2975  00128A  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2976  00128E  000A               	tblrd		*-
  2977  001290  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2978  001294  ECAE  F00D         	call	___ftmul	;wreg free
  2979  001298  D13A               	goto	L13
  2980  00129A                     l2276:
  2981                           
  2982                           ;doprnt.c: 432: else if(scl > 10)
  2983  00129A  502A               	movf	scale@scl,w,c
  2984  00129C  0A80               	xorlw	128
  2985  00129E  0F75               	addlw	-139
  2986  0012A0  A0D8               	btfss	status,0,c
  2987  0012A2  D04D               	goto	l2282
  2988                           
  2989                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2990  0012A4  0E00               	movlw	0
  2991  0012A6  6E0A               	movwf	___awdiv@divisor+1,c
  2992  0012A8  0E0A               	movlw	10
  2993  0012AA  6E09               	movwf	___awdiv@divisor,c
  2994  0012AC  502A               	movf	scale@scl,w,c
  2995  0012AE  6E07               	movwf	___awdiv@dividend,c
  2996  0012B0  6A08               	clrf	___awdiv@dividend+1,c
  2997  0012B2  BE07               	btfsc	___awdiv@dividend,7,c
  2998  0012B4  0608               	decf	___awdiv@dividend+1,f,c
  2999  0012B6  EC9F  F00F         	call	___awdiv	;wreg free
  3000  0012BA  0E09               	movlw	9
  3001  0012BC  2407               	addwf	?___awdiv,w,c
  3002  0012BE  6E0F               	movwf	___wmul@multiplier,c
  3003  0012C0  0E00               	movlw	0
  3004  0012C2  2008               	addwfc	?___awdiv+1,w,c
  3005  0012C4  6E10               	movwf	___wmul@multiplier+1,c
  3006  0012C6  0E00               	movlw	0
  3007  0012C8  6E12               	movwf	___wmul@multiplicand+1,c
  3008  0012CA  0E03               	movlw	3
  3009  0012CC  6E11               	movwf	___wmul@multiplicand,c
  3010  0012CE  EC9D  F012         	call	___wmul	;wreg free
  3011  0012D2  0E29               	movlw	low __npowers_
  3012  0012D4  240F               	addwf	?___wmul,w,c
  3013  0012D6  6EF6               	movwf	tblptrl,c
  3014  0012D8  0E08               	movlw	high __npowers_
  3015  0012DA  2010               	addwfc	?___wmul+1,w,c
  3016  0012DC  6EF7               	movwf	tblptrh,c
  3017  0012DE                     	if	0	;There are less than 3 active tblptr bytes
  3018  0012DE                     	endif
  3019  0012DE  0009               	tblrd		*+
  3020  0012E0  CFF5 F015          	movff	tablat,___ftmul@f1
  3021  0012E4  0009               	tblrd		*+
  3022  0012E6  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3023  0012EA  000A               	tblrd		*-
  3024  0012EC  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3025  0012F0  0E00               	movlw	0
  3026  0012F2  6E12               	movwf	___wmul@multiplicand+1,c
  3027  0012F4  0E03               	movlw	3
  3028  0012F6  6E11               	movwf	___wmul@multiplicand,c
  3029  0012F8  0E00               	movlw	0
  3030  0012FA  6E04               	movwf	___awmod@divisor+1,c
  3031  0012FC  0E0A               	movlw	10
  3032  0012FE  6E03               	movwf	___awmod@divisor,c
  3033  001300  502A               	movf	scale@scl,w,c
  3034  001302  6E01               	movwf	___awmod@dividend,c
  3035  001304  6A02               	clrf	___awmod@dividend+1,c
  3036  001306  BE01               	btfsc	___awmod@dividend,7,c
  3037  001308  0602               	decf	___awmod@dividend+1,f,c
  3038  00130A  ECF1  F00F         	call	___awmod	;wreg free
  3039  00130E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3040  001312  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3041  001316  EC9D  F012         	call	___wmul	;wreg free
  3042  00131A  0E29               	movlw	low __npowers_
  3043  00131C  240F               	addwf	?___wmul,w,c
  3044  00131E  6EF6               	movwf	tblptrl,c
  3045  001320  0E08               	movlw	high __npowers_
  3046  001322  2010               	addwfc	?___wmul+1,w,c
  3047  001324  6EF7               	movwf	tblptrh,c
  3048  001326                     	if	0	;There are less than 3 active tblptr bytes
  3049  001326                     	endif
  3050  001326  0009               	tblrd		*+
  3051  001328  CFF5 F018          	movff	tablat,___ftmul@f2
  3052  00132C  0009               	tblrd		*+
  3053  00132E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3054  001332  000A               	tblrd		*-
  3055  001334  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3056  001338  ECAE  F00D         	call	___ftmul	;wreg free
  3057  00133C  D0E8               	goto	L13
  3058  00133E                     l2282:
  3059                           
  3060                           ;doprnt.c: 434: return _npowers_[scl];
  3061  00133E  502A               	movf	scale@scl,w,c
  3062  001340  0D03               	mullw	3
  3063  001342  0E29               	movlw	low __npowers_
  3064  001344  24F3               	addwf	prodl,w,c
  3065  001346  6EF6               	movwf	tblptrl,c
  3066  001348  0E08               	movlw	high __npowers_
  3067  00134A  D0EE               	goto	L12
  3068  00134C                     l2286:
  3069                           
  3070                           ;doprnt.c: 435: }
  3071                           ;doprnt.c: 436: if(scl>=110)
  3072  00134C  502A               	movf	scale@scl,w,c
  3073  00134E  0A80               	xorlw	128
  3074  001350  0F12               	addlw	-238
  3075  001352  A0D8               	btfss	status,0,c
  3076  001354  D08B               	goto	l2294
  3077                           
  3078                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3079  001356  0E00               	movlw	0
  3080  001358  6E12               	movwf	___wmul@multiplicand+1,c
  3081  00135A  0E03               	movlw	3
  3082  00135C  6E11               	movwf	___wmul@multiplicand,c
  3083  00135E  0E00               	movlw	0
  3084  001360  6E0A               	movwf	___awdiv@divisor+1,c
  3085  001362  0E0A               	movlw	10
  3086  001364  6E09               	movwf	___awdiv@divisor,c
  3087  001366  0E00               	movlw	0
  3088  001368  6E04               	movwf	___awmod@divisor+1,c
  3089  00136A  0E64               	movlw	100
  3090  00136C  6E03               	movwf	___awmod@divisor,c
  3091  00136E  502A               	movf	scale@scl,w,c
  3092  001370  6E01               	movwf	___awmod@dividend,c
  3093  001372  6A02               	clrf	___awmod@dividend+1,c
  3094  001374  BE01               	btfsc	___awmod@dividend,7,c
  3095  001376  0602               	decf	___awmod@dividend+1,f,c
  3096  001378  ECF1  F00F         	call	___awmod	;wreg free
  3097  00137C  C001  F007         	movff	?___awmod,___awdiv@dividend
  3098  001380  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3099  001384  EC9F  F00F         	call	___awdiv	;wreg free
  3100  001388  0E09               	movlw	9
  3101  00138A  2407               	addwf	?___awdiv,w,c
  3102  00138C  6E0F               	movwf	___wmul@multiplier,c
  3103  00138E  0E00               	movlw	0
  3104  001390  2008               	addwfc	?___awdiv+1,w,c
  3105  001392  6E10               	movwf	___wmul@multiplier+1,c
  3106  001394  EC9D  F012         	call	___wmul	;wreg free
  3107  001398  0E50               	movlw	low __powers_
  3108  00139A  240F               	addwf	?___wmul,w,c
  3109  00139C  6EF6               	movwf	tblptrl,c
  3110  00139E  0E08               	movlw	high __powers_
  3111  0013A0  2010               	addwfc	?___wmul+1,w,c
  3112  0013A2  6EF7               	movwf	tblptrh,c
  3113  0013A4                     	if	0	;There are less than 3 active tblptr bytes
  3114  0013A4                     	endif
  3115  0013A4  0009               	tblrd		*+
  3116  0013A6  CFF5 F018          	movff	tablat,___ftmul@f2
  3117  0013AA  0009               	tblrd		*+
  3118  0013AC  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3119  0013B0  000A               	tblrd		*-
  3120  0013B2  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3121  0013B6  0E00               	movlw	0
  3122  0013B8  6E0A               	movwf	___awdiv@divisor+1,c
  3123  0013BA  0E64               	movlw	100
  3124  0013BC  6E09               	movwf	___awdiv@divisor,c
  3125  0013BE  502A               	movf	scale@scl,w,c
  3126  0013C0  6E07               	movwf	___awdiv@dividend,c
  3127  0013C2  6A08               	clrf	___awdiv@dividend+1,c
  3128  0013C4  BE07               	btfsc	___awdiv@dividend,7,c
  3129  0013C6  0608               	decf	___awdiv@dividend+1,f,c
  3130  0013C8  EC9F  F00F         	call	___awdiv	;wreg free
  3131  0013CC  0E12               	movlw	18
  3132  0013CE  2407               	addwf	?___awdiv,w,c
  3133  0013D0  6E0F               	movwf	___wmul@multiplier,c
  3134  0013D2  0E00               	movlw	0
  3135  0013D4  2008               	addwfc	?___awdiv+1,w,c
  3136  0013D6  6E10               	movwf	___wmul@multiplier+1,c
  3137  0013D8  0E00               	movlw	0
  3138  0013DA  6E12               	movwf	___wmul@multiplicand+1,c
  3139  0013DC  0E03               	movlw	3
  3140  0013DE  6E11               	movwf	___wmul@multiplicand,c
  3141  0013E0  EC9D  F012         	call	___wmul	;wreg free
  3142  0013E4  0E50               	movlw	low __powers_
  3143  0013E6  240F               	addwf	?___wmul,w,c
  3144  0013E8  6EF6               	movwf	tblptrl,c
  3145  0013EA  0E08               	movlw	high __powers_
  3146  0013EC  2010               	addwfc	?___wmul+1,w,c
  3147  0013EE  6EF7               	movwf	tblptrh,c
  3148  0013F0                     	if	0	;There are less than 3 active tblptr bytes
  3149  0013F0                     	endif
  3150  0013F0  0009               	tblrd		*+
  3151  0013F2  CFF5 F015          	movff	tablat,___ftmul@f1
  3152  0013F6  0009               	tblrd		*+
  3153  0013F8  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3154  0013FC  000A               	tblrd		*-
  3155  0013FE  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3156  001402  ECAE  F00D         	call	___ftmul	;wreg free
  3157  001406  C015  F027         	movff	?___ftmul,_scale$1280
  3158  00140A  C016  F028         	movff	?___ftmul+1,_scale$1280+1
  3159  00140E  C017  F029         	movff	?___ftmul+2,_scale$1280+2
  3160                           
  3161                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3162  001412  C027  F015         	movff	_scale$1280,___ftmul@f1
  3163  001416  C028  F016         	movff	_scale$1280+1,___ftmul@f1+1
  3164  00141A  C029  F017         	movff	_scale$1280+2,___ftmul@f1+2
  3165  00141E  0E00               	movlw	0
  3166  001420  6E12               	movwf	___wmul@multiplicand+1,c
  3167  001422  0E03               	movlw	3
  3168  001424  6E11               	movwf	___wmul@multiplicand,c
  3169  001426  0E00               	movlw	0
  3170  001428  6E04               	movwf	___awmod@divisor+1,c
  3171  00142A  0E0A               	movlw	10
  3172  00142C  6E03               	movwf	___awmod@divisor,c
  3173  00142E  502A               	movf	scale@scl,w,c
  3174  001430  6E01               	movwf	___awmod@dividend,c
  3175  001432  6A02               	clrf	___awmod@dividend+1,c
  3176  001434  BE01               	btfsc	___awmod@dividend,7,c
  3177  001436  0602               	decf	___awmod@dividend+1,f,c
  3178  001438  ECF1  F00F         	call	___awmod	;wreg free
  3179  00143C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3180  001440  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3181  001444  EC9D  F012         	call	___wmul	;wreg free
  3182  001448  0E50               	movlw	low __powers_
  3183  00144A  240F               	addwf	?___wmul,w,c
  3184  00144C  6EF6               	movwf	tblptrl,c
  3185  00144E  0E08               	movlw	high __powers_
  3186  001450  2010               	addwfc	?___wmul+1,w,c
  3187  001452  6EF7               	movwf	tblptrh,c
  3188  001454                     	if	0	;There are less than 3 active tblptr bytes
  3189  001454                     	endif
  3190  001454  0009               	tblrd		*+
  3191  001456  CFF5 F018          	movff	tablat,___ftmul@f2
  3192  00145A  0009               	tblrd		*+
  3193  00145C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3194  001460  000A               	tblrd		*-
  3195  001462  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3196  001466  ECAE  F00D         	call	___ftmul	;wreg free
  3197  00146A  D051               	goto	L13
  3198  00146C                     l2294:
  3199                           
  3200                           ;doprnt.c: 438: else if(scl > 10)
  3201  00146C  502A               	movf	scale@scl,w,c
  3202  00146E  0A80               	xorlw	128
  3203  001470  0F75               	addlw	-139
  3204  001472  A0D8               	btfss	status,0,c
  3205  001474  D053               	goto	l2300
  3206                           
  3207                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3208  001476  0E00               	movlw	0
  3209  001478  6E0A               	movwf	___awdiv@divisor+1,c
  3210  00147A  0E0A               	movlw	10
  3211  00147C  6E09               	movwf	___awdiv@divisor,c
  3212  00147E  502A               	movf	scale@scl,w,c
  3213  001480  6E07               	movwf	___awdiv@dividend,c
  3214  001482  6A08               	clrf	___awdiv@dividend+1,c
  3215  001484  BE07               	btfsc	___awdiv@dividend,7,c
  3216  001486  0608               	decf	___awdiv@dividend+1,f,c
  3217  001488  EC9F  F00F         	call	___awdiv	;wreg free
  3218  00148C  0E09               	movlw	9
  3219  00148E  2407               	addwf	?___awdiv,w,c
  3220  001490  6E0F               	movwf	___wmul@multiplier,c
  3221  001492  0E00               	movlw	0
  3222  001494  2008               	addwfc	?___awdiv+1,w,c
  3223  001496  6E10               	movwf	___wmul@multiplier+1,c
  3224  001498  0E00               	movlw	0
  3225  00149A  6E12               	movwf	___wmul@multiplicand+1,c
  3226  00149C  0E03               	movlw	3
  3227  00149E  6E11               	movwf	___wmul@multiplicand,c
  3228  0014A0  EC9D  F012         	call	___wmul	;wreg free
  3229  0014A4  0E50               	movlw	low __powers_
  3230  0014A6  240F               	addwf	?___wmul,w,c
  3231  0014A8  6EF6               	movwf	tblptrl,c
  3232  0014AA  0E08               	movlw	high __powers_
  3233  0014AC  2010               	addwfc	?___wmul+1,w,c
  3234  0014AE  6EF7               	movwf	tblptrh,c
  3235  0014B0                     	if	0	;There are less than 3 active tblptr bytes
  3236  0014B0                     	endif
  3237  0014B0  0009               	tblrd		*+
  3238  0014B2  CFF5 F015          	movff	tablat,___ftmul@f1
  3239  0014B6  0009               	tblrd		*+
  3240  0014B8  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3241  0014BC  000A               	tblrd		*-
  3242  0014BE  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3243  0014C2  0E00               	movlw	0
  3244  0014C4  6E12               	movwf	___wmul@multiplicand+1,c
  3245  0014C6  0E03               	movlw	3
  3246  0014C8  6E11               	movwf	___wmul@multiplicand,c
  3247  0014CA  0E00               	movlw	0
  3248  0014CC  6E04               	movwf	___awmod@divisor+1,c
  3249  0014CE  0E0A               	movlw	10
  3250  0014D0  6E03               	movwf	___awmod@divisor,c
  3251  0014D2  502A               	movf	scale@scl,w,c
  3252  0014D4  6E01               	movwf	___awmod@dividend,c
  3253  0014D6  6A02               	clrf	___awmod@dividend+1,c
  3254  0014D8  BE01               	btfsc	___awmod@dividend,7,c
  3255  0014DA  0602               	decf	___awmod@dividend+1,f,c
  3256  0014DC  ECF1  F00F         	call	___awmod	;wreg free
  3257  0014E0  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3258  0014E4  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3259  0014E8  EC9D  F012         	call	___wmul	;wreg free
  3260  0014EC  0E50               	movlw	low __powers_
  3261  0014EE  240F               	addwf	?___wmul,w,c
  3262  0014F0  6EF6               	movwf	tblptrl,c
  3263  0014F2  0E08               	movlw	high __powers_
  3264  0014F4  2010               	addwfc	?___wmul+1,w,c
  3265  0014F6  6EF7               	movwf	tblptrh,c
  3266  0014F8                     	if	0	;There are less than 3 active tblptr bytes
  3267  0014F8                     	endif
  3268  0014F8  0009               	tblrd		*+
  3269  0014FA  CFF5 F018          	movff	tablat,___ftmul@f2
  3270  0014FE  0009               	tblrd		*+
  3271  001500  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3272  001504  000A               	tblrd		*-
  3273  001506  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3274  00150A  ECAE  F00D         	call	___ftmul	;wreg free
  3275  00150E                     L13:
  3276  00150E  C015  F024         	movff	?___ftmul,?_scale
  3277  001512  C016  F025         	movff	?___ftmul+1,?_scale+1
  3278  001516  C017  F026         	movff	?___ftmul+2,?_scale+2
  3279  00151A  D011               	goto	l185
  3280  00151C                     l2300:
  3281                           
  3282                           ;doprnt.c: 440: return _powers_[scl];
  3283  00151C  502A               	movf	scale@scl,w,c
  3284  00151E  0D03               	mullw	3
  3285  001520  0E50               	movlw	low __powers_
  3286  001522  24F3               	addwf	prodl,w,c
  3287  001524  6EF6               	movwf	tblptrl,c
  3288  001526  0E08               	movlw	high __powers_
  3289  001528                     L12:
  3290  001528  20F4               	addwfc	prodh,w,c
  3291  00152A  6EF7               	movwf	tblptrh,c
  3292  00152C                     	if	0	;There are less than 3 active tblptr bytes
  3293  00152C                     	endif
  3294  00152C  0009               	tblrd		*+
  3295  00152E  CFF5 F024          	movff	tablat,?_scale
  3296  001532  0009               	tblrd		*+
  3297  001534  CFF5 F025          	movff	tablat,?_scale+1
  3298  001538  000A               	tblrd		*-
  3299  00153A  CFF5 F026          	movff	tablat,?_scale+2
  3300  00153E                     l185:
  3301  00153E  0012               	return	
  3302  001540                     __end_of_scale:
  3303                           	opt stack 0
  3304                           tblptru	equ	0xFF8
  3305                           tblptrh	equ	0xFF7
  3306                           tblptrl	equ	0xFF6
  3307                           tablat	equ	0xFF5
  3308                           prodh	equ	0xFF4
  3309                           prodl	equ	0xFF3
  3310                           intcon	equ	0xFF2
  3311                           wreg	equ	0xFE8
  3312                           indf2	equ	0xFDF
  3313                           postinc2	equ	0xFDE
  3314                           postdec2	equ	0xFDD
  3315                           fsr2h	equ	0xFDA
  3316                           fsr2l	equ	0xFD9
  3317                           status	equ	0xFD8
  3318                           
  3319 ;; *************** function _fround *****************
  3320 ;; Defined at:
  3321 ;;		line 409 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\doprnt.c"
  3322 ;; Parameters:    Size  Location     Type
  3323 ;;  prec            1    wreg     unsigned char 
  3324 ;; Auto vars:     Size  Location     Type
  3325 ;;  prec            1   44[COMRAM] unsigned char 
  3326 ;; Return value:  Size  Location     Type
  3327 ;;                  3   35[COMRAM] unsigned char 
  3328 ;; Registers used:
  3329 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3330 ;; Tracked objects:
  3331 ;;		On entry : 0/0
  3332 ;;		On exit  : 0/0
  3333 ;;		Unchanged: 0/0
  3334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3335 ;;      Params:         3       0       0       0       0       0       0       0       0
  3336 ;;      Locals:         7       0       0       0       0       0       0       0       0
  3337 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3338 ;;      Totals:        10       0       0       0       0       0       0       0       0
  3339 ;;Total ram usage:       10 bytes
  3340 ;; Hardware stack levels used:    1
  3341 ;; Hardware stack levels required when called:    2
  3342 ;; This function calls:
  3343 ;;		___awdiv
  3344 ;;		___awmod
  3345 ;;		___ftmul
  3346 ;;		___wmul
  3347 ;; This function is called by:
  3348 ;;		_sprintf
  3349 ;; This function uses a non-reentrant model
  3350 ;;
  3351                           
  3352                           	psect	text8
  3353  001540                     __ptext8:
  3354                           	opt stack 0
  3355  001540                     _fround:
  3356                           	opt stack 25
  3357                           
  3358                           ;incstack = 0
  3359                           ;fround@prec stored from wreg
  3360  001540  6E2D               	movwf	fround@prec,c
  3361                           
  3362                           ;doprnt.c: 413: if(prec>=110)
  3363  001542  0E6D               	movlw	109
  3364  001544  642D               	cpfsgt	fround@prec,c
  3365  001546  D099               	goto	l2254
  3366                           
  3367                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3368  001548  0E00               	movlw	0
  3369  00154A  6E12               	movwf	___wmul@multiplicand+1,c
  3370  00154C  0E03               	movlw	3
  3371  00154E  6E11               	movwf	___wmul@multiplicand,c
  3372  001550  0E00               	movlw	0
  3373  001552  6E0A               	movwf	___awdiv@divisor+1,c
  3374  001554  0E0A               	movlw	10
  3375  001556  6E09               	movwf	___awdiv@divisor,c
  3376  001558  0E00               	movlw	0
  3377  00155A  6E04               	movwf	___awmod@divisor+1,c
  3378  00155C  0E64               	movlw	100
  3379  00155E  6E03               	movwf	___awmod@divisor,c
  3380  001560  C02D  F001         	movff	fround@prec,___awmod@dividend
  3381  001564  6A02               	clrf	___awmod@dividend+1,c
  3382  001566  ECF1  F00F         	call	___awmod	;wreg free
  3383  00156A  C001  F007         	movff	?___awmod,___awdiv@dividend
  3384  00156E  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3385  001572  EC9F  F00F         	call	___awdiv	;wreg free
  3386  001576  0E09               	movlw	9
  3387  001578  2407               	addwf	?___awdiv,w,c
  3388  00157A  6E0F               	movwf	___wmul@multiplier,c
  3389  00157C  0E00               	movlw	0
  3390  00157E  2008               	addwfc	?___awdiv+1,w,c
  3391  001580  6E10               	movwf	___wmul@multiplier+1,c
  3392  001582  EC9D  F012         	call	___wmul	;wreg free
  3393  001586  0E29               	movlw	low __npowers_
  3394  001588  240F               	addwf	?___wmul,w,c
  3395  00158A  6EF6               	movwf	tblptrl,c
  3396  00158C  0E08               	movlw	high __npowers_
  3397  00158E  2010               	addwfc	?___wmul+1,w,c
  3398  001590  6EF7               	movwf	tblptrh,c
  3399  001592                     	if	0	;There are less than 3 active tblptr bytes
  3400  001592                     	endif
  3401  001592  0009               	tblrd		*+
  3402  001594  CFF5 F018          	movff	tablat,___ftmul@f2
  3403  001598  0009               	tblrd		*+
  3404  00159A  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3405  00159E  000A               	tblrd		*-
  3406  0015A0  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3407  0015A4  0E00               	movlw	0
  3408  0015A6  6E0A               	movwf	___awdiv@divisor+1,c
  3409  0015A8  0E64               	movlw	100
  3410  0015AA  6E09               	movwf	___awdiv@divisor,c
  3411  0015AC  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3412  0015B0  6A08               	clrf	___awdiv@dividend+1,c
  3413  0015B2  EC9F  F00F         	call	___awdiv	;wreg free
  3414  0015B6  0E12               	movlw	18
  3415  0015B8  2407               	addwf	?___awdiv,w,c
  3416  0015BA  6E0F               	movwf	___wmul@multiplier,c
  3417  0015BC  0E00               	movlw	0
  3418  0015BE  2008               	addwfc	?___awdiv+1,w,c
  3419  0015C0  6E10               	movwf	___wmul@multiplier+1,c
  3420  0015C2  0E00               	movlw	0
  3421  0015C4  6E12               	movwf	___wmul@multiplicand+1,c
  3422  0015C6  0E03               	movlw	3
  3423  0015C8  6E11               	movwf	___wmul@multiplicand,c
  3424  0015CA  EC9D  F012         	call	___wmul	;wreg free
  3425  0015CE  0E29               	movlw	low __npowers_
  3426  0015D0  240F               	addwf	?___wmul,w,c
  3427  0015D2  6EF6               	movwf	tblptrl,c
  3428  0015D4  0E08               	movlw	high __npowers_
  3429  0015D6  2010               	addwfc	?___wmul+1,w,c
  3430  0015D8  6EF7               	movwf	tblptrh,c
  3431  0015DA                     	if	0	;There are less than 3 active tblptr bytes
  3432  0015DA                     	endif
  3433  0015DA  0009               	tblrd		*+
  3434  0015DC  CFF5 F015          	movff	tablat,___ftmul@f1
  3435  0015E0  0009               	tblrd		*+
  3436  0015E2  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3437  0015E6  000A               	tblrd		*-
  3438  0015E8  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3439  0015EC  ECAE  F00D         	call	___ftmul	;wreg free
  3440  0015F0  C015  F02A         	movff	?___ftmul,_fround$1278
  3441  0015F4  C016  F02B         	movff	?___ftmul+1,_fround$1278+1
  3442  0015F8  C017  F02C         	movff	?___ftmul+2,_fround$1278+2
  3443                           
  3444                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3445  0015FC  0E00               	movlw	0
  3446  0015FE  6E12               	movwf	___wmul@multiplicand+1,c
  3447  001600  0E03               	movlw	3
  3448  001602  6E11               	movwf	___wmul@multiplicand,c
  3449  001604  0E00               	movlw	0
  3450  001606  6E04               	movwf	___awmod@divisor+1,c
  3451  001608  0E0A               	movlw	10
  3452  00160A  6E03               	movwf	___awmod@divisor,c
  3453  00160C  C02D  F001         	movff	fround@prec,___awmod@dividend
  3454  001610  6A02               	clrf	___awmod@dividend+1,c
  3455  001612  ECF1  F00F         	call	___awmod	;wreg free
  3456  001616  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3457  00161A  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3458  00161E  EC9D  F012         	call	___wmul	;wreg free
  3459  001622  0E29               	movlw	low __npowers_
  3460  001624  240F               	addwf	?___wmul,w,c
  3461  001626  6EF6               	movwf	tblptrl,c
  3462  001628  0E08               	movlw	high __npowers_
  3463  00162A  2010               	addwfc	?___wmul+1,w,c
  3464  00162C  6EF7               	movwf	tblptrh,c
  3465  00162E                     	if	0	;There are less than 3 active tblptr bytes
  3466  00162E                     	endif
  3467  00162E  0009               	tblrd		*+
  3468  001630  CFF5 F018          	movff	tablat,___ftmul@f2
  3469  001634  0009               	tblrd		*+
  3470  001636  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3471  00163A  000A               	tblrd		*-
  3472  00163C  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3473  001640  C02A  F015         	movff	_fround$1278,___ftmul@f1
  3474  001644  C02B  F016         	movff	_fround$1278+1,___ftmul@f1+1
  3475  001648  C02C  F017         	movff	_fround$1278+2,___ftmul@f1+2
  3476  00164C  ECAE  F00D         	call	___ftmul	;wreg free
  3477  001650  C015  F027         	movff	?___ftmul,_fround$1279
  3478  001654  C016  F028         	movff	?___ftmul+1,_fround$1279+1
  3479  001658  C017  F029         	movff	?___ftmul+2,_fround$1279+2
  3480                           
  3481                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3482  00165C  C027  F015         	movff	_fround$1279,___ftmul@f1
  3483  001660  C028  F016         	movff	_fround$1279+1,___ftmul@f1+1
  3484  001664  C029  F017         	movff	_fround$1279+2,___ftmul@f1+2
  3485  001668  0E00               	movlw	0
  3486  00166A  6E18               	movwf	___ftmul@f2,c
  3487  00166C  0E00               	movlw	0
  3488  00166E  6E19               	movwf	___ftmul@f2+1,c
  3489  001670  0E3F               	movlw	63
  3490  001672  6E1A               	movwf	___ftmul@f2+2,c
  3491  001674  ECAE  F00D         	call	___ftmul	;wreg free
  3492  001678  D079               	goto	L15
  3493  00167A                     l2254:
  3494                           
  3495                           ;doprnt.c: 415: else if(prec > 10)
  3496  00167A  0E0A               	movlw	10
  3497  00167C  642D               	cpfsgt	fround@prec,c
  3498  00167E  D05D               	goto	l2262
  3499                           
  3500                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3501  001680  0E00               	movlw	0
  3502  001682  6E12               	movwf	___wmul@multiplicand+1,c
  3503  001684  0E03               	movlw	3
  3504  001686  6E11               	movwf	___wmul@multiplicand,c
  3505  001688  0E00               	movlw	0
  3506  00168A  6E04               	movwf	___awmod@divisor+1,c
  3507  00168C  0E0A               	movlw	10
  3508  00168E  6E03               	movwf	___awmod@divisor,c
  3509  001690  C02D  F001         	movff	fround@prec,___awmod@dividend
  3510  001694  6A02               	clrf	___awmod@dividend+1,c
  3511  001696  ECF1  F00F         	call	___awmod	;wreg free
  3512  00169A  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3513  00169E  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3514  0016A2  EC9D  F012         	call	___wmul	;wreg free
  3515  0016A6  0E29               	movlw	low __npowers_
  3516  0016A8  240F               	addwf	?___wmul,w,c
  3517  0016AA  6EF6               	movwf	tblptrl,c
  3518  0016AC  0E08               	movlw	high __npowers_
  3519  0016AE  2010               	addwfc	?___wmul+1,w,c
  3520  0016B0  6EF7               	movwf	tblptrh,c
  3521  0016B2                     	if	0	;There are less than 3 active tblptr bytes
  3522  0016B2                     	endif
  3523  0016B2  0009               	tblrd		*+
  3524  0016B4  CFF5 F018          	movff	tablat,___ftmul@f2
  3525  0016B8  0009               	tblrd		*+
  3526  0016BA  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3527  0016BE  000A               	tblrd		*-
  3528  0016C0  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3529  0016C4  0E00               	movlw	0
  3530  0016C6  6E0A               	movwf	___awdiv@divisor+1,c
  3531  0016C8  0E0A               	movlw	10
  3532  0016CA  6E09               	movwf	___awdiv@divisor,c
  3533  0016CC  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3534  0016D0  6A08               	clrf	___awdiv@dividend+1,c
  3535  0016D2  EC9F  F00F         	call	___awdiv	;wreg free
  3536  0016D6  0E09               	movlw	9
  3537  0016D8  2407               	addwf	?___awdiv,w,c
  3538  0016DA  6E0F               	movwf	___wmul@multiplier,c
  3539  0016DC  0E00               	movlw	0
  3540  0016DE  2008               	addwfc	?___awdiv+1,w,c
  3541  0016E0  6E10               	movwf	___wmul@multiplier+1,c
  3542  0016E2  0E00               	movlw	0
  3543  0016E4  6E12               	movwf	___wmul@multiplicand+1,c
  3544  0016E6  0E03               	movlw	3
  3545  0016E8  6E11               	movwf	___wmul@multiplicand,c
  3546  0016EA  EC9D  F012         	call	___wmul	;wreg free
  3547  0016EE  0E29               	movlw	low __npowers_
  3548  0016F0  240F               	addwf	?___wmul,w,c
  3549  0016F2  6EF6               	movwf	tblptrl,c
  3550  0016F4  0E08               	movlw	high __npowers_
  3551  0016F6  2010               	addwfc	?___wmul+1,w,c
  3552  0016F8  6EF7               	movwf	tblptrh,c
  3553  0016FA                     	if	0	;There are less than 3 active tblptr bytes
  3554  0016FA                     	endif
  3555  0016FA  0009               	tblrd		*+
  3556  0016FC  CFF5 F015          	movff	tablat,___ftmul@f1
  3557  001700  0009               	tblrd		*+
  3558  001702  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3559  001706  000A               	tblrd		*-
  3560  001708  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3561  00170C  ECAE  F00D         	call	___ftmul	;wreg free
  3562  001710  C015  F02A         	movff	?___ftmul,_fround$1278
  3563  001714  C016  F02B         	movff	?___ftmul+1,_fround$1278+1
  3564  001718  C017  F02C         	movff	?___ftmul+2,_fround$1278+2
  3565                           
  3566                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3567  00171C  C02A  F015         	movff	_fround$1278,___ftmul@f1
  3568  001720  C02B  F016         	movff	_fround$1278+1,___ftmul@f1+1
  3569  001724  C02C  F017         	movff	_fround$1278+2,___ftmul@f1+2
  3570  001728  0E00               	movlw	0
  3571  00172A  6E18               	movwf	___ftmul@f2,c
  3572  00172C  0E00               	movlw	0
  3573  00172E  6E19               	movwf	___ftmul@f2+1,c
  3574  001730  0E3F               	movlw	63
  3575  001732  6E1A               	movwf	___ftmul@f2+2,c
  3576  001734  ECAE  F00D         	call	___ftmul	;wreg free
  3577  001738  D019               	goto	L15
  3578  00173A                     l2262:
  3579                           
  3580                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3581  00173A  502D               	movf	fround@prec,w,c
  3582  00173C  0D03               	mullw	3
  3583  00173E  0E29               	movlw	low __npowers_
  3584  001740  24F3               	addwf	prodl,w,c
  3585  001742  6EF6               	movwf	tblptrl,c
  3586  001744  0E08               	movlw	high __npowers_
  3587  001746  20F4               	addwfc	prodh,w,c
  3588  001748  6EF7               	movwf	tblptrh,c
  3589  00174A                     	if	0	;There are less than 3 active tblptr bytes
  3590  00174A                     	endif
  3591  00174A  0009               	tblrd		*+
  3592  00174C  CFF5 F015          	movff	tablat,___ftmul@f1
  3593  001750  0009               	tblrd		*+
  3594  001752  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3595  001756  000A               	tblrd		*-
  3596  001758  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3597  00175C  0E00               	movlw	0
  3598  00175E  6E18               	movwf	___ftmul@f2,c
  3599  001760  0E00               	movlw	0
  3600  001762  6E19               	movwf	___ftmul@f2+1,c
  3601  001764  0E3F               	movlw	63
  3602  001766  6E1A               	movwf	___ftmul@f2+2,c
  3603  001768  ECAE  F00D         	call	___ftmul	;wreg free
  3604  00176C                     L15:
  3605  00176C  C015  F024         	movff	?___ftmul,?_fround
  3606  001770  C016  F025         	movff	?___ftmul+1,?_fround+1
  3607  001774  C017  F026         	movff	?___ftmul+2,?_fround+2
  3608  001778  0012               	return	
  3609  00177A                     __end_of_fround:
  3610                           	opt stack 0
  3611                           tblptru	equ	0xFF8
  3612                           tblptrh	equ	0xFF7
  3613                           tblptrl	equ	0xFF6
  3614                           tablat	equ	0xFF5
  3615                           prodh	equ	0xFF4
  3616                           prodl	equ	0xFF3
  3617                           intcon	equ	0xFF2
  3618                           wreg	equ	0xFE8
  3619                           indf2	equ	0xFDF
  3620                           postinc2	equ	0xFDE
  3621                           postdec2	equ	0xFDD
  3622                           fsr2h	equ	0xFDA
  3623                           fsr2l	equ	0xFD9
  3624                           status	equ	0xFD8
  3625                           
  3626 ;; *************** function ___wmul *****************
  3627 ;; Defined at:
  3628 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\Umul16.c"
  3629 ;; Parameters:    Size  Location     Type
  3630 ;;  multiplier      2   14[COMRAM] unsigned int 
  3631 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3632 ;; Auto vars:     Size  Location     Type
  3633 ;;  product         2   18[COMRAM] unsigned int 
  3634 ;; Return value:  Size  Location     Type
  3635 ;;                  2   14[COMRAM] unsigned int 
  3636 ;; Registers used:
  3637 ;;		wreg, status,2, status,0, prodl, prodh
  3638 ;; Tracked objects:
  3639 ;;		On entry : 0/0
  3640 ;;		On exit  : 0/0
  3641 ;;		Unchanged: 0/0
  3642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3643 ;;      Params:         4       0       0       0       0       0       0       0       0
  3644 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3645 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3646 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3647 ;;Total ram usage:        6 bytes
  3648 ;; Hardware stack levels used:    1
  3649 ;; This function calls:
  3650 ;;		Nothing
  3651 ;; This function is called by:
  3652 ;;		_fround
  3653 ;;		_scale
  3654 ;;		_sprintf
  3655 ;; This function uses a non-reentrant model
  3656 ;;
  3657                           
  3658                           	psect	text9
  3659  00253A                     __ptext9:
  3660                           	opt stack 0
  3661  00253A                     ___wmul:
  3662                           	opt stack 26
  3663                           
  3664                           ;incstack = 0
  3665  00253A  500F               	movf	___wmul@multiplier,w,c
  3666  00253C  0211               	mulwf	___wmul@multiplicand,c
  3667  00253E  CFF3 F013          	movff	prodl,___wmul@product
  3668  002542  CFF4 F014          	movff	prodh,___wmul@product+1
  3669  002546  500F               	movf	___wmul@multiplier,w,c
  3670  002548  0212               	mulwf	___wmul@multiplicand+1,c
  3671  00254A  50F3               	movf	prodl,w,c
  3672  00254C  2614               	addwf	___wmul@product+1,f,c
  3673  00254E  5010               	movf	___wmul@multiplier+1,w,c
  3674  002550  0211               	mulwf	___wmul@multiplicand,c
  3675  002552  50F3               	movf	prodl,w,c
  3676  002554  2614               	addwf	___wmul@product+1,f,c
  3677  002556  C013  F00F         	movff	___wmul@product,?___wmul
  3678  00255A  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3679  00255E  0012               	return	
  3680  002560                     __end_of___wmul:
  3681                           	opt stack 0
  3682                           tblptru	equ	0xFF8
  3683                           tblptrh	equ	0xFF7
  3684                           tblptrl	equ	0xFF6
  3685                           tablat	equ	0xFF5
  3686                           prodh	equ	0xFF4
  3687                           prodl	equ	0xFF3
  3688                           intcon	equ	0xFF2
  3689                           wreg	equ	0xFE8
  3690                           indf2	equ	0xFDF
  3691                           postinc2	equ	0xFDE
  3692                           postdec2	equ	0xFDD
  3693                           fsr2h	equ	0xFDA
  3694                           fsr2l	equ	0xFD9
  3695                           status	equ	0xFD8
  3696                           
  3697 ;; *************** function ___ftmul *****************
  3698 ;; Defined at:
  3699 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftmul.c"
  3700 ;; Parameters:    Size  Location     Type
  3701 ;;  f1              3   20[COMRAM] float 
  3702 ;;  f2              3   23[COMRAM] float 
  3703 ;; Auto vars:     Size  Location     Type
  3704 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  3705 ;;  sign            1   34[COMRAM] unsigned char 
  3706 ;;  cntr            1   33[COMRAM] unsigned char 
  3707 ;;  exp             1   29[COMRAM] unsigned char 
  3708 ;; Return value:  Size  Location     Type
  3709 ;;                  3   20[COMRAM] float 
  3710 ;; Registers used:
  3711 ;;		wreg, status,2, status,0, cstack
  3712 ;; Tracked objects:
  3713 ;;		On entry : 0/0
  3714 ;;		On exit  : 0/0
  3715 ;;		Unchanged: 0/0
  3716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3717 ;;      Params:         6       0       0       0       0       0       0       0       0
  3718 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3719 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3720 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3721 ;;Total ram usage:       15 bytes
  3722 ;; Hardware stack levels used:    1
  3723 ;; Hardware stack levels required when called:    1
  3724 ;; This function calls:
  3725 ;;		___ftpack
  3726 ;; This function is called by:
  3727 ;;		_fround
  3728 ;;		_scale
  3729 ;;		_sprintf
  3730 ;; This function uses a non-reentrant model
  3731 ;;
  3732                           
  3733                           	psect	text10
  3734  001B5C                     __ptext10:
  3735                           	opt stack 0
  3736  001B5C                     ___ftmul:
  3737                           	opt stack 25
  3738                           
  3739                           ;incstack = 0
  3740  001B5C  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  3741  001B60  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3742  001B62  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3743  001B64  3416               	rlcf	___ftmul@f1+1,w,c
  3744  001B66  361B               	rlcf	??___ftmul& (0+255),f,c
  3745  001B68  E301               	bnc	u1931
  3746  001B6A  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3747  001B6C                     u1931:
  3748  001B6C  501B               	movf	??___ftmul,w,c
  3749  001B6E  6E1E               	movwf	___ftmul@exp,c
  3750  001B70  661E               	tstfsz	___ftmul@exp& (0+255),c
  3751  001B72  D001               	goto	l2102
  3752  001B74  D00C               	goto	u1960
  3753  001B76                     l2102:
  3754  001B76  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  3755  001B7A  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3756  001B7C  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3757  001B7E  3419               	rlcf	___ftmul@f2+1,w,c
  3758  001B80  361B               	rlcf	??___ftmul& (0+255),f,c
  3759  001B82  E301               	bnc	u1951
  3760  001B84  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3761  001B86                     u1951:
  3762  001B86  501B               	movf	??___ftmul,w,c
  3763  001B88  6E23               	movwf	___ftmul@sign,c
  3764  001B8A  6623               	tstfsz	___ftmul@sign& (0+255),c
  3765  001B8C  D007               	goto	l2108
  3766  001B8E                     u1960:
  3767  001B8E  0E00               	movlw	0
  3768  001B90  6E15               	movwf	?___ftmul,c
  3769  001B92  0E00               	movlw	0
  3770  001B94  6E16               	movwf	?___ftmul+1,c
  3771  001B96  0E00               	movlw	0
  3772  001B98  6E17               	movwf	?___ftmul+2,c
  3773  001B9A  D051               	goto	l677
  3774  001B9C                     l2108:
  3775  001B9C  5023               	movf	___ftmul@sign,w,c
  3776  001B9E  0F7B               	addlw	123
  3777  001BA0  261E               	addwf	___ftmul@exp,f,c
  3778  001BA2  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  3779  001BA6  501A               	movf	___ftmul@f2+2,w,c
  3780  001BA8  1A23               	xorwf	___ftmul@sign,f,c
  3781  001BAA  0E80               	movlw	128
  3782  001BAC  1623               	andwf	___ftmul@sign,f,c
  3783  001BAE  8E16               	bsf	___ftmul@f1+1,7,c
  3784  001BB0  8E19               	bsf	___ftmul@f2+1,7,c
  3785  001BB2  0EFF               	movlw	255
  3786  001BB4  1618               	andwf	___ftmul@f2,f,c
  3787  001BB6  0EFF               	movlw	255
  3788  001BB8  1619               	andwf	___ftmul@f2+1,f,c
  3789  001BBA  0E00               	movlw	0
  3790  001BBC  161A               	andwf	___ftmul@f2+2,f,c
  3791  001BBE  0E00               	movlw	0
  3792  001BC0  6E1F               	movwf	___ftmul@f3_as_product,c
  3793  001BC2  0E00               	movlw	0
  3794  001BC4  6E20               	movwf	___ftmul@f3_as_product+1,c
  3795  001BC6  0E00               	movlw	0
  3796  001BC8  6E21               	movwf	___ftmul@f3_as_product+2,c
  3797  001BCA  0E07               	movlw	7
  3798  001BCC  6E22               	movwf	___ftmul@cntr,c
  3799  001BCE                     l2122:
  3800  001BCE  A015               	btfss	___ftmul@f1,0,c
  3801  001BD0  D006               	goto	l2126
  3802  001BD2  5018               	movf	___ftmul@f2,w,c
  3803  001BD4  261F               	addwf	___ftmul@f3_as_product,f,c
  3804  001BD6  5019               	movf	___ftmul@f2+1,w,c
  3805  001BD8  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3806  001BDA  501A               	movf	___ftmul@f2+2,w,c
  3807  001BDC  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3808  001BDE                     l2126:
  3809  001BDE  90D8               	bcf	status,0,c
  3810  001BE0  3217               	rrcf	___ftmul@f1+2,f,c
  3811  001BE2  3216               	rrcf	___ftmul@f1+1,f,c
  3812  001BE4  3215               	rrcf	___ftmul@f1,f,c
  3813  001BE6  90D8               	bcf	status,0,c
  3814  001BE8  3618               	rlcf	___ftmul@f2,f,c
  3815  001BEA  3619               	rlcf	___ftmul@f2+1,f,c
  3816  001BEC  361A               	rlcf	___ftmul@f2+2,f,c
  3817  001BEE  2E22               	decfsz	___ftmul@cntr,f,c
  3818  001BF0  D7EE               	goto	l2122
  3819  001BF2  0E09               	movlw	9
  3820  001BF4  6E22               	movwf	___ftmul@cntr,c
  3821  001BF6                     l2132:
  3822  001BF6  A015               	btfss	___ftmul@f1,0,c
  3823  001BF8  D006               	goto	l2136
  3824  001BFA  5018               	movf	___ftmul@f2,w,c
  3825  001BFC  261F               	addwf	___ftmul@f3_as_product,f,c
  3826  001BFE  5019               	movf	___ftmul@f2+1,w,c
  3827  001C00  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3828  001C02  501A               	movf	___ftmul@f2+2,w,c
  3829  001C04  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3830  001C06                     l2136:
  3831  001C06  90D8               	bcf	status,0,c
  3832  001C08  3217               	rrcf	___ftmul@f1+2,f,c
  3833  001C0A  3216               	rrcf	___ftmul@f1+1,f,c
  3834  001C0C  3215               	rrcf	___ftmul@f1,f,c
  3835  001C0E  90D8               	bcf	status,0,c
  3836  001C10  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  3837  001C12  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  3838  001C14  321F               	rrcf	___ftmul@f3_as_product,f,c
  3839  001C16  2E22               	decfsz	___ftmul@cntr,f,c
  3840  001C18  D7EE               	goto	l2132
  3841  001C1A  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3842  001C1E  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3843  001C22  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3844  001C26  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  3845  001C2A  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  3846  001C2E  EC4B  F00F         	call	___ftpack	;wreg free
  3847  001C32  C001  F015         	movff	?___ftpack,?___ftmul
  3848  001C36  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  3849  001C3A  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  3850  001C3E                     l677:
  3851  001C3E  0012               	return	
  3852  001C40                     __end_of___ftmul:
  3853                           	opt stack 0
  3854                           tblptru	equ	0xFF8
  3855                           tblptrh	equ	0xFF7
  3856                           tblptrl	equ	0xFF6
  3857                           tablat	equ	0xFF5
  3858                           prodh	equ	0xFF4
  3859                           prodl	equ	0xFF3
  3860                           intcon	equ	0xFF2
  3861                           wreg	equ	0xFE8
  3862                           indf2	equ	0xFDF
  3863                           postinc2	equ	0xFDE
  3864                           postdec2	equ	0xFDD
  3865                           fsr2h	equ	0xFDA
  3866                           fsr2l	equ	0xFD9
  3867                           status	equ	0xFD8
  3868                           
  3869 ;; *************** function ___awmod *****************
  3870 ;; Defined at:
  3871 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\awmod.c"
  3872 ;; Parameters:    Size  Location     Type
  3873 ;;  dividend        2    0[COMRAM] int 
  3874 ;;  divisor         2    2[COMRAM] int 
  3875 ;; Auto vars:     Size  Location     Type
  3876 ;;  sign            1    5[COMRAM] unsigned char 
  3877 ;;  counter         1    4[COMRAM] unsigned char 
  3878 ;; Return value:  Size  Location     Type
  3879 ;;                  2    0[COMRAM] int 
  3880 ;; Registers used:
  3881 ;;		wreg, status,2, status,0, prodl
  3882 ;; Tracked objects:
  3883 ;;		On entry : 0/0
  3884 ;;		On exit  : 0/0
  3885 ;;		Unchanged: 0/0
  3886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3887 ;;      Params:         4       0       0       0       0       0       0       0       0
  3888 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3889 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3890 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3891 ;;Total ram usage:        6 bytes
  3892 ;; Hardware stack levels used:    1
  3893 ;; This function calls:
  3894 ;;		Nothing
  3895 ;; This function is called by:
  3896 ;;		_fround
  3897 ;;		_scale
  3898 ;; This function uses a non-reentrant model
  3899 ;;
  3900                           
  3901                           	psect	text11
  3902  001FE2                     __ptext11:
  3903                           	opt stack 0
  3904  001FE2                     ___awmod:
  3905                           	opt stack 26
  3906                           
  3907                           ;incstack = 0
  3908  001FE2  0E00               	movlw	0
  3909  001FE4  6E06               	movwf	___awmod@sign,c
  3910  001FE6  5002               	movf	___awmod@dividend+1,w,c
  3911  001FE8  0A80               	xorlw	128
  3912  001FEA  6EF3               	movwf	prodl,c
  3913  001FEC  0E80               	movlw	128
  3914  001FEE  5CF3               	subwf	prodl,w,c
  3915  001FF0  0E00               	movlw	0
  3916  001FF2  B4D8               	btfsc	status,2,c
  3917  001FF4  5C01               	subwf	___awmod@dividend,w,c
  3918  001FF6  B0D8               	btfsc	status,0,c
  3919  001FF8  D006               	goto	l2196
  3920  001FFA  6C01               	negf	___awmod@dividend,c
  3921  001FFC  1E02               	comf	___awmod@dividend+1,f,c
  3922  001FFE  B0D8               	btfsc	status,0,c
  3923  002000  2A02               	incf	___awmod@dividend+1,f,c
  3924  002002  0E01               	movlw	1
  3925  002004  6E06               	movwf	___awmod@sign,c
  3926  002006                     l2196:
  3927  002006  5004               	movf	___awmod@divisor+1,w,c
  3928  002008  0A80               	xorlw	128
  3929  00200A  6EF3               	movwf	prodl,c
  3930  00200C  0E80               	movlw	128
  3931  00200E  5CF3               	subwf	prodl,w,c
  3932  002010  0E00               	movlw	0
  3933  002012  B4D8               	btfsc	status,2,c
  3934  002014  5C03               	subwf	___awmod@divisor,w,c
  3935  002016  B0D8               	btfsc	status,0,c
  3936  002018  D004               	goto	l2200
  3937  00201A  6C03               	negf	___awmod@divisor,c
  3938  00201C  1E04               	comf	___awmod@divisor+1,f,c
  3939  00201E  B0D8               	btfsc	status,0,c
  3940  002020  2A04               	incf	___awmod@divisor+1,f,c
  3941  002022                     l2200:
  3942  002022  5004               	movf	___awmod@divisor+1,w,c
  3943  002024  1003               	iorwf	___awmod@divisor,w,c
  3944  002026  B4D8               	btfsc	status,2,c
  3945  002028  D018               	goto	l2216
  3946  00202A  0E01               	movlw	1
  3947  00202C  6E05               	movwf	___awmod@counter,c
  3948  00202E  D004               	goto	l2206
  3949  002030                     l2204:
  3950  002030  90D8               	bcf	status,0,c
  3951  002032  3603               	rlcf	___awmod@divisor,f,c
  3952  002034  3604               	rlcf	___awmod@divisor+1,f,c
  3953  002036  2A05               	incf	___awmod@counter,f,c
  3954  002038                     l2206:
  3955  002038  AE04               	btfss	___awmod@divisor+1,7,c
  3956  00203A  D7FA               	goto	l2204
  3957  00203C                     l2208:
  3958  00203C  5003               	movf	___awmod@divisor,w,c
  3959  00203E  5C01               	subwf	___awmod@dividend,w,c
  3960  002040  5004               	movf	___awmod@divisor+1,w,c
  3961  002042  5802               	subwfb	___awmod@dividend+1,w,c
  3962  002044  A0D8               	btfss	status,0,c
  3963  002046  D004               	goto	l2212
  3964  002048  5003               	movf	___awmod@divisor,w,c
  3965  00204A  5E01               	subwf	___awmod@dividend,f,c
  3966  00204C  5004               	movf	___awmod@divisor+1,w,c
  3967  00204E  5A02               	subwfb	___awmod@dividend+1,f,c
  3968  002050                     l2212:
  3969  002050  90D8               	bcf	status,0,c
  3970  002052  3204               	rrcf	___awmod@divisor+1,f,c
  3971  002054  3203               	rrcf	___awmod@divisor,f,c
  3972  002056  2E05               	decfsz	___awmod@counter,f,c
  3973  002058  D7F1               	goto	l2208
  3974  00205A                     l2216:
  3975  00205A  5006               	movf	___awmod@sign,w,c
  3976  00205C  B4D8               	btfsc	status,2,c
  3977  00205E  D004               	goto	l2220
  3978  002060  6C01               	negf	___awmod@dividend,c
  3979  002062  1E02               	comf	___awmod@dividend+1,f,c
  3980  002064  B0D8               	btfsc	status,0,c
  3981  002066  2A02               	incf	___awmod@dividend+1,f,c
  3982  002068                     l2220:
  3983  002068  C001  F001         	movff	___awmod@dividend,?___awmod
  3984  00206C  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  3985  002070  0012               	return	
  3986  002072                     __end_of___awmod:
  3987                           	opt stack 0
  3988                           tblptru	equ	0xFF8
  3989                           tblptrh	equ	0xFF7
  3990                           tblptrl	equ	0xFF6
  3991                           tablat	equ	0xFF5
  3992                           prodh	equ	0xFF4
  3993                           prodl	equ	0xFF3
  3994                           intcon	equ	0xFF2
  3995                           wreg	equ	0xFE8
  3996                           indf2	equ	0xFDF
  3997                           postinc2	equ	0xFDE
  3998                           postdec2	equ	0xFDD
  3999                           fsr2h	equ	0xFDA
  4000                           fsr2l	equ	0xFD9
  4001                           status	equ	0xFD8
  4002                           
  4003 ;; *************** function ___awdiv *****************
  4004 ;; Defined at:
  4005 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\awdiv.c"
  4006 ;; Parameters:    Size  Location     Type
  4007 ;;  dividend        2    6[COMRAM] int 
  4008 ;;  divisor         2    8[COMRAM] int 
  4009 ;; Auto vars:     Size  Location     Type
  4010 ;;  quotient        2   12[COMRAM] int 
  4011 ;;  sign            1   11[COMRAM] unsigned char 
  4012 ;;  counter         1   10[COMRAM] unsigned char 
  4013 ;; Return value:  Size  Location     Type
  4014 ;;                  2    6[COMRAM] int 
  4015 ;; Registers used:
  4016 ;;		wreg, status,2, status,0, prodl
  4017 ;; Tracked objects:
  4018 ;;		On entry : 0/0
  4019 ;;		On exit  : 0/0
  4020 ;;		Unchanged: 0/0
  4021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4022 ;;      Params:         4       0       0       0       0       0       0       0       0
  4023 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4024 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4025 ;;      Totals:         8       0       0       0       0       0       0       0       0
  4026 ;;Total ram usage:        8 bytes
  4027 ;; Hardware stack levels used:    1
  4028 ;; This function calls:
  4029 ;;		Nothing
  4030 ;; This function is called by:
  4031 ;;		_fround
  4032 ;;		_scale
  4033 ;;		_sprintf
  4034 ;; This function uses a non-reentrant model
  4035 ;;
  4036                           
  4037                           	psect	text12
  4038  001F3E                     __ptext12:
  4039                           	opt stack 0
  4040  001F3E                     ___awdiv:
  4041                           	opt stack 26
  4042                           
  4043                           ;incstack = 0
  4044  001F3E  0E00               	movlw	0
  4045  001F40  6E0C               	movwf	___awdiv@sign,c
  4046  001F42  500A               	movf	___awdiv@divisor+1,w,c
  4047  001F44  0A80               	xorlw	128
  4048  001F46  6EF3               	movwf	prodl,c
  4049  001F48  0E80               	movlw	128
  4050  001F4A  5CF3               	subwf	prodl,w,c
  4051  001F4C  0E00               	movlw	0
  4052  001F4E  B4D8               	btfsc	status,2,c
  4053  001F50  5C09               	subwf	___awdiv@divisor,w,c
  4054  001F52  B0D8               	btfsc	status,0,c
  4055  001F54  D006               	goto	l2152
  4056  001F56  6C09               	negf	___awdiv@divisor,c
  4057  001F58  1E0A               	comf	___awdiv@divisor+1,f,c
  4058  001F5A  B0D8               	btfsc	status,0,c
  4059  001F5C  2A0A               	incf	___awdiv@divisor+1,f,c
  4060  001F5E  0E01               	movlw	1
  4061  001F60  6E0C               	movwf	___awdiv@sign,c
  4062  001F62                     l2152:
  4063  001F62  5008               	movf	___awdiv@dividend+1,w,c
  4064  001F64  0A80               	xorlw	128
  4065  001F66  6EF3               	movwf	prodl,c
  4066  001F68  0E80               	movlw	128
  4067  001F6A  5CF3               	subwf	prodl,w,c
  4068  001F6C  0E00               	movlw	0
  4069  001F6E  B4D8               	btfsc	status,2,c
  4070  001F70  5C07               	subwf	___awdiv@dividend,w,c
  4071  001F72  B0D8               	btfsc	status,0,c
  4072  001F74  D006               	goto	l2158
  4073  001F76  6C07               	negf	___awdiv@dividend,c
  4074  001F78  1E08               	comf	___awdiv@dividend+1,f,c
  4075  001F7A  B0D8               	btfsc	status,0,c
  4076  001F7C  2A08               	incf	___awdiv@dividend+1,f,c
  4077  001F7E  0E01               	movlw	1
  4078  001F80  1A0C               	xorwf	___awdiv@sign,f,c
  4079  001F82                     l2158:
  4080  001F82  0E00               	movlw	0
  4081  001F84  6E0E               	movwf	___awdiv@quotient+1,c
  4082  001F86  0E00               	movlw	0
  4083  001F88  6E0D               	movwf	___awdiv@quotient,c
  4084  001F8A  500A               	movf	___awdiv@divisor+1,w,c
  4085  001F8C  1009               	iorwf	___awdiv@divisor,w,c
  4086  001F8E  B4D8               	btfsc	status,2,c
  4087  001F90  D01C               	goto	l2180
  4088  001F92  0E01               	movlw	1
  4089  001F94  6E0B               	movwf	___awdiv@counter,c
  4090  001F96  D004               	goto	l2166
  4091  001F98                     l2164:
  4092  001F98  90D8               	bcf	status,0,c
  4093  001F9A  3609               	rlcf	___awdiv@divisor,f,c
  4094  001F9C  360A               	rlcf	___awdiv@divisor+1,f,c
  4095  001F9E  2A0B               	incf	___awdiv@counter,f,c
  4096  001FA0                     l2166:
  4097  001FA0  AE0A               	btfss	___awdiv@divisor+1,7,c
  4098  001FA2  D7FA               	goto	l2164
  4099  001FA4                     l2168:
  4100  001FA4  90D8               	bcf	status,0,c
  4101  001FA6  360D               	rlcf	___awdiv@quotient,f,c
  4102  001FA8  360E               	rlcf	___awdiv@quotient+1,f,c
  4103  001FAA  5009               	movf	___awdiv@divisor,w,c
  4104  001FAC  5C07               	subwf	___awdiv@dividend,w,c
  4105  001FAE  500A               	movf	___awdiv@divisor+1,w,c
  4106  001FB0  5808               	subwfb	___awdiv@dividend+1,w,c
  4107  001FB2  A0D8               	btfss	status,0,c
  4108  001FB4  D005               	goto	l2176
  4109  001FB6  5009               	movf	___awdiv@divisor,w,c
  4110  001FB8  5E07               	subwf	___awdiv@dividend,f,c
  4111  001FBA  500A               	movf	___awdiv@divisor+1,w,c
  4112  001FBC  5A08               	subwfb	___awdiv@dividend+1,f,c
  4113  001FBE  800D               	bsf	___awdiv@quotient,0,c
  4114  001FC0                     l2176:
  4115  001FC0  90D8               	bcf	status,0,c
  4116  001FC2  320A               	rrcf	___awdiv@divisor+1,f,c
  4117  001FC4  3209               	rrcf	___awdiv@divisor,f,c
  4118  001FC6  2E0B               	decfsz	___awdiv@counter,f,c
  4119  001FC8  D7ED               	goto	l2168
  4120  001FCA                     l2180:
  4121  001FCA  500C               	movf	___awdiv@sign,w,c
  4122  001FCC  B4D8               	btfsc	status,2,c
  4123  001FCE  D004               	goto	l2184
  4124  001FD0  6C0D               	negf	___awdiv@quotient,c
  4125  001FD2  1E0E               	comf	___awdiv@quotient+1,f,c
  4126  001FD4  B0D8               	btfsc	status,0,c
  4127  001FD6  2A0E               	incf	___awdiv@quotient+1,f,c
  4128  001FD8                     l2184:
  4129  001FD8  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4130  001FDC  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4131  001FE0  0012               	return	
  4132  001FE2                     __end_of___awdiv:
  4133                           	opt stack 0
  4134                           tblptru	equ	0xFF8
  4135                           tblptrh	equ	0xFF7
  4136                           tblptrl	equ	0xFF6
  4137                           tablat	equ	0xFF5
  4138                           prodh	equ	0xFF4
  4139                           prodl	equ	0xFF3
  4140                           intcon	equ	0xFF2
  4141                           wreg	equ	0xFE8
  4142                           indf2	equ	0xFDF
  4143                           postinc2	equ	0xFDE
  4144                           postdec2	equ	0xFDD
  4145                           fsr2h	equ	0xFDA
  4146                           fsr2l	equ	0xFD9
  4147                           status	equ	0xFD8
  4148                           
  4149 ;; *************** function __tdiv_to_l_ *****************
  4150 ;; Defined at:
  4151 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftdivl.c"
  4152 ;; Parameters:    Size  Location     Type
  4153 ;;  f1              3    0[COMRAM] float 
  4154 ;;  f2              3    3[COMRAM] float 
  4155 ;; Auto vars:     Size  Location     Type
  4156 ;;  quot            4    9[COMRAM] unsigned long 
  4157 ;;  exp1            1   14[COMRAM] unsigned char 
  4158 ;;  cntr            1   13[COMRAM] unsigned char 
  4159 ;; Return value:  Size  Location     Type
  4160 ;;                  4    0[COMRAM] unsigned long 
  4161 ;; Registers used:
  4162 ;;		wreg, status,2, status,0
  4163 ;; Tracked objects:
  4164 ;;		On entry : 0/0
  4165 ;;		On exit  : 0/0
  4166 ;;		Unchanged: 0/0
  4167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4168 ;;      Params:         6       0       0       0       0       0       0       0       0
  4169 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4170 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4171 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4172 ;;Total ram usage:       15 bytes
  4173 ;; Hardware stack levels used:    1
  4174 ;; This function calls:
  4175 ;;		Nothing
  4176 ;; This function is called by:
  4177 ;;		_sprintf
  4178 ;; This function uses a non-reentrant model
  4179 ;;
  4180                           
  4181                           	psect	text13
  4182  001A5C                     __ptext13:
  4183                           	opt stack 0
  4184  001A5C                     __tdiv_to_l_:
  4185                           	opt stack 27
  4186                           
  4187                           ;incstack = 0
  4188  001A5C  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4189  001A60  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4190  001A62  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4191  001A64  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  4192  001A66  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4193  001A68  E301               	bnc	u2181
  4194  001A6A  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4195  001A6C                     u2181:
  4196  001A6C  5007               	movf	??__tdiv_to_l_,w,c
  4197  001A6E  6E0F               	movwf	__tdiv_to_l_@exp1,c
  4198  001A70  660F               	tstfsz	__tdiv_to_l_@exp1& (0+255),c
  4199  001A72  D001               	goto	l2310
  4200  001A74  D059               	goto	u2250
  4201  001A76                     l2310:
  4202  001A76  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4203  001A7A  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4204  001A7C  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4205  001A7E  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  4206  001A80  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4207  001A82  E301               	bnc	u2201
  4208  001A84  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4209  001A86                     u2201:
  4210  001A86  5007               	movf	??__tdiv_to_l_,w,c
  4211  001A88  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4212  001A8A  660E               	tstfsz	__tdiv_to_l_@cntr& (0+255),c
  4213  001A8C  D001               	goto	l2316
  4214  001A8E  D04C               	goto	u2250
  4215  001A90                     l2316:
  4216  001A90  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4217  001A92  0EFF               	movlw	255
  4218  001A94  1601               	andwf	__tdiv_to_l_@f1,f,c
  4219  001A96  0EFF               	movlw	255
  4220  001A98  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4221  001A9A  0E00               	movlw	0
  4222  001A9C  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4223  001A9E  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4224  001AA0  0EFF               	movlw	255
  4225  001AA2  1604               	andwf	__tdiv_to_l_@f2,f,c
  4226  001AA4  0EFF               	movlw	255
  4227  001AA6  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4228  001AA8  0E00               	movlw	0
  4229  001AAA  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4230  001AAC  0E00               	movlw	0
  4231  001AAE  6E0A               	movwf	__tdiv_to_l_@quot,c
  4232  001AB0  0E00               	movlw	0
  4233  001AB2  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4234  001AB4  0E00               	movlw	0
  4235  001AB6  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4236  001AB8  0E00               	movlw	0
  4237  001ABA  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4238  001ABC  0E7F               	movlw	127
  4239  001ABE  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4240  001AC0  500E               	movf	__tdiv_to_l_@cntr,w,c
  4241  001AC2  0F98               	addlw	152
  4242  001AC4  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4243  001AC6  0E18               	movlw	24
  4244  001AC8  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4245  001ACA                     l655:
  4246  001ACA  90D8               	bcf	status,0,c
  4247  001ACC  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4248  001ACE  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4249  001AD0  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4250  001AD2  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4251  001AD4  5004               	movf	__tdiv_to_l_@f2,w,c
  4252  001AD6  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4253  001AD8  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4254  001ADA  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4255  001ADC  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4256  001ADE  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4257  001AE0  A0D8               	btfss	status,0,c
  4258  001AE2  D007               	goto	l656
  4259  001AE4  5004               	movf	__tdiv_to_l_@f2,w,c
  4260  001AE6  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4261  001AE8  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4262  001AEA  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4263  001AEC  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4264  001AEE  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4265  001AF0  800A               	bsf	__tdiv_to_l_@quot,0,c
  4266  001AF2                     l656:
  4267  001AF2  90D8               	bcf	status,0,c
  4268  001AF4  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4269  001AF6  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4270  001AF8  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4271  001AFA  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4272  001AFC  D7E6               	goto	l655
  4273  001AFE  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4274  001B00  D010               	goto	l2348
  4275  001B02  500F               	movf	__tdiv_to_l_@exp1,w,c
  4276  001B04  0A80               	xorlw	128
  4277  001B06  6E07               	movwf	??__tdiv_to_l_& (0+255),c
  4278  001B08  0EE9               	movlw	233
  4279  001B0A  0A80               	xorlw	128
  4280  001B0C  5C07               	subwf	??__tdiv_to_l_,w,c
  4281  001B0E  A0D8               	btfss	status,0,c
  4282  001B10  D00B               	goto	u2250
  4283  001B12                     l2344:
  4284  001B12  90D8               	bcf	status,0,c
  4285  001B14  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4286  001B16  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4287  001B18  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4288  001B1A  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4289  001B1C  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4290  001B1E  D7F9               	goto	l2344
  4291  001B20  D014               	goto	l662
  4292  001B22                     l2348:
  4293  001B22  0E17               	movlw	23
  4294  001B24  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4295  001B26  D00F               	goto	l2356
  4296  001B28                     u2250:
  4297  001B28  0E00               	movlw	0
  4298  001B2A  6E01               	movwf	?__tdiv_to_l_,c
  4299  001B2C  0E00               	movlw	0
  4300  001B2E  6E02               	movwf	?__tdiv_to_l_+1,c
  4301  001B30  0E00               	movlw	0
  4302  001B32  6E03               	movwf	?__tdiv_to_l_+2,c
  4303  001B34  0E00               	movlw	0
  4304  001B36  6E04               	movwf	?__tdiv_to_l_+3,c
  4305  001B38  D010               	goto	l653
  4306  001B3A                     l2354:
  4307  001B3A  90D8               	bcf	status,0,c
  4308  001B3C  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4309  001B3E  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4310  001B40  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4311  001B42  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4312  001B44  060F               	decf	__tdiv_to_l_@exp1,f,c
  4313  001B46                     l2356:
  4314  001B46  660F               	tstfsz	__tdiv_to_l_@exp1,c
  4315  001B48  D7F8               	goto	l2354
  4316  001B4A                     l662:
  4317  001B4A  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4318  001B4E  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4319  001B52  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4320  001B56  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4321  001B5A                     l653:
  4322  001B5A  0012               	return	
  4323  001B5C                     __end_of__tdiv_to_l_:
  4324                           	opt stack 0
  4325                           tblptru	equ	0xFF8
  4326                           tblptrh	equ	0xFF7
  4327                           tblptrl	equ	0xFF6
  4328                           tablat	equ	0xFF5
  4329                           prodh	equ	0xFF4
  4330                           prodl	equ	0xFF3
  4331                           intcon	equ	0xFF2
  4332                           wreg	equ	0xFE8
  4333                           indf2	equ	0xFDF
  4334                           postinc2	equ	0xFDE
  4335                           postdec2	equ	0xFDD
  4336                           fsr2h	equ	0xFDA
  4337                           fsr2l	equ	0xFD9
  4338                           status	equ	0xFD8
  4339                           
  4340 ;; *************** function __div_to_l_ *****************
  4341 ;; Defined at:
  4342 ;;		line 60 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fldivl.c"
  4343 ;; Parameters:    Size  Location     Type
  4344 ;;  f1              3    0[COMRAM] unsigned long 
  4345 ;;  f2              3    3[COMRAM] unsigned long 
  4346 ;; Auto vars:     Size  Location     Type
  4347 ;;  quot            4   10[COMRAM] unsigned long 
  4348 ;;  exp1            1   15[COMRAM] unsigned char 
  4349 ;;  cntr            1   14[COMRAM] unsigned char 
  4350 ;; Return value:  Size  Location     Type
  4351 ;;                  4    0[COMRAM] unsigned long 
  4352 ;; Registers used:
  4353 ;;		wreg, status,2, status,0
  4354 ;; Tracked objects:
  4355 ;;		On entry : 0/0
  4356 ;;		On exit  : 0/0
  4357 ;;		Unchanged: 0/0
  4358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4359 ;;      Params:         6       0       0       0       0       0       0       0       0
  4360 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4361 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4362 ;;      Totals:        16       0       0       0       0       0       0       0       0
  4363 ;;Total ram usage:       16 bytes
  4364 ;; Hardware stack levels used:    1
  4365 ;; This function calls:
  4366 ;;		Nothing
  4367 ;; This function is called by:
  4368 ;;		_sprintf
  4369 ;; This function uses a non-reentrant model
  4370 ;;
  4371                           
  4372                           	psect	text14
  4373  001926                     __ptext14:
  4374                           	opt stack 0
  4375  001926                     __div_to_l_:
  4376                           	opt stack 27
  4377                           
  4378                           ;incstack = 0
  4379  001926  C001  F007         	movff	__div_to_l_@f1,??__div_to_l_
  4380  00192A  C002  F008         	movff	__div_to_l_@f1+1,??__div_to_l_+1
  4381  00192E  C003  F009         	movff	__div_to_l_@f1+2,??__div_to_l_+2
  4382  001932  C004  F00A         	movff	__div_to_l_@f1+3,??__div_to_l_+3
  4383  001936  0E18               	movlw	24
  4384  001938  D005               	goto	u2270
  4385  00193A                     u2275:
  4386  00193A  90D8               	bcf	status,0,c
  4387  00193C  320A               	rrcf	??__div_to_l_+3,f,c
  4388  00193E  3209               	rrcf	??__div_to_l_+2,f,c
  4389  001940  3208               	rrcf	??__div_to_l_+1,f,c
  4390  001942  3207               	rrcf	??__div_to_l_,f,c
  4391  001944                     u2270:
  4392  001944  2EE8               	decfsz	wreg,f,c
  4393  001946  D7F9               	goto	u2275
  4394  001948  5007               	movf	??__div_to_l_,w,c
  4395  00194A  6E10               	movwf	__div_to_l_@exp1,c
  4396  00194C  6610               	tstfsz	__div_to_l_@exp1& (0+255),c
  4397  00194E  D001               	goto	l2364
  4398  001950  D06B               	goto	u2340
  4399  001952                     l2364:
  4400  001952  C004  F007         	movff	__div_to_l_@f2,??__div_to_l_
  4401  001956  C005  F008         	movff	__div_to_l_@f2+1,??__div_to_l_+1
  4402  00195A  C006  F009         	movff	__div_to_l_@f2+2,??__div_to_l_+2
  4403  00195E  C007  F00A         	movff	__div_to_l_@f2+3,??__div_to_l_+3
  4404  001962  0E18               	movlw	24
  4405  001964  D005               	goto	u2290
  4406  001966                     u2295:
  4407  001966  90D8               	bcf	status,0,c
  4408  001968  320A               	rrcf	??__div_to_l_+3,f,c
  4409  00196A  3209               	rrcf	??__div_to_l_+2,f,c
  4410  00196C  3208               	rrcf	??__div_to_l_+1,f,c
  4411  00196E  3207               	rrcf	??__div_to_l_,f,c
  4412  001970                     u2290:
  4413  001970  2EE8               	decfsz	wreg,f,c
  4414  001972  D7F9               	goto	u2295
  4415  001974  5007               	movf	??__div_to_l_,w,c
  4416  001976  6E0F               	movwf	__div_to_l_@cntr,c
  4417  001978  660F               	tstfsz	__div_to_l_@cntr& (0+255),c
  4418  00197A  D001               	goto	l2370
  4419  00197C  D055               	goto	u2340
  4420  00197E                     l2370:
  4421  00197E  8E03               	bsf	__div_to_l_@f1+2,7,c
  4422  001980  0EFF               	movlw	255
  4423  001982  1601               	andwf	__div_to_l_@f1,f,c
  4424  001984  0EFF               	movlw	255
  4425  001986  1602               	andwf	__div_to_l_@f1+1,f,c
  4426  001988  0EFF               	movlw	255
  4427  00198A  1603               	andwf	__div_to_l_@f1+2,f,c
  4428  00198C  0E00               	movlw	0
  4429  00198E  1604               	andwf	__div_to_l_@f1+3,f,c
  4430  001990  8E06               	bsf	__div_to_l_@f2+2,7,c
  4431  001992  0EFF               	movlw	255
  4432  001994  1604               	andwf	__div_to_l_@f2,f,c
  4433  001996  0EFF               	movlw	255
  4434  001998  1605               	andwf	__div_to_l_@f2+1,f,c
  4435  00199A  0EFF               	movlw	255
  4436  00199C  1606               	andwf	__div_to_l_@f2+2,f,c
  4437  00199E  0E00               	movlw	0
  4438  0019A0  1607               	andwf	__div_to_l_@f2+3,f,c
  4439  0019A2  0E00               	movlw	0
  4440  0019A4  6E0B               	movwf	__div_to_l_@quot,c
  4441  0019A6  0E00               	movlw	0
  4442  0019A8  6E0C               	movwf	__div_to_l_@quot+1,c
  4443  0019AA  0E00               	movlw	0
  4444  0019AC  6E0D               	movwf	__div_to_l_@quot+2,c
  4445  0019AE  0E00               	movlw	0
  4446  0019B0  6E0E               	movwf	__div_to_l_@quot+3,c
  4447  0019B2  0E7F               	movlw	127
  4448  0019B4  5E10               	subwf	__div_to_l_@exp1,f,c
  4449  0019B6  500F               	movf	__div_to_l_@cntr,w,c
  4450  0019B8  0FA0               	addlw	160
  4451  0019BA  5E10               	subwf	__div_to_l_@exp1,f,c
  4452  0019BC  0E20               	movlw	32
  4453  0019BE  6E0F               	movwf	__div_to_l_@cntr,c
  4454  0019C0                     l2384:
  4455  0019C0  90D8               	bcf	status,0,c
  4456  0019C2  360B               	rlcf	__div_to_l_@quot,f,c
  4457  0019C4  360C               	rlcf	__div_to_l_@quot+1,f,c
  4458  0019C6  360D               	rlcf	__div_to_l_@quot+2,f,c
  4459  0019C8  360E               	rlcf	__div_to_l_@quot+3,f,c
  4460  0019CA  5004               	movf	__div_to_l_@f2,w,c
  4461  0019CC  5C01               	subwf	__div_to_l_@f1,w,c
  4462  0019CE  5005               	movf	__div_to_l_@f2+1,w,c
  4463  0019D0  5802               	subwfb	__div_to_l_@f1+1,w,c
  4464  0019D2  5006               	movf	__div_to_l_@f2+2,w,c
  4465  0019D4  5803               	subwfb	__div_to_l_@f1+2,w,c
  4466  0019D6  5007               	movf	__div_to_l_@f2+3,w,c
  4467  0019D8  5804               	subwfb	__div_to_l_@f1+3,w,c
  4468  0019DA  A0D8               	btfss	status,0,c
  4469  0019DC  D009               	goto	l2392
  4470  0019DE  5004               	movf	__div_to_l_@f2,w,c
  4471  0019E0  5E01               	subwf	__div_to_l_@f1,f,c
  4472  0019E2  5005               	movf	__div_to_l_@f2+1,w,c
  4473  0019E4  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4474  0019E6  5006               	movf	__div_to_l_@f2+2,w,c
  4475  0019E8  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4476  0019EA  5007               	movf	__div_to_l_@f2+3,w,c
  4477  0019EC  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4478  0019EE  800B               	bsf	__div_to_l_@quot,0,c
  4479  0019F0                     l2392:
  4480  0019F0  90D8               	bcf	status,0,c
  4481  0019F2  3601               	rlcf	__div_to_l_@f1,f,c
  4482  0019F4  3602               	rlcf	__div_to_l_@f1+1,f,c
  4483  0019F6  3603               	rlcf	__div_to_l_@f1+2,f,c
  4484  0019F8  3604               	rlcf	__div_to_l_@f1+3,f,c
  4485  0019FA  2E0F               	decfsz	__div_to_l_@cntr,f,c
  4486  0019FC  D7E1               	goto	l2384
  4487  0019FE  AE10               	btfss	__div_to_l_@exp1,7,c
  4488  001A00  D010               	goto	l2406
  4489  001A02  5010               	movf	__div_to_l_@exp1,w,c
  4490  001A04  0A80               	xorlw	128
  4491  001A06  6E07               	movwf	??__div_to_l_& (0+255),c
  4492  001A08  0EE1               	movlw	225
  4493  001A0A  0A80               	xorlw	128
  4494  001A0C  5C07               	subwf	??__div_to_l_,w,c
  4495  001A0E  A0D8               	btfss	status,0,c
  4496  001A10  D00B               	goto	u2340
  4497  001A12                     l2402:
  4498  001A12  90D8               	bcf	status,0,c
  4499  001A14  320E               	rrcf	__div_to_l_@quot+3,f,c
  4500  001A16  320D               	rrcf	__div_to_l_@quot+2,f,c
  4501  001A18  320C               	rrcf	__div_to_l_@quot+1,f,c
  4502  001A1A  320B               	rrcf	__div_to_l_@quot,f,c
  4503  001A1C  3E10               	incfsz	__div_to_l_@exp1,f,c
  4504  001A1E  D7F9               	goto	l2402
  4505  001A20  D014               	goto	l544
  4506  001A22                     l2406:
  4507  001A22  0E1F               	movlw	31
  4508  001A24  6410               	cpfsgt	__div_to_l_@exp1,c
  4509  001A26  D00F               	goto	l2414
  4510  001A28                     u2340:
  4511  001A28  0E00               	movlw	0
  4512  001A2A  6E01               	movwf	?__div_to_l_,c
  4513  001A2C  0E00               	movlw	0
  4514  001A2E  6E02               	movwf	?__div_to_l_+1,c
  4515  001A30  0E00               	movlw	0
  4516  001A32  6E03               	movwf	?__div_to_l_+2,c
  4517  001A34  0E00               	movlw	0
  4518  001A36  6E04               	movwf	?__div_to_l_+3,c
  4519  001A38  D010               	goto	l535
  4520  001A3A                     l2412:
  4521  001A3A  90D8               	bcf	status,0,c
  4522  001A3C  360B               	rlcf	__div_to_l_@quot,f,c
  4523  001A3E  360C               	rlcf	__div_to_l_@quot+1,f,c
  4524  001A40  360D               	rlcf	__div_to_l_@quot+2,f,c
  4525  001A42  360E               	rlcf	__div_to_l_@quot+3,f,c
  4526  001A44  0610               	decf	__div_to_l_@exp1,f,c
  4527  001A46                     l2414:
  4528  001A46  6610               	tstfsz	__div_to_l_@exp1,c
  4529  001A48  D7F8               	goto	l2412
  4530  001A4A                     l544:
  4531  001A4A  C00B  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4532  001A4E  C00C  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4533  001A52  C00D  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4534  001A56  C00E  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4535  001A5A                     l535:
  4536  001A5A  0012               	return	
  4537  001A5C                     __end_of__div_to_l_:
  4538                           	opt stack 0
  4539                           tblptru	equ	0xFF8
  4540                           tblptrh	equ	0xFF7
  4541                           tblptrl	equ	0xFF6
  4542                           tablat	equ	0xFF5
  4543                           prodh	equ	0xFF4
  4544                           prodl	equ	0xFF3
  4545                           intcon	equ	0xFF2
  4546                           wreg	equ	0xFE8
  4547                           indf2	equ	0xFDF
  4548                           postinc2	equ	0xFDE
  4549                           postdec2	equ	0xFDD
  4550                           fsr2h	equ	0xFDA
  4551                           fsr2l	equ	0xFD9
  4552                           status	equ	0xFD8
  4553                           
  4554 ;; *************** function ___lltoft *****************
  4555 ;; Defined at:
  4556 ;;		line 35 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lltoft.c"
  4557 ;; Parameters:    Size  Location     Type
  4558 ;;  c               4    8[COMRAM] unsigned long 
  4559 ;; Auto vars:     Size  Location     Type
  4560 ;;  exp             1   16[COMRAM] unsigned char 
  4561 ;; Return value:  Size  Location     Type
  4562 ;;                  3    8[COMRAM] float 
  4563 ;; Registers used:
  4564 ;;		wreg, status,2, status,0, cstack
  4565 ;; Tracked objects:
  4566 ;;		On entry : 0/0
  4567 ;;		On exit  : 0/0
  4568 ;;		Unchanged: 0/0
  4569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4570 ;;      Params:         4       0       0       0       0       0       0       0       0
  4571 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4572 ;;      Temps:          4       0       0       0       0       0       0       0       0
  4573 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4574 ;;Total ram usage:        9 bytes
  4575 ;; Hardware stack levels used:    1
  4576 ;; Hardware stack levels required when called:    1
  4577 ;; This function calls:
  4578 ;;		___ftpack
  4579 ;; This function is called by:
  4580 ;;		_sprintf
  4581 ;; This function uses a non-reentrant model
  4582 ;;
  4583                           
  4584                           	psect	text15
  4585  00234E                     __ptext15:
  4586                           	opt stack 0
  4587  00234E                     ___lltoft:
  4588                           	opt stack 26
  4589                           
  4590                           ;incstack = 0
  4591  00234E  0E8E               	movlw	142
  4592  002350  6E11               	movwf	___lltoft@exp,c
  4593  002352  D006               	goto	l2532
  4594  002354                     l2530:
  4595  002354  90D8               	bcf	status,0,c
  4596  002356  320C               	rrcf	___lltoft@c+3,f,c
  4597  002358  320B               	rrcf	___lltoft@c+2,f,c
  4598  00235A  320A               	rrcf	___lltoft@c+1,f,c
  4599  00235C  3209               	rrcf	___lltoft@c,f,c
  4600  00235E  2A11               	incf	___lltoft@exp,f,c
  4601  002360                     l2532:
  4602  002360  0E00               	movlw	0
  4603  002362  1409               	andwf	___lltoft@c,w,c
  4604  002364  6E0D               	movwf	??___lltoft& (0+255),c
  4605  002366  0E00               	movlw	0
  4606  002368  140A               	andwf	___lltoft@c+1,w,c
  4607  00236A  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4608  00236C  0E00               	movlw	0
  4609  00236E  140B               	andwf	___lltoft@c+2,w,c
  4610  002370  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4611  002372  0EFF               	movlw	255
  4612  002374  140C               	andwf	___lltoft@c+3,w,c
  4613  002376  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4614  002378  5010               	movf	??___lltoft+3,w,c
  4615  00237A  100D               	iorwf	??___lltoft,w,c
  4616  00237C  100E               	iorwf	??___lltoft+1,w,c
  4617  00237E  100F               	iorwf	??___lltoft+2,w,c
  4618  002380  A4D8               	btfss	status,2,c
  4619  002382  D7E8               	goto	l2530
  4620  002384  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4621  002388  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4622  00238C  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4623  002390  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4624  002394  0E00               	movlw	0
  4625  002396  6E05               	movwf	___ftpack@sign,c
  4626  002398  EC4B  F00F         	call	___ftpack	;wreg free
  4627  00239C  C001  F009         	movff	?___ftpack,?___lltoft
  4628  0023A0  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4629  0023A4  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4630  0023A8  0012               	return	
  4631  0023AA                     __end_of___lltoft:
  4632                           	opt stack 0
  4633                           tblptru	equ	0xFF8
  4634                           tblptrh	equ	0xFF7
  4635                           tblptrl	equ	0xFF6
  4636                           tablat	equ	0xFF5
  4637                           prodh	equ	0xFF4
  4638                           prodl	equ	0xFF3
  4639                           intcon	equ	0xFF2
  4640                           wreg	equ	0xFE8
  4641                           indf2	equ	0xFDF
  4642                           postinc2	equ	0xFDE
  4643                           postdec2	equ	0xFDD
  4644                           fsr2h	equ	0xFDA
  4645                           fsr2l	equ	0xFD9
  4646                           status	equ	0xFD8
  4647                           
  4648 ;; *************** function ___llmod *****************
  4649 ;; Defined at:
  4650 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\llmod.c"
  4651 ;; Parameters:    Size  Location     Type
  4652 ;;  dividend        4   13[COMRAM] unsigned long 
  4653 ;;  divisor         4   17[COMRAM] unsigned long 
  4654 ;; Auto vars:     Size  Location     Type
  4655 ;;  counter         1   21[COMRAM] unsigned char 
  4656 ;; Return value:  Size  Location     Type
  4657 ;;                  4   13[COMRAM] unsigned long 
  4658 ;; Registers used:
  4659 ;;		wreg, status,2, status,0
  4660 ;; Tracked objects:
  4661 ;;		On entry : 0/0
  4662 ;;		On exit  : 0/0
  4663 ;;		Unchanged: 0/0
  4664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4665 ;;      Params:         8       0       0       0       0       0       0       0       0
  4666 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4667 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4668 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4669 ;;Total ram usage:        9 bytes
  4670 ;; Hardware stack levels used:    1
  4671 ;; This function calls:
  4672 ;;		Nothing
  4673 ;; This function is called by:
  4674 ;;		_sprintf
  4675 ;; This function uses a non-reentrant model
  4676 ;;
  4677                           
  4678                           	psect	text16
  4679  0022E8                     __ptext16:
  4680                           	opt stack 0
  4681  0022E8                     ___llmod:
  4682                           	opt stack 27
  4683                           
  4684                           ;incstack = 0
  4685  0022E8  5015               	movf	___llmod@divisor+3,w,c
  4686  0022EA  1012               	iorwf	___llmod@divisor,w,c
  4687  0022EC  1013               	iorwf	___llmod@divisor+1,w,c
  4688  0022EE  1014               	iorwf	___llmod@divisor+2,w,c
  4689  0022F0  B4D8               	btfsc	status,2,c
  4690  0022F2  D024               	goto	l746
  4691  0022F4  0E01               	movlw	1
  4692  0022F6  6E16               	movwf	___llmod@counter,c
  4693  0022F8  D006               	goto	l2518
  4694  0022FA                     l2516:
  4695  0022FA  90D8               	bcf	status,0,c
  4696  0022FC  3612               	rlcf	___llmod@divisor,f,c
  4697  0022FE  3613               	rlcf	___llmod@divisor+1,f,c
  4698  002300  3614               	rlcf	___llmod@divisor+2,f,c
  4699  002302  3615               	rlcf	___llmod@divisor+3,f,c
  4700  002304  2A16               	incf	___llmod@counter,f,c
  4701  002306                     l2518:
  4702  002306  AE15               	btfss	___llmod@divisor+3,7,c
  4703  002308  D7F8               	goto	l2516
  4704  00230A                     l2520:
  4705  00230A  5012               	movf	___llmod@divisor,w,c
  4706  00230C  5C0E               	subwf	___llmod@dividend,w,c
  4707  00230E  5013               	movf	___llmod@divisor+1,w,c
  4708  002310  580F               	subwfb	___llmod@dividend+1,w,c
  4709  002312  5014               	movf	___llmod@divisor+2,w,c
  4710  002314  5810               	subwfb	___llmod@dividend+2,w,c
  4711  002316  5015               	movf	___llmod@divisor+3,w,c
  4712  002318  5811               	subwfb	___llmod@dividend+3,w,c
  4713  00231A  A0D8               	btfss	status,0,c
  4714  00231C  D008               	goto	l2524
  4715  00231E  5012               	movf	___llmod@divisor,w,c
  4716  002320  5E0E               	subwf	___llmod@dividend,f,c
  4717  002322  5013               	movf	___llmod@divisor+1,w,c
  4718  002324  5A0F               	subwfb	___llmod@dividend+1,f,c
  4719  002326  5014               	movf	___llmod@divisor+2,w,c
  4720  002328  5A10               	subwfb	___llmod@dividend+2,f,c
  4721  00232A  5015               	movf	___llmod@divisor+3,w,c
  4722  00232C  5A11               	subwfb	___llmod@dividend+3,f,c
  4723  00232E                     l2524:
  4724  00232E  90D8               	bcf	status,0,c
  4725  002330  3215               	rrcf	___llmod@divisor+3,f,c
  4726  002332  3214               	rrcf	___llmod@divisor+2,f,c
  4727  002334  3213               	rrcf	___llmod@divisor+1,f,c
  4728  002336  3212               	rrcf	___llmod@divisor,f,c
  4729  002338  2E16               	decfsz	___llmod@counter,f,c
  4730  00233A  D7E7               	goto	l2520
  4731  00233C                     l746:
  4732  00233C  C00E  F00E         	movff	___llmod@dividend,?___llmod
  4733  002340  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  4734  002344  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  4735  002348  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  4736  00234C  0012               	return	
  4737  00234E                     __end_of___llmod:
  4738                           	opt stack 0
  4739                           tblptru	equ	0xFF8
  4740                           tblptrh	equ	0xFF7
  4741                           tblptrl	equ	0xFF6
  4742                           tablat	equ	0xFF5
  4743                           prodh	equ	0xFF4
  4744                           prodl	equ	0xFF3
  4745                           intcon	equ	0xFF2
  4746                           wreg	equ	0xFE8
  4747                           indf2	equ	0xFDF
  4748                           postinc2	equ	0xFDE
  4749                           postdec2	equ	0xFDD
  4750                           fsr2h	equ	0xFDA
  4751                           fsr2l	equ	0xFD9
  4752                           status	equ	0xFD8
  4753                           
  4754 ;; *************** function ___lldiv *****************
  4755 ;; Defined at:
  4756 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\lldiv.c"
  4757 ;; Parameters:    Size  Location     Type
  4758 ;;  dividend        4    0[COMRAM] unsigned long 
  4759 ;;  divisor         4    4[COMRAM] unsigned long 
  4760 ;; Auto vars:     Size  Location     Type
  4761 ;;  quotient        4    8[COMRAM] unsigned long 
  4762 ;;  counter         1   12[COMRAM] unsigned char 
  4763 ;; Return value:  Size  Location     Type
  4764 ;;                  4    0[COMRAM] unsigned long 
  4765 ;; Registers used:
  4766 ;;		wreg, status,2, status,0
  4767 ;; Tracked objects:
  4768 ;;		On entry : 0/0
  4769 ;;		On exit  : 0/0
  4770 ;;		Unchanged: 0/0
  4771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4772 ;;      Params:         8       0       0       0       0       0       0       0       0
  4773 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4774 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4775 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4776 ;;Total ram usage:       13 bytes
  4777 ;; Hardware stack levels used:    1
  4778 ;; This function calls:
  4779 ;;		Nothing
  4780 ;; This function is called by:
  4781 ;;		_sprintf
  4782 ;; This function uses a non-reentrant model
  4783 ;;
  4784                           
  4785                           	psect	text17
  4786  002102                     __ptext17:
  4787                           	opt stack 0
  4788  002102                     ___lldiv:
  4789                           	opt stack 27
  4790                           
  4791                           ;incstack = 0
  4792  002102  0E00               	movlw	0
  4793  002104  6E09               	movwf	___lldiv@quotient,c
  4794  002106  0E00               	movlw	0
  4795  002108  6E0A               	movwf	___lldiv@quotient+1,c
  4796  00210A  0E00               	movlw	0
  4797  00210C  6E0B               	movwf	___lldiv@quotient+2,c
  4798  00210E  0E00               	movlw	0
  4799  002110  6E0C               	movwf	___lldiv@quotient+3,c
  4800  002112  5008               	movf	___lldiv@divisor+3,w,c
  4801  002114  1005               	iorwf	___lldiv@divisor,w,c
  4802  002116  1006               	iorwf	___lldiv@divisor+1,w,c
  4803  002118  1007               	iorwf	___lldiv@divisor+2,w,c
  4804  00211A  B4D8               	btfsc	status,2,c
  4805  00211C  D02A               	goto	l736
  4806  00211E  0E01               	movlw	1
  4807  002120  6E0D               	movwf	___lldiv@counter,c
  4808  002122  D006               	goto	l2498
  4809  002124                     l2496:
  4810  002124  90D8               	bcf	status,0,c
  4811  002126  3605               	rlcf	___lldiv@divisor,f,c
  4812  002128  3606               	rlcf	___lldiv@divisor+1,f,c
  4813  00212A  3607               	rlcf	___lldiv@divisor+2,f,c
  4814  00212C  3608               	rlcf	___lldiv@divisor+3,f,c
  4815  00212E  2A0D               	incf	___lldiv@counter,f,c
  4816  002130                     l2498:
  4817  002130  AE08               	btfss	___lldiv@divisor+3,7,c
  4818  002132  D7F8               	goto	l2496
  4819  002134                     l2500:
  4820  002134  90D8               	bcf	status,0,c
  4821  002136  3609               	rlcf	___lldiv@quotient,f,c
  4822  002138  360A               	rlcf	___lldiv@quotient+1,f,c
  4823  00213A  360B               	rlcf	___lldiv@quotient+2,f,c
  4824  00213C  360C               	rlcf	___lldiv@quotient+3,f,c
  4825  00213E  5005               	movf	___lldiv@divisor,w,c
  4826  002140  5C01               	subwf	___lldiv@dividend,w,c
  4827  002142  5006               	movf	___lldiv@divisor+1,w,c
  4828  002144  5802               	subwfb	___lldiv@dividend+1,w,c
  4829  002146  5007               	movf	___lldiv@divisor+2,w,c
  4830  002148  5803               	subwfb	___lldiv@dividend+2,w,c
  4831  00214A  5008               	movf	___lldiv@divisor+3,w,c
  4832  00214C  5804               	subwfb	___lldiv@dividend+3,w,c
  4833  00214E  A0D8               	btfss	status,0,c
  4834  002150  D009               	goto	l2508
  4835  002152  5005               	movf	___lldiv@divisor,w,c
  4836  002154  5E01               	subwf	___lldiv@dividend,f,c
  4837  002156  5006               	movf	___lldiv@divisor+1,w,c
  4838  002158  5A02               	subwfb	___lldiv@dividend+1,f,c
  4839  00215A  5007               	movf	___lldiv@divisor+2,w,c
  4840  00215C  5A03               	subwfb	___lldiv@dividend+2,f,c
  4841  00215E  5008               	movf	___lldiv@divisor+3,w,c
  4842  002160  5A04               	subwfb	___lldiv@dividend+3,f,c
  4843  002162  8009               	bsf	___lldiv@quotient,0,c
  4844  002164                     l2508:
  4845  002164  90D8               	bcf	status,0,c
  4846  002166  3208               	rrcf	___lldiv@divisor+3,f,c
  4847  002168  3207               	rrcf	___lldiv@divisor+2,f,c
  4848  00216A  3206               	rrcf	___lldiv@divisor+1,f,c
  4849  00216C  3205               	rrcf	___lldiv@divisor,f,c
  4850  00216E  2E0D               	decfsz	___lldiv@counter,f,c
  4851  002170  D7E1               	goto	l2500
  4852  002172                     l736:
  4853  002172  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4854  002176  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4855  00217A  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4856  00217E  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4857  002182  0012               	return	
  4858  002184                     __end_of___lldiv:
  4859                           	opt stack 0
  4860                           tblptru	equ	0xFF8
  4861                           tblptrh	equ	0xFF7
  4862                           tblptrl	equ	0xFF6
  4863                           tablat	equ	0xFF5
  4864                           prodh	equ	0xFF4
  4865                           prodl	equ	0xFF3
  4866                           intcon	equ	0xFF2
  4867                           wreg	equ	0xFE8
  4868                           indf2	equ	0xFDF
  4869                           postinc2	equ	0xFDE
  4870                           postdec2	equ	0xFDD
  4871                           fsr2h	equ	0xFDA
  4872                           fsr2l	equ	0xFD9
  4873                           status	equ	0xFD8
  4874                           
  4875 ;; *************** function ___fttol *****************
  4876 ;; Defined at:
  4877 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\fttol.c"
  4878 ;; Parameters:    Size  Location     Type
  4879 ;;  f1              3   42[COMRAM] float 
  4880 ;; Auto vars:     Size  Location     Type
  4881 ;;  lval            4   52[COMRAM] unsigned long 
  4882 ;;  exp1            1   56[COMRAM] unsigned char 
  4883 ;;  sign1           1   51[COMRAM] unsigned char 
  4884 ;; Return value:  Size  Location     Type
  4885 ;;                  4   42[COMRAM] long 
  4886 ;; Registers used:
  4887 ;;		wreg, status,2, status,0
  4888 ;; Tracked objects:
  4889 ;;		On entry : 0/0
  4890 ;;		On exit  : 0/0
  4891 ;;		Unchanged: 0/0
  4892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4893 ;;      Params:         4       0       0       0       0       0       0       0       0
  4894 ;;      Locals:         6       0       0       0       0       0       0       0       0
  4895 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4896 ;;      Totals:        15       0       0       0       0       0       0       0       0
  4897 ;;Total ram usage:       15 bytes
  4898 ;; Hardware stack levels used:    1
  4899 ;; This function calls:
  4900 ;;		Nothing
  4901 ;; This function is called by:
  4902 ;;		_sprintf
  4903 ;; This function uses a non-reentrant model
  4904 ;;
  4905                           
  4906                           	psect	text18
  4907  001C40                     __ptext18:
  4908                           	opt stack 0
  4909  001C40                     ___fttol:
  4910                           	opt stack 27
  4911                           
  4912                           ;incstack = 0
  4913  001C40  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  4914  001C44  6A30               	clrf	(??___fttol+1)& (0+255),c
  4915  001C46  6A31               	clrf	(??___fttol+2)& (0+255),c
  4916  001C48  342C               	rlcf	___fttol@f1+1,w,c
  4917  001C4A  362F               	rlcf	??___fttol& (0+255),f,c
  4918  001C4C  E301               	bnc	u2401
  4919  001C4E  8030               	bsf	(??___fttol+1)& (0+255),0,c
  4920  001C50                     u2401:
  4921  001C50  502F               	movf	??___fttol,w,c
  4922  001C52  6E39               	movwf	___fttol@exp1,c
  4923  001C54  6639               	tstfsz	___fttol@exp1& (0+255),c
  4924  001C56  D001               	goto	l2450
  4925  001C58  D038               	goto	u2450
  4926  001C5A                     l2450:
  4927  001C5A  0E17               	movlw	23
  4928  001C5C  6E2F               	movwf	??___fttol& (0+255),c
  4929  001C5E  C02B  F030         	movff	___fttol@f1,??___fttol+1
  4930  001C62  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  4931  001C66  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  4932  001C6A  282F               	incf	??___fttol,w,c
  4933  001C6C  6E33               	movwf	(??___fttol+4)& (0+255),c
  4934  001C6E  D004               	goto	u2420
  4935  001C70                     u2425:
  4936  001C70  90D8               	bcf	status,0,c
  4937  001C72  3232               	rrcf	??___fttol+3,f,c
  4938  001C74  3231               	rrcf	??___fttol+2,f,c
  4939  001C76  3230               	rrcf	??___fttol+1,f,c
  4940  001C78                     u2420:
  4941  001C78  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  4942  001C7A  D7FA               	goto	u2425
  4943  001C7C  5030               	movf	??___fttol+1,w,c
  4944  001C7E  6E34               	movwf	___fttol@sign1,c
  4945  001C80  8E2C               	bsf	___fttol@f1+1,7,c
  4946  001C82  0EFF               	movlw	255
  4947  001C84  162B               	andwf	___fttol@f1,f,c
  4948  001C86  0EFF               	movlw	255
  4949  001C88  162C               	andwf	___fttol@f1+1,f,c
  4950  001C8A  0E00               	movlw	0
  4951  001C8C  162D               	andwf	___fttol@f1+2,f,c
  4952  001C8E  502B               	movf	___fttol@f1,w,c
  4953  001C90  6E35               	movwf	___fttol@lval,c
  4954  001C92  502C               	movf	___fttol@f1+1,w,c
  4955  001C94  6E36               	movwf	___fttol@lval+1,c
  4956  001C96  502D               	movf	___fttol@f1+2,w,c
  4957  001C98  6E37               	movwf	___fttol@lval+2,c
  4958  001C9A  6A38               	clrf	___fttol@lval+3,c
  4959  001C9C  0E8E               	movlw	142
  4960  001C9E  5E39               	subwf	___fttol@exp1,f,c
  4961  001CA0  AE39               	btfss	___fttol@exp1,7,c
  4962  001CA2  D010               	goto	l2472
  4963  001CA4  5039               	movf	___fttol@exp1,w,c
  4964  001CA6  0A80               	xorlw	128
  4965  001CA8  6E2F               	movwf	??___fttol& (0+255),c
  4966  001CAA  0EF1               	movlw	241
  4967  001CAC  0A80               	xorlw	128
  4968  001CAE  5C2F               	subwf	??___fttol,w,c
  4969  001CB0  A0D8               	btfss	status,0,c
  4970  001CB2  D00B               	goto	u2450
  4971  001CB4                     l2468:
  4972  001CB4  90D8               	bcf	status,0,c
  4973  001CB6  3238               	rrcf	___fttol@lval+3,f,c
  4974  001CB8  3237               	rrcf	___fttol@lval+2,f,c
  4975  001CBA  3236               	rrcf	___fttol@lval+1,f,c
  4976  001CBC  3235               	rrcf	___fttol@lval,f,c
  4977  001CBE  3E39               	incfsz	___fttol@exp1,f,c
  4978  001CC0  D7F9               	goto	l2468
  4979  001CC2  D014               	goto	l2482
  4980  001CC4                     l2472:
  4981  001CC4  0E17               	movlw	23
  4982  001CC6  6439               	cpfsgt	___fttol@exp1,c
  4983  001CC8  D00F               	goto	l2480
  4984  001CCA                     u2450:
  4985  001CCA  0E00               	movlw	0
  4986  001CCC  6E2B               	movwf	?___fttol,c
  4987  001CCE  0E00               	movlw	0
  4988  001CD0  6E2C               	movwf	?___fttol+1,c
  4989  001CD2  0E00               	movlw	0
  4990  001CD4  6E2D               	movwf	?___fttol+2,c
  4991  001CD6  0E00               	movlw	0
  4992  001CD8  6E2E               	movwf	?___fttol+3,c
  4993  001CDA  D01B               	goto	l697
  4994  001CDC                     l2478:
  4995  001CDC  90D8               	bcf	status,0,c
  4996  001CDE  3635               	rlcf	___fttol@lval,f,c
  4997  001CE0  3636               	rlcf	___fttol@lval+1,f,c
  4998  001CE2  3637               	rlcf	___fttol@lval+2,f,c
  4999  001CE4  3638               	rlcf	___fttol@lval+3,f,c
  5000  001CE6  0639               	decf	___fttol@exp1,f,c
  5001  001CE8                     l2480:
  5002  001CE8  6639               	tstfsz	___fttol@exp1,c
  5003  001CEA  D7F8               	goto	l2478
  5004  001CEC                     l2482:
  5005  001CEC  5034               	movf	___fttol@sign1,w,c
  5006  001CEE  B4D8               	btfsc	status,2,c
  5007  001CF0  D008               	goto	l2486
  5008  001CF2  1E38               	comf	___fttol@lval+3,f,c
  5009  001CF4  1E37               	comf	___fttol@lval+2,f,c
  5010  001CF6  1E36               	comf	___fttol@lval+1,f,c
  5011  001CF8  6C35               	negf	___fttol@lval,c
  5012  001CFA  0E00               	movlw	0
  5013  001CFC  2236               	addwfc	___fttol@lval+1,f,c
  5014  001CFE  2237               	addwfc	___fttol@lval+2,f,c
  5015  001D00  2238               	addwfc	___fttol@lval+3,f,c
  5016  001D02                     l2486:
  5017  001D02  C035  F02B         	movff	___fttol@lval,?___fttol
  5018  001D06  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  5019  001D0A  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  5020  001D0E  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  5021  001D12                     l697:
  5022  001D12  0012               	return	
  5023  001D14                     __end_of___fttol:
  5024                           	opt stack 0
  5025                           tblptru	equ	0xFF8
  5026                           tblptrh	equ	0xFF7
  5027                           tblptrl	equ	0xFF6
  5028                           tablat	equ	0xFF5
  5029                           prodh	equ	0xFF4
  5030                           prodl	equ	0xFF3
  5031                           intcon	equ	0xFF2
  5032                           wreg	equ	0xFE8
  5033                           indf2	equ	0xFDF
  5034                           postinc2	equ	0xFDE
  5035                           postdec2	equ	0xFDD
  5036                           fsr2h	equ	0xFDA
  5037                           fsr2l	equ	0xFD9
  5038                           status	equ	0xFD8
  5039                           
  5040 ;; *************** function ___ftsub *****************
  5041 ;; Defined at:
  5042 ;;		line 20 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftsub.c"
  5043 ;; Parameters:    Size  Location     Type
  5044 ;;  f1              3   57[COMRAM] float 
  5045 ;;  f2              3   60[COMRAM] float 
  5046 ;; Auto vars:     Size  Location     Type
  5047 ;;		None
  5048 ;; Return value:  Size  Location     Type
  5049 ;;                  3   57[COMRAM] float 
  5050 ;; Registers used:
  5051 ;;		wreg, status,2, status,0, cstack
  5052 ;; Tracked objects:
  5053 ;;		On entry : 0/0
  5054 ;;		On exit  : 0/0
  5055 ;;		Unchanged: 0/0
  5056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5057 ;;      Params:         6       0       0       0       0       0       0       0       0
  5058 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5059 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5060 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5061 ;;Total ram usage:        6 bytes
  5062 ;; Hardware stack levels used:    1
  5063 ;; Hardware stack levels required when called:    2
  5064 ;; This function calls:
  5065 ;;		___ftadd
  5066 ;; This function is called by:
  5067 ;;		_sprintf
  5068 ;; This function uses a non-reentrant model
  5069 ;;
  5070                           
  5071                           	psect	text19
  5072  00247A                     __ptext19:
  5073                           	opt stack 0
  5074  00247A                     ___ftsub:
  5075                           	opt stack 25
  5076                           
  5077                           ;incstack = 0
  5078  00247A  0E00               	movlw	0
  5079  00247C  1A3D               	xorwf	___ftsub@f2,f,c
  5080  00247E  0E00               	movlw	0
  5081  002480  1A3E               	xorwf	___ftsub@f2+1,f,c
  5082  002482  0E80               	movlw	128
  5083  002484  1A3F               	xorwf	___ftsub@f2+2,f,c
  5084  002486  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  5085  00248A  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  5086  00248E  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  5087  002492  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  5088  002496  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  5089  00249A  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  5090  00249E  ECBD  F00B         	call	___ftadd	;wreg free
  5091  0024A2  C02E  F03A         	movff	?___ftadd,?___ftsub
  5092  0024A6  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  5093  0024AA  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  5094  0024AE  0012               	return	
  5095  0024B0                     __end_of___ftsub:
  5096                           	opt stack 0
  5097                           tblptru	equ	0xFF8
  5098                           tblptrh	equ	0xFF7
  5099                           tblptrl	equ	0xFF6
  5100                           tablat	equ	0xFF5
  5101                           prodh	equ	0xFF4
  5102                           prodl	equ	0xFF3
  5103                           intcon	equ	0xFF2
  5104                           wreg	equ	0xFE8
  5105                           indf2	equ	0xFDF
  5106                           postinc2	equ	0xFDE
  5107                           postdec2	equ	0xFDD
  5108                           fsr2h	equ	0xFDA
  5109                           fsr2l	equ	0xFD9
  5110                           status	equ	0xFD8
  5111                           
  5112 ;; *************** function ___ftadd *****************
  5113 ;; Defined at:
  5114 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftadd.c"
  5115 ;; Parameters:    Size  Location     Type
  5116 ;;  f1              3   45[COMRAM] float 
  5117 ;;  f2              3   48[COMRAM] float 
  5118 ;; Auto vars:     Size  Location     Type
  5119 ;;  exp1            1   56[COMRAM] unsigned char 
  5120 ;;  exp2            1   55[COMRAM] unsigned char 
  5121 ;;  sign            1   54[COMRAM] unsigned char 
  5122 ;; Return value:  Size  Location     Type
  5123 ;;                  3   45[COMRAM] float 
  5124 ;; Registers used:
  5125 ;;		wreg, status,2, status,0, cstack
  5126 ;; Tracked objects:
  5127 ;;		On entry : 0/0
  5128 ;;		On exit  : 0/0
  5129 ;;		Unchanged: 0/0
  5130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5131 ;;      Params:         6       0       0       0       0       0       0       0       0
  5132 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5133 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5134 ;;      Totals:        12       0       0       0       0       0       0       0       0
  5135 ;;Total ram usage:       12 bytes
  5136 ;; Hardware stack levels used:    1
  5137 ;; Hardware stack levels required when called:    1
  5138 ;; This function calls:
  5139 ;;		___ftpack
  5140 ;; This function is called by:
  5141 ;;		_sprintf
  5142 ;;		___ftsub
  5143 ;; This function uses a non-reentrant model
  5144 ;;
  5145                           
  5146                           	psect	text20
  5147  00177A                     __ptext20:
  5148                           	opt stack 0
  5149  00177A                     ___ftadd:
  5150                           	opt stack 25
  5151                           
  5152                           ;incstack = 0
  5153  00177A  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  5154  00177E  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5155  001780  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5156  001782  342F               	rlcf	___ftadd@f1+1,w,c
  5157  001784  3634               	rlcf	??___ftadd& (0+255),f,c
  5158  001786  E301               	bnc	u1721
  5159  001788  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5160  00178A                     u1721:
  5161  00178A  5034               	movf	??___ftadd,w,c
  5162  00178C  6E39               	movwf	___ftadd@exp1,c
  5163  00178E  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  5164  001792  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5165  001794  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5166  001796  3432               	rlcf	___ftadd@f2+1,w,c
  5167  001798  3634               	rlcf	??___ftadd& (0+255),f,c
  5168  00179A  E301               	bnc	u1731
  5169  00179C  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5170  00179E                     u1731:
  5171  00179E  5034               	movf	??___ftadd,w,c
  5172  0017A0  6E38               	movwf	___ftadd@exp2,c
  5173  0017A2  5039               	movf	___ftadd@exp1,w,c
  5174  0017A4  B4D8               	btfsc	status,2,c
  5175  0017A6  D00C               	goto	l613
  5176  0017A8  5038               	movf	___ftadd@exp2,w,c
  5177  0017AA  5C39               	subwf	___ftadd@exp1,w,c
  5178  0017AC  B0D8               	btfsc	status,0,c
  5179  0017AE  D00F               	goto	l2034
  5180  0017B0  5039               	movf	___ftadd@exp1,w,c
  5181  0017B2  0800               	sublw	0
  5182  0017B4  2438               	addwf	___ftadd@exp2,w,c
  5183  0017B6  6E34               	movwf	??___ftadd& (0+255),c
  5184  0017B8  0E19               	movlw	25
  5185  0017BA  5C34               	subwf	??___ftadd,w,c
  5186  0017BC  A0D8               	btfss	status,0,c
  5187  0017BE  D007               	goto	l2034
  5188  0017C0                     l613:
  5189  0017C0  C031  F02E         	movff	___ftadd@f2,?___ftadd
  5190  0017C4  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  5191  0017C8  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  5192  0017CC  D0AB               	goto	l614
  5193  0017CE                     l2034:
  5194  0017CE  5038               	movf	___ftadd@exp2,w,c
  5195  0017D0  B4D8               	btfsc	status,2,c
  5196  0017D2  D00C               	goto	l617
  5197  0017D4  5039               	movf	___ftadd@exp1,w,c
  5198  0017D6  5C38               	subwf	___ftadd@exp2,w,c
  5199  0017D8  B0D8               	btfsc	status,0,c
  5200  0017DA  D00F               	goto	l2040
  5201  0017DC  5038               	movf	___ftadd@exp2,w,c
  5202  0017DE  0800               	sublw	0
  5203  0017E0  2439               	addwf	___ftadd@exp1,w,c
  5204  0017E2  6E34               	movwf	??___ftadd& (0+255),c
  5205  0017E4  0E19               	movlw	25
  5206  0017E6  5C34               	subwf	??___ftadd,w,c
  5207  0017E8  A0D8               	btfss	status,0,c
  5208  0017EA  D007               	goto	l2040
  5209  0017EC                     l617:
  5210  0017EC  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  5211  0017F0  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  5212  0017F4  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  5213  0017F8  D095               	goto	l614
  5214  0017FA                     l2040:
  5215  0017FA  0E06               	movlw	6
  5216  0017FC  6E37               	movwf	___ftadd@sign,c
  5217  0017FE  BE30               	btfsc	___ftadd@f1+2,7,c
  5218  001800  8E37               	bsf	___ftadd@sign,7,c
  5219  001802  BE33               	btfsc	___ftadd@f2+2,7,c
  5220  001804  8C37               	bsf	___ftadd@sign,6,c
  5221  001806  8E2F               	bsf	___ftadd@f1+1,7,c
  5222  001808  0EFF               	movlw	255
  5223  00180A  162E               	andwf	___ftadd@f1,f,c
  5224  00180C  0EFF               	movlw	255
  5225  00180E  162F               	andwf	___ftadd@f1+1,f,c
  5226  001810  0E00               	movlw	0
  5227  001812  1630               	andwf	___ftadd@f1+2,f,c
  5228  001814  8E32               	bsf	___ftadd@f2+1,7,c
  5229  001816  0EFF               	movlw	255
  5230  001818  1631               	andwf	___ftadd@f2,f,c
  5231  00181A  0EFF               	movlw	255
  5232  00181C  1632               	andwf	___ftadd@f2+1,f,c
  5233  00181E  0E00               	movlw	0
  5234  001820  1633               	andwf	___ftadd@f2+2,f,c
  5235  001822  5038               	movf	___ftadd@exp2,w,c
  5236  001824  5C39               	subwf	___ftadd@exp1,w,c
  5237  001826  B0D8               	btfsc	status,0,c
  5238  001828  D01A               	goto	l2066
  5239  00182A                     l2056:
  5240  00182A  90D8               	bcf	status,0,c
  5241  00182C  3631               	rlcf	___ftadd@f2,f,c
  5242  00182E  3632               	rlcf	___ftadd@f2+1,f,c
  5243  001830  3633               	rlcf	___ftadd@f2+2,f,c
  5244  001832  0638               	decf	___ftadd@exp2,f,c
  5245  001834  5038               	movf	___ftadd@exp2,w,c
  5246  001836  1839               	xorwf	___ftadd@exp1,w,c
  5247  001838  B4D8               	btfsc	status,2,c
  5248  00183A  D00D               	goto	l2064
  5249  00183C  0637               	decf	___ftadd@sign,f,c
  5250  00183E  C037  F034         	movff	___ftadd@sign,??___ftadd
  5251  001842  0E07               	movlw	7
  5252  001844  1634               	andwf	??___ftadd,f,c
  5253  001846  B4D8               	btfsc	status,2,c
  5254  001848  D006               	goto	l2064
  5255  00184A  D7EF               	goto	l2056
  5256  00184C                     l2062:
  5257  00184C  90D8               	bcf	status,0,c
  5258  00184E  3230               	rrcf	___ftadd@f1+2,f,c
  5259  001850  322F               	rrcf	___ftadd@f1+1,f,c
  5260  001852  322E               	rrcf	___ftadd@f1,f,c
  5261  001854  2A39               	incf	___ftadd@exp1,f,c
  5262  001856                     l2064:
  5263  001856  5038               	movf	___ftadd@exp2,w,c
  5264  001858  6239               	cpfseq	___ftadd@exp1,c
  5265  00185A  D7F8               	goto	l2062
  5266  00185C  D01D               	goto	l628
  5267  00185E                     l2066:
  5268  00185E  5039               	movf	___ftadd@exp1,w,c
  5269  001860  5C38               	subwf	___ftadd@exp2,w,c
  5270  001862  B0D8               	btfsc	status,0,c
  5271  001864  D019               	goto	l628
  5272  001866                     l2068:
  5273  001866  90D8               	bcf	status,0,c
  5274  001868  362E               	rlcf	___ftadd@f1,f,c
  5275  00186A  362F               	rlcf	___ftadd@f1+1,f,c
  5276  00186C  3630               	rlcf	___ftadd@f1+2,f,c
  5277  00186E  0639               	decf	___ftadd@exp1,f,c
  5278  001870  5038               	movf	___ftadd@exp2,w,c
  5279  001872  1839               	xorwf	___ftadd@exp1,w,c
  5280  001874  B4D8               	btfsc	status,2,c
  5281  001876  D00D               	goto	l2076
  5282  001878  0637               	decf	___ftadd@sign,f,c
  5283  00187A  C037  F034         	movff	___ftadd@sign,??___ftadd
  5284  00187E  0E07               	movlw	7
  5285  001880  1634               	andwf	??___ftadd,f,c
  5286  001882  B4D8               	btfsc	status,2,c
  5287  001884  D006               	goto	l2076
  5288  001886  D7EF               	goto	l2068
  5289  001888                     l2074:
  5290  001888  90D8               	bcf	status,0,c
  5291  00188A  3233               	rrcf	___ftadd@f2+2,f,c
  5292  00188C  3232               	rrcf	___ftadd@f2+1,f,c
  5293  00188E  3231               	rrcf	___ftadd@f2,f,c
  5294  001890  2A38               	incf	___ftadd@exp2,f,c
  5295  001892                     l2076:
  5296  001892  5038               	movf	___ftadd@exp2,w,c
  5297  001894  6239               	cpfseq	___ftadd@exp1,c
  5298  001896  D7F8               	goto	l2074
  5299  001898                     l628:
  5300  001898  AE37               	btfss	___ftadd@sign,7,c
  5301  00189A  D00C               	goto	l637
  5302  00189C  0EFF               	movlw	255
  5303  00189E  1A2E               	xorwf	___ftadd@f1,f,c
  5304  0018A0  0EFF               	movlw	255
  5305  0018A2  1A2F               	xorwf	___ftadd@f1+1,f,c
  5306  0018A4  0EFF               	movlw	255
  5307  0018A6  1A30               	xorwf	___ftadd@f1+2,f,c
  5308  0018A8  0E01               	movlw	1
  5309  0018AA  262E               	addwf	___ftadd@f1,f,c
  5310  0018AC  0E00               	movlw	0
  5311  0018AE  222F               	addwfc	___ftadd@f1+1,f,c
  5312  0018B0  0E00               	movlw	0
  5313  0018B2  2230               	addwfc	___ftadd@f1+2,f,c
  5314  0018B4                     l637:
  5315  0018B4  AC37               	btfss	___ftadd@sign,6,c
  5316  0018B6  D00C               	goto	l2082
  5317  0018B8  0EFF               	movlw	255
  5318  0018BA  1A31               	xorwf	___ftadd@f2,f,c
  5319  0018BC  0EFF               	movlw	255
  5320  0018BE  1A32               	xorwf	___ftadd@f2+1,f,c
  5321  0018C0  0EFF               	movlw	255
  5322  0018C2  1A33               	xorwf	___ftadd@f2+2,f,c
  5323  0018C4  0E01               	movlw	1
  5324  0018C6  2631               	addwf	___ftadd@f2,f,c
  5325  0018C8  0E00               	movlw	0
  5326  0018CA  2232               	addwfc	___ftadd@f2+1,f,c
  5327  0018CC  0E00               	movlw	0
  5328  0018CE  2233               	addwfc	___ftadd@f2+2,f,c
  5329  0018D0                     l2082:
  5330  0018D0  0E00               	movlw	0
  5331  0018D2  6E37               	movwf	___ftadd@sign,c
  5332  0018D4  502E               	movf	___ftadd@f1,w,c
  5333  0018D6  2631               	addwf	___ftadd@f2,f,c
  5334  0018D8  502F               	movf	___ftadd@f1+1,w,c
  5335  0018DA  2232               	addwfc	___ftadd@f2+1,f,c
  5336  0018DC  5030               	movf	___ftadd@f1+2,w,c
  5337  0018DE  2233               	addwfc	___ftadd@f2+2,f,c
  5338  0018E0  AE33               	btfss	___ftadd@f2+2,7,c
  5339  0018E2  D00E               	goto	l2092
  5340  0018E4  0EFF               	movlw	255
  5341  0018E6  1A31               	xorwf	___ftadd@f2,f,c
  5342  0018E8  0EFF               	movlw	255
  5343  0018EA  1A32               	xorwf	___ftadd@f2+1,f,c
  5344  0018EC  0EFF               	movlw	255
  5345  0018EE  1A33               	xorwf	___ftadd@f2+2,f,c
  5346  0018F0  0E01               	movlw	1
  5347  0018F2  2631               	addwf	___ftadd@f2,f,c
  5348  0018F4  0E00               	movlw	0
  5349  0018F6  2232               	addwfc	___ftadd@f2+1,f,c
  5350  0018F8  0E00               	movlw	0
  5351  0018FA  2233               	addwfc	___ftadd@f2+2,f,c
  5352  0018FC  0E01               	movlw	1
  5353  0018FE  6E37               	movwf	___ftadd@sign,c
  5354  001900                     l2092:
  5355  001900  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  5356  001904  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5357  001908  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5358  00190C  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  5359  001910  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  5360  001914  EC4B  F00F         	call	___ftpack	;wreg free
  5361  001918  C001  F02E         	movff	?___ftpack,?___ftadd
  5362  00191C  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  5363  001920  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  5364  001924                     l614:
  5365  001924  0012               	return	
  5366  001926                     __end_of___ftadd:
  5367                           	opt stack 0
  5368                           tblptru	equ	0xFF8
  5369                           tblptrh	equ	0xFF7
  5370                           tblptrl	equ	0xFF6
  5371                           tablat	equ	0xFF5
  5372                           prodh	equ	0xFF4
  5373                           prodl	equ	0xFF3
  5374                           intcon	equ	0xFF2
  5375                           wreg	equ	0xFE8
  5376                           indf2	equ	0xFDF
  5377                           postinc2	equ	0xFDE
  5378                           postdec2	equ	0xFDD
  5379                           fsr2h	equ	0xFDA
  5380                           fsr2l	equ	0xFD9
  5381                           status	equ	0xFD8
  5382                           
  5383 ;; *************** function ___ftpack *****************
  5384 ;; Defined at:
  5385 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\float.c"
  5386 ;; Parameters:    Size  Location     Type
  5387 ;;  arg             3    0[COMRAM] unsigned um
  5388 ;;  exp             1    3[COMRAM] unsigned char 
  5389 ;;  sign            1    4[COMRAM] unsigned char 
  5390 ;; Auto vars:     Size  Location     Type
  5391 ;;		None
  5392 ;; Return value:  Size  Location     Type
  5393 ;;                  3    0[COMRAM] float 
  5394 ;; Registers used:
  5395 ;;		wreg, status,2, status,0
  5396 ;; Tracked objects:
  5397 ;;		On entry : 0/0
  5398 ;;		On exit  : 0/0
  5399 ;;		Unchanged: 0/0
  5400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5401 ;;      Params:         5       0       0       0       0       0       0       0       0
  5402 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5403 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5404 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5405 ;;Total ram usage:        8 bytes
  5406 ;; Hardware stack levels used:    1
  5407 ;; This function calls:
  5408 ;;		Nothing
  5409 ;; This function is called by:
  5410 ;;		___ftadd
  5411 ;;		___ftmul
  5412 ;;		___lltoft
  5413 ;; This function uses a non-reentrant model
  5414 ;;
  5415                           
  5416                           	psect	text21
  5417  001E96                     __ptext21:
  5418                           	opt stack 0
  5419  001E96                     ___ftpack:
  5420                           	opt stack 25
  5421                           
  5422                           ;incstack = 0
  5423  001E96  5004               	movf	___ftpack@exp,w,c
  5424  001E98  B4D8               	btfsc	status,2,c
  5425  001E9A  D005               	goto	l1974
  5426  001E9C  5001               	movf	___ftpack@arg,w,c
  5427  001E9E  1002               	iorwf	___ftpack@arg+1,w,c
  5428  001EA0  1003               	iorwf	___ftpack@arg+2,w,c
  5429  001EA2  A4D8               	btfss	status,2,c
  5430  001EA4  D00C               	goto	l1980
  5431  001EA6                     l1974:
  5432  001EA6  0E00               	movlw	0
  5433  001EA8  6E01               	movwf	?___ftpack,c
  5434  001EAA  0E00               	movlw	0
  5435  001EAC  6E02               	movwf	?___ftpack+1,c
  5436  001EAE  0E00               	movlw	0
  5437  001EB0  6E03               	movwf	?___ftpack+2,c
  5438  001EB2  D044               	goto	l576
  5439  001EB4                     l1978:
  5440  001EB4  2A04               	incf	___ftpack@exp,f,c
  5441  001EB6  90D8               	bcf	status,0,c
  5442  001EB8  3203               	rrcf	___ftpack@arg+2,f,c
  5443  001EBA  3202               	rrcf	___ftpack@arg+1,f,c
  5444  001EBC  3201               	rrcf	___ftpack@arg,f,c
  5445  001EBE                     l1980:
  5446  001EBE  0E00               	movlw	0
  5447  001EC0  1401               	andwf	___ftpack@arg,w,c
  5448  001EC2  6E06               	movwf	??___ftpack& (0+255),c
  5449  001EC4  0E00               	movlw	0
  5450  001EC6  1402               	andwf	___ftpack@arg+1,w,c
  5451  001EC8  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5452  001ECA  0EFE               	movlw	254
  5453  001ECC  1403               	andwf	___ftpack@arg+2,w,c
  5454  001ECE  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5455  001ED0  5006               	movf	??___ftpack,w,c
  5456  001ED2  1007               	iorwf	??___ftpack+1,w,c
  5457  001ED4  1008               	iorwf	??___ftpack+2,w,c
  5458  001ED6  B4D8               	btfsc	status,2,c
  5459  001ED8  D00C               	goto	l1986
  5460  001EDA  D7EC               	goto	l1978
  5461  001EDC                     l1982:
  5462  001EDC  2A04               	incf	___ftpack@exp,f,c
  5463  001EDE  0E01               	movlw	1
  5464  001EE0  2601               	addwf	___ftpack@arg,f,c
  5465  001EE2  0E00               	movlw	0
  5466  001EE4  2202               	addwfc	___ftpack@arg+1,f,c
  5467  001EE6  0E00               	movlw	0
  5468  001EE8  2203               	addwfc	___ftpack@arg+2,f,c
  5469  001EEA  90D8               	bcf	status,0,c
  5470  001EEC  3203               	rrcf	___ftpack@arg+2,f,c
  5471  001EEE  3202               	rrcf	___ftpack@arg+1,f,c
  5472  001EF0  3201               	rrcf	___ftpack@arg,f,c
  5473  001EF2                     l1986:
  5474  001EF2  0E00               	movlw	0
  5475  001EF4  1401               	andwf	___ftpack@arg,w,c
  5476  001EF6  6E06               	movwf	??___ftpack& (0+255),c
  5477  001EF8  0E00               	movlw	0
  5478  001EFA  1402               	andwf	___ftpack@arg+1,w,c
  5479  001EFC  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5480  001EFE  0EFF               	movlw	255
  5481  001F00  1403               	andwf	___ftpack@arg+2,w,c
  5482  001F02  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5483  001F04  5006               	movf	??___ftpack,w,c
  5484  001F06  1007               	iorwf	??___ftpack+1,w,c
  5485  001F08  1008               	iorwf	??___ftpack+2,w,c
  5486  001F0A  B4D8               	btfsc	status,2,c
  5487  001F0C  D006               	goto	l1990
  5488  001F0E  D7E6               	goto	l1982
  5489  001F10                     l1988:
  5490  001F10  0604               	decf	___ftpack@exp,f,c
  5491  001F12  90D8               	bcf	status,0,c
  5492  001F14  3601               	rlcf	___ftpack@arg,f,c
  5493  001F16  3602               	rlcf	___ftpack@arg+1,f,c
  5494  001F18  3603               	rlcf	___ftpack@arg+2,f,c
  5495  001F1A                     l1990:
  5496  001F1A  AE02               	btfss	___ftpack@arg+1,7,c
  5497  001F1C  D7F9               	goto	l1988
  5498  001F1E  A004               	btfss	___ftpack@exp,0,c
  5499  001F20  9E02               	bcf	___ftpack@arg+1,7,c
  5500  001F22  90D8               	bcf	status,0,c
  5501  001F24  3204               	rrcf	___ftpack@exp,f,c
  5502  001F26  5004               	movf	___ftpack@exp,w,c
  5503  001F28  1203               	iorwf	___ftpack@arg+2,f,c
  5504  001F2A  5005               	movf	___ftpack@sign,w,c
  5505  001F2C  A4D8               	btfss	status,2,c
  5506  001F2E  8E03               	bsf	___ftpack@arg+2,7,c
  5507  001F30  C001  F001         	movff	___ftpack@arg,?___ftpack
  5508  001F34  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5509  001F38  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5510  001F3C                     l576:
  5511  001F3C  0012               	return	
  5512  001F3E                     __end_of___ftpack:
  5513                           	opt stack 0
  5514                           tblptru	equ	0xFF8
  5515                           tblptrh	equ	0xFF7
  5516                           tblptrl	equ	0xFF6
  5517                           tablat	equ	0xFF5
  5518                           prodh	equ	0xFF4
  5519                           prodl	equ	0xFF3
  5520                           intcon	equ	0xFF2
  5521                           wreg	equ	0xFE8
  5522                           indf2	equ	0xFDF
  5523                           postinc2	equ	0xFDE
  5524                           postdec2	equ	0xFDD
  5525                           fsr2h	equ	0xFDA
  5526                           fsr2l	equ	0xFD9
  5527                           status	equ	0xFD8
  5528                           
  5529 ;; *************** function ___ftneg *****************
  5530 ;; Defined at:
  5531 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftneg.c"
  5532 ;; Parameters:    Size  Location     Type
  5533 ;;  f1              3    0[COMRAM] float 
  5534 ;; Auto vars:     Size  Location     Type
  5535 ;;		None
  5536 ;; Return value:  Size  Location     Type
  5537 ;;                  3    0[COMRAM] float 
  5538 ;; Registers used:
  5539 ;;		wreg, status,2, status,0
  5540 ;; Tracked objects:
  5541 ;;		On entry : 0/0
  5542 ;;		On exit  : 0/0
  5543 ;;		Unchanged: 0/0
  5544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5545 ;;      Params:         3       0       0       0       0       0       0       0       0
  5546 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5547 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5548 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5549 ;;Total ram usage:        3 bytes
  5550 ;; Hardware stack levels used:    1
  5551 ;; This function calls:
  5552 ;;		Nothing
  5553 ;; This function is called by:
  5554 ;;		_sprintf
  5555 ;; This function uses a non-reentrant model
  5556 ;;
  5557                           
  5558                           	psect	text22
  5559  002560                     __ptext22:
  5560                           	opt stack 0
  5561  002560                     ___ftneg:
  5562                           	opt stack 27
  5563                           
  5564                           ;incstack = 0
  5565  002560  0E7F               	movlw	127
  5566  002562  1403               	andwf	___ftneg@f1+2,w,c
  5567  002564  1002               	iorwf	___ftneg@f1+1,w,c
  5568  002566  1001               	iorwf	___ftneg@f1,w,c
  5569  002568  B4D8               	btfsc	status,2,c
  5570  00256A  D006               	goto	l687
  5571  00256C  0E00               	movlw	0
  5572  00256E  1A01               	xorwf	___ftneg@f1,f,c
  5573  002570  0E00               	movlw	0
  5574  002572  1A02               	xorwf	___ftneg@f1+1,f,c
  5575  002574  0E80               	movlw	128
  5576  002576  1A03               	xorwf	___ftneg@f1+2,f,c
  5577  002578                     l687:
  5578  002578  C001  F001         	movff	___ftneg@f1,?___ftneg
  5579  00257C  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5580  002580  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5581  002584  0012               	return	
  5582  002586                     __end_of___ftneg:
  5583                           	opt stack 0
  5584                           tblptru	equ	0xFF8
  5585                           tblptrh	equ	0xFF7
  5586                           tblptrl	equ	0xFF6
  5587                           tablat	equ	0xFF5
  5588                           prodh	equ	0xFF4
  5589                           prodl	equ	0xFF3
  5590                           intcon	equ	0xFF2
  5591                           wreg	equ	0xFE8
  5592                           indf2	equ	0xFDF
  5593                           postinc2	equ	0xFDE
  5594                           postdec2	equ	0xFDD
  5595                           fsr2h	equ	0xFDA
  5596                           fsr2l	equ	0xFD9
  5597                           status	equ	0xFD8
  5598                           
  5599 ;; *************** function ___ftge *****************
  5600 ;; Defined at:
  5601 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.33\sources\common\ftge.c"
  5602 ;; Parameters:    Size  Location     Type
  5603 ;;  ff1             3    0[COMRAM] float 
  5604 ;;  ff2             3    3[COMRAM] float 
  5605 ;; Auto vars:     Size  Location     Type
  5606 ;;		None
  5607 ;; Return value:  Size  Location     Type
  5608 ;;		None               void
  5609 ;; Registers used:
  5610 ;;		wreg, status,2, status,0
  5611 ;; Tracked objects:
  5612 ;;		On entry : 0/0
  5613 ;;		On exit  : 0/0
  5614 ;;		Unchanged: 0/0
  5615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5616 ;;      Params:         6       0       0       0       0       0       0       0       0
  5617 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5618 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5619 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5620 ;;Total ram usage:        9 bytes
  5621 ;; Hardware stack levels used:    1
  5622 ;; This function calls:
  5623 ;;		Nothing
  5624 ;; This function is called by:
  5625 ;;		_sprintf
  5626 ;; This function uses a non-reentrant model
  5627 ;;
  5628                           
  5629                           	psect	text23
  5630  002072                     __ptext23:
  5631                           	opt stack 0
  5632  002072                     ___ftge:
  5633                           	opt stack 27
  5634                           
  5635                           ;incstack = 0
  5636  002072  AE03               	btfss	___ftge@ff1+2,7,c
  5637  002074  D016               	goto	l2426
  5638  002076  C001  F007         	movff	___ftge@ff1,??___ftge
  5639  00207A  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5640  00207E  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5641  002082  1E07               	comf	??___ftge,f,c
  5642  002084  1E08               	comf	??___ftge+1,f,c
  5643  002086  1E09               	comf	??___ftge+2,f,c
  5644  002088  2A07               	incf	??___ftge,f,c
  5645  00208A  0E00               	movlw	0
  5646  00208C  2208               	addwfc	??___ftge+1,f,c
  5647  00208E  2209               	addwfc	??___ftge+2,f,c
  5648  002090  0E00               	movlw	0
  5649  002092  2407               	addwf	??___ftge,w,c
  5650  002094  6E01               	movwf	___ftge@ff1,c
  5651  002096  0E00               	movlw	0
  5652  002098  2008               	addwfc	??___ftge+1,w,c
  5653  00209A  6E02               	movwf	___ftge@ff1+1,c
  5654  00209C  0E80               	movlw	128
  5655  00209E  2009               	addwfc	??___ftge+2,w,c
  5656  0020A0  6E03               	movwf	___ftge@ff1+2,c
  5657  0020A2                     l2426:
  5658  0020A2  AE06               	btfss	___ftge@ff2+2,7,c
  5659  0020A4  D016               	goto	l2430
  5660  0020A6  C004  F007         	movff	___ftge@ff2,??___ftge
  5661  0020AA  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5662  0020AE  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5663  0020B2  1E07               	comf	??___ftge,f,c
  5664  0020B4  1E08               	comf	??___ftge+1,f,c
  5665  0020B6  1E09               	comf	??___ftge+2,f,c
  5666  0020B8  2A07               	incf	??___ftge,f,c
  5667  0020BA  0E00               	movlw	0
  5668  0020BC  2208               	addwfc	??___ftge+1,f,c
  5669  0020BE  2209               	addwfc	??___ftge+2,f,c
  5670  0020C0  0E00               	movlw	0
  5671  0020C2  2407               	addwf	??___ftge,w,c
  5672  0020C4  6E04               	movwf	___ftge@ff2,c
  5673  0020C6  0E00               	movlw	0
  5674  0020C8  2008               	addwfc	??___ftge+1,w,c
  5675  0020CA  6E05               	movwf	___ftge@ff2+1,c
  5676  0020CC  0E80               	movlw	128
  5677  0020CE  2009               	addwfc	??___ftge+2,w,c
  5678  0020D0  6E06               	movwf	___ftge@ff2+2,c
  5679  0020D2                     l2430:
  5680  0020D2  0E00               	movlw	0
  5681  0020D4  1A01               	xorwf	___ftge@ff1,f,c
  5682  0020D6  0E00               	movlw	0
  5683  0020D8  1A02               	xorwf	___ftge@ff1+1,f,c
  5684  0020DA  0E80               	movlw	128
  5685  0020DC  1A03               	xorwf	___ftge@ff1+2,f,c
  5686  0020DE  0E00               	movlw	0
  5687  0020E0  1A04               	xorwf	___ftge@ff2,f,c
  5688  0020E2  0E00               	movlw	0
  5689  0020E4  1A05               	xorwf	___ftge@ff2+1,f,c
  5690  0020E6  0E80               	movlw	128
  5691  0020E8  1A06               	xorwf	___ftge@ff2+2,f,c
  5692  0020EA  5004               	movf	___ftge@ff2,w,c
  5693  0020EC  5C01               	subwf	___ftge@ff1,w,c
  5694  0020EE  5005               	movf	___ftge@ff2+1,w,c
  5695  0020F0  5802               	subwfb	___ftge@ff1+1,w,c
  5696  0020F2  5006               	movf	___ftge@ff2+2,w,c
  5697  0020F4  5803               	subwfb	___ftge@ff1+2,w,c
  5698  0020F6  B0D8               	btfsc	status,0,c
  5699  0020F8  D002               	goto	l2436
  5700  0020FA  90D8               	bcf	status,0,c
  5701  0020FC  D001               	goto	l671
  5702  0020FE                     l2436:
  5703  0020FE  80D8               	bsf	status,0,c
  5704  002100                     l671:
  5705  002100  0012               	return	
  5706  002102                     __end_of___ftge:
  5707                           	opt stack 0
  5708                           tblptru	equ	0xFF8
  5709                           tblptrh	equ	0xFF7
  5710                           tblptrl	equ	0xFF6
  5711                           tablat	equ	0xFF5
  5712                           prodh	equ	0xFF4
  5713                           prodl	equ	0xFF3
  5714                           intcon	equ	0xFF2
  5715                           wreg	equ	0xFE8
  5716                           indf2	equ	0xFDF
  5717                           postinc2	equ	0xFDE
  5718                           postdec2	equ	0xFDD
  5719                           fsr2h	equ	0xFDA
  5720                           fsr2l	equ	0xFD9
  5721                           status	equ	0xFD8
  5722                           
  5723 ;; *************** function _Lcd_Write_String *****************
  5724 ;; Defined at:
  5725 ;;		line 90 in file "lcd.c"
  5726 ;; Parameters:    Size  Location     Type
  5727 ;;  a               2    4[COMRAM] PTR unsigned char 
  5728 ;;		 -> Lcd_Write_Integer@s(20), Lcd_Write_Float@s(20), STR_7(9), STR_6(11), 
  5729 ;;		 -> STR_5(6), STR_4(10), STR_3(5), STR_2(9), 
  5730 ;;		 -> STR_1(7), 
  5731 ;; Auto vars:     Size  Location     Type
  5732 ;;  i               2    8[COMRAM] int 
  5733 ;; Return value:  Size  Location     Type
  5734 ;;		None               void
  5735 ;; Registers used:
  5736 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5737 ;; Tracked objects:
  5738 ;;		On entry : 0/0
  5739 ;;		On exit  : 0/0
  5740 ;;		Unchanged: 0/0
  5741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5742 ;;      Params:         2       0       0       0       0       0       0       0       0
  5743 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5744 ;;      Temps:          2       0       0       0       0       0       0       0       0
  5745 ;;      Totals:         6       0       0       0       0       0       0       0       0
  5746 ;;Total ram usage:        6 bytes
  5747 ;; Hardware stack levels used:    1
  5748 ;; Hardware stack levels required when called:    2
  5749 ;; This function calls:
  5750 ;;		_Lcd_Write_Char
  5751 ;; This function is called by:
  5752 ;;		_mcu_init
  5753 ;;		_RobotControl
  5754 ;;		_Lcd_Write_Integer
  5755 ;;		_Lcd_Write_Float
  5756 ;; This function uses a non-reentrant model
  5757 ;;
  5758                           
  5759                           	psect	text24
  5760  002184                     __ptext24:
  5761                           	opt stack 0
  5762  002184                     _Lcd_Write_String:
  5763                           	opt stack 27
  5764                           
  5765                           ;lcd.c: 91: int i;
  5766                           ;lcd.c: 92: for (i = 0; a[i] != '\0'; i++)
  5767                           
  5768                           ;incstack = 0
  5769  002184  0E00               	movlw	0
  5770  002186  6E0A               	movwf	Lcd_Write_String@i+1,c
  5771  002188  0E00               	movlw	0
  5772  00218A  6E09               	movwf	Lcd_Write_String@i,c
  5773  00218C  D01C               	goto	l2544
  5774  00218E                     l2540:
  5775                           
  5776                           ;lcd.c: 93: Lcd_Write_Char(a[i]);
  5777  00218E  C005  F007         	movff	Lcd_Write_String@a,??_Lcd_Write_String
  5778  002192  C006  F008         	movff	Lcd_Write_String@a+1,??_Lcd_Write_String+1
  5779  002196  5009               	movf	Lcd_Write_String@i,w,c
  5780  002198  2607               	addwf	??_Lcd_Write_String,f,c
  5781  00219A  500A               	movf	Lcd_Write_String@i+1,w,c
  5782  00219C  2208               	addwfc	??_Lcd_Write_String+1,f,c
  5783  00219E  C007  FFF6         	movff	??_Lcd_Write_String,tblptrl
  5784  0021A2  C008  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  5785  0021A6  6AF8               	clrf	tblptru,c
  5786  0021A8  0E07               	movlw	(high __ramtop+-1)
  5787  0021AA  64F7               	cpfsgt	tblptrh,c
  5788  0021AC  D003               	bra	u2557
  5789  0021AE  0008               	tblrd		*
  5790  0021B0  50F5               	movf	tablat,w,c
  5791  0021B2  D005               	bra	u2550
  5792  0021B4                     u2557:
  5793  0021B4  CFF6 FFE9          	movff	tblptrl,fsr0l
  5794  0021B8  CFF7 FFEA          	movff	tblptrh,fsr0h
  5795  0021BC  50EF               	movf	indf0,w,c
  5796  0021BE                     u2550:
  5797  0021BE  EC21  F012         	call	_Lcd_Write_Char
  5798  0021C2  4A09               	infsnz	Lcd_Write_String@i,f,c
  5799  0021C4  2A0A               	incf	Lcd_Write_String@i+1,f,c
  5800  0021C6                     l2544:
  5801  0021C6  C005  F007         	movff	Lcd_Write_String@a,??_Lcd_Write_String
  5802  0021CA  C006  F008         	movff	Lcd_Write_String@a+1,??_Lcd_Write_String+1
  5803  0021CE  5009               	movf	Lcd_Write_String@i,w,c
  5804  0021D0  2607               	addwf	??_Lcd_Write_String,f,c
  5805  0021D2  500A               	movf	Lcd_Write_String@i+1,w,c
  5806  0021D4  2208               	addwfc	??_Lcd_Write_String+1,f,c
  5807  0021D6  C007  FFF6         	movff	??_Lcd_Write_String,tblptrl
  5808  0021DA  C008  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  5809  0021DE  6AF8               	clrf	tblptru,c
  5810  0021E0  0E07               	movlw	(high __ramtop+-1)
  5811  0021E2  64F7               	cpfsgt	tblptrh,c
  5812  0021E4  D003               	bra	u2567
  5813  0021E6  0008               	tblrd		*
  5814  0021E8  50F5               	movf	tablat,w,c
  5815  0021EA  D005               	bra	u2560
  5816  0021EC                     u2567:
  5817  0021EC  CFF6 FFE9          	movff	tblptrl,fsr0l
  5818  0021F0  CFF7 FFEA          	movff	tblptrh,fsr0h
  5819  0021F4  50EF               	movf	indf0,w,c
  5820  0021F6                     u2560:
  5821  0021F6  0900               	iorlw	0
  5822  0021F8  B4D8               	btfsc	status,2,c
  5823  0021FA  0012               	return	
  5824  0021FC  D7C8               	goto	l2540
  5825  0021FE                     __end_of_Lcd_Write_String:
  5826                           	opt stack 0
  5827                           tblptru	equ	0xFF8
  5828                           tblptrh	equ	0xFF7
  5829                           tblptrl	equ	0xFF6
  5830                           tablat	equ	0xFF5
  5831                           prodh	equ	0xFF4
  5832                           prodl	equ	0xFF3
  5833                           intcon	equ	0xFF2
  5834                           indf0	equ	0xFEF
  5835                           fsr0h	equ	0xFEA
  5836                           fsr0l	equ	0xFE9
  5837                           wreg	equ	0xFE8
  5838                           indf2	equ	0xFDF
  5839                           postinc2	equ	0xFDE
  5840                           postdec2	equ	0xFDD
  5841                           fsr2h	equ	0xFDA
  5842                           fsr2l	equ	0xFD9
  5843                           status	equ	0xFD8
  5844                           
  5845 ;; *************** function _Lcd_Write_Char *****************
  5846 ;; Defined at:
  5847 ;;		line 75 in file "lcd.c"
  5848 ;; Parameters:    Size  Location     Type
  5849 ;;  a               1    wreg     unsigned char 
  5850 ;; Auto vars:     Size  Location     Type
  5851 ;;  a               1    3[COMRAM] unsigned char 
  5852 ;;  y               1    2[COMRAM] unsigned char 
  5853 ;;  temp            1    1[COMRAM] unsigned char 
  5854 ;; Return value:  Size  Location     Type
  5855 ;;		None               void
  5856 ;; Registers used:
  5857 ;;		wreg, status,2, status,0, cstack
  5858 ;; Tracked objects:
  5859 ;;		On entry : 0/0
  5860 ;;		On exit  : 0/0
  5861 ;;		Unchanged: 0/0
  5862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5863 ;;      Params:         0       0       0       0       0       0       0       0       0
  5864 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5865 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5866 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5867 ;;Total ram usage:        3 bytes
  5868 ;; Hardware stack levels used:    1
  5869 ;; Hardware stack levels required when called:    1
  5870 ;; This function calls:
  5871 ;;		_Lcd_Port
  5872 ;; This function is called by:
  5873 ;;		_Lcd_Write_String
  5874 ;; This function uses a non-reentrant model
  5875 ;;
  5876                           
  5877                           	psect	text25
  5878  002442                     __ptext25:
  5879                           	opt stack 0
  5880  002442                     _Lcd_Write_Char:
  5881                           	opt stack 27
  5882                           
  5883                           ;incstack = 0
  5884                           ;Lcd_Write_Char@a stored from wreg
  5885  002442  6E04               	movwf	Lcd_Write_Char@a,c
  5886                           
  5887                           ;lcd.c: 76: char temp, y;
  5888                           ;lcd.c: 77: temp = a & 0x0F;
  5889  002444  5004               	movf	Lcd_Write_Char@a,w,c
  5890  002446  0B0F               	andlw	15
  5891  002448  6E02               	movwf	Lcd_Write_Char@temp,c
  5892                           
  5893                           ;lcd.c: 78: y = a & 0xF0;
  5894  00244A  5004               	movf	Lcd_Write_Char@a,w,c
  5895  00244C  0BF0               	andlw	240
  5896  00244E  6E03               	movwf	Lcd_Write_Char@y,c
  5897                           
  5898                           ;lcd.c: 79: PORTEbits.RE0 = 1;
  5899  002450  8084               	bsf	3972,0,c	;volatile
  5900                           
  5901                           ;lcd.c: 80: Lcd_Port(y >> 4);
  5902  002452  3803               	swapf	Lcd_Write_Char@y,w,c
  5903  002454  0B0F               	andlw	15
  5904  002456  EC71  F012         	call	_Lcd_Port
  5905                           
  5906                           ;lcd.c: 81: PORTEbits.RE2 = 1;
  5907  00245A  8484               	bsf	3972,2,c	;volatile
  5908                           
  5909                           ;lcd.c: 82: _delay((unsigned long)((40)*(4000000/4000000.0)));
  5910  00245C  0E0D               	movlw	13
  5911  00245E                     u2987:
  5912  00245E  2EE8               	decfsz	wreg,f,c
  5913  002460  D7FE               	goto	u2987
  5914  002462  F000               	nop	
  5915                           
  5916                           ;lcd.c: 83: PORTEbits.RE2 = 0;
  5917  002464  9484               	bcf	3972,2,c	;volatile
  5918                           
  5919                           ;lcd.c: 84: Lcd_Port(temp);
  5920  002466  5002               	movf	Lcd_Write_Char@temp,w,c
  5921  002468  EC71  F012         	call	_Lcd_Port
  5922                           
  5923                           ;lcd.c: 85: PORTEbits.RE2 = 1;
  5924  00246C  8484               	bsf	3972,2,c	;volatile
  5925                           
  5926                           ;lcd.c: 86: _delay((unsigned long)((40)*(4000000/4000000.0)));
  5927  00246E  0E0D               	movlw	13
  5928  002470                     u2997:
  5929  002470  2EE8               	decfsz	wreg,f,c
  5930  002472  D7FE               	goto	u2997
  5931  002474  F000               	nop	
  5932                           
  5933                           ;lcd.c: 87: PORTEbits.RE2 = 0;
  5934  002476  9484               	bcf	3972,2,c	;volatile
  5935  002478  0012               	return	
  5936  00247A                     __end_of_Lcd_Write_Char:
  5937                           	opt stack 0
  5938                           tblptru	equ	0xFF8
  5939                           tblptrh	equ	0xFF7
  5940                           tblptrl	equ	0xFF6
  5941                           tablat	equ	0xFF5
  5942                           prodh	equ	0xFF4
  5943                           prodl	equ	0xFF3
  5944                           intcon	equ	0xFF2
  5945                           indf0	equ	0xFEF
  5946                           fsr0h	equ	0xFEA
  5947                           fsr0l	equ	0xFE9
  5948                           wreg	equ	0xFE8
  5949                           indf2	equ	0xFDF
  5950                           postinc2	equ	0xFDE
  5951                           postdec2	equ	0xFDD
  5952                           fsr2h	equ	0xFDA
  5953                           fsr2l	equ	0xFD9
  5954                           status	equ	0xFD8
  5955                           
  5956 ;; *************** function _Lcd_Set_Cursor *****************
  5957 ;; Defined at:
  5958 ;;		line 40 in file "lcd.c"
  5959 ;; Parameters:    Size  Location     Type
  5960 ;;  a               1    wreg     unsigned char 
  5961 ;;  b               1    3[COMRAM] unsigned char 
  5962 ;; Auto vars:     Size  Location     Type
  5963 ;;  a               1    4[COMRAM] unsigned char 
  5964 ;;  temp            1    7[COMRAM] unsigned char 
  5965 ;;  y               1    6[COMRAM] unsigned char 
  5966 ;;  z               1    5[COMRAM] unsigned char 
  5967 ;; Return value:  Size  Location     Type
  5968 ;;		None               void
  5969 ;; Registers used:
  5970 ;;		wreg, status,2, status,0, cstack
  5971 ;; Tracked objects:
  5972 ;;		On entry : 0/0
  5973 ;;		On exit  : 0/0
  5974 ;;		Unchanged: 0/0
  5975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5976 ;;      Params:         1       0       0       0       0       0       0       0       0
  5977 ;;      Locals:         4       0       0       0       0       0       0       0       0
  5978 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5979 ;;      Totals:         5       0       0       0       0       0       0       0       0
  5980 ;;Total ram usage:        5 bytes
  5981 ;; Hardware stack levels used:    1
  5982 ;; Hardware stack levels required when called:    2
  5983 ;; This function calls:
  5984 ;;		_Lcd_Cmd
  5985 ;; This function is called by:
  5986 ;;		_mcu_init
  5987 ;;		_RobotControl
  5988 ;; This function uses a non-reentrant model
  5989 ;;
  5990                           
  5991                           	psect	text26
  5992  0023AA                     __ptext26:
  5993                           	opt stack 0
  5994  0023AA                     _Lcd_Set_Cursor:
  5995                           	opt stack 27
  5996                           
  5997                           ;incstack = 0
  5998                           ;Lcd_Set_Cursor@a stored from wreg
  5999  0023AA  6E05               	movwf	Lcd_Set_Cursor@a,c
  6000                           
  6001                           ;lcd.c: 41: char temp, z, y;
  6002                           ;lcd.c: 42: if (a == 1) {
  6003  0023AC  0405               	decf	Lcd_Set_Cursor@a,w,c
  6004  0023AE  A4D8               	btfss	status,2,c
  6005  0023B0  D010               	goto	l2804
  6006                           
  6007                           ;lcd.c: 43: temp = 0x80 + b - 1;
  6008  0023B2  5004               	movf	Lcd_Set_Cursor@b,w,c
  6009  0023B4  0F7F               	addlw	127
  6010  0023B6  6E08               	movwf	Lcd_Set_Cursor@temp,c
  6011                           
  6012                           ;lcd.c: 44: z = temp >> 4;
  6013  0023B8  3808               	swapf	Lcd_Set_Cursor@temp,w,c
  6014  0023BA  0B0F               	andlw	15
  6015  0023BC  6E06               	movwf	Lcd_Set_Cursor@z,c
  6016                           
  6017                           ;lcd.c: 45: y = temp & 0x0F;
  6018  0023BE  5008               	movf	Lcd_Set_Cursor@temp,w,c
  6019  0023C0  0B0F               	andlw	15
  6020  0023C2  6E07               	movwf	Lcd_Set_Cursor@y,c
  6021                           
  6022                           ;lcd.c: 46: Lcd_Cmd(z);
  6023  0023C4  5006               	movf	Lcd_Set_Cursor@z,w,c
  6024  0023C6  ECC3  F012         	call	_Lcd_Cmd
  6025                           
  6026                           ;lcd.c: 47: Lcd_Cmd(y);
  6027  0023CA  5007               	movf	Lcd_Set_Cursor@y,w,c
  6028  0023CC  ECC3  F012         	call	_Lcd_Cmd
  6029                           
  6030                           ;lcd.c: 48: } else if (a == 2) {
  6031  0023D0  D013               	goto	l101
  6032  0023D2                     l2804:
  6033  0023D2  5005               	movf	Lcd_Set_Cursor@a,w,c
  6034  0023D4  0A02               	xorlw	2
  6035  0023D6  A4D8               	btfss	status,2,c
  6036  0023D8  D00F               	goto	l101
  6037                           
  6038                           ;lcd.c: 49: temp = 0xC0 + b - 1;
  6039  0023DA  5004               	movf	Lcd_Set_Cursor@b,w,c
  6040  0023DC  0FBF               	addlw	191
  6041  0023DE  6E08               	movwf	Lcd_Set_Cursor@temp,c
  6042                           
  6043                           ;lcd.c: 50: z = temp >> 4;
  6044  0023E0  3808               	swapf	Lcd_Set_Cursor@temp,w,c
  6045  0023E2  0B0F               	andlw	15
  6046  0023E4  6E06               	movwf	Lcd_Set_Cursor@z,c
  6047                           
  6048                           ;lcd.c: 51: y = temp & 0x0F;
  6049  0023E6  5008               	movf	Lcd_Set_Cursor@temp,w,c
  6050  0023E8  0B0F               	andlw	15
  6051  0023EA  6E07               	movwf	Lcd_Set_Cursor@y,c
  6052                           
  6053                           ;lcd.c: 52: Lcd_Cmd(z);
  6054  0023EC  5006               	movf	Lcd_Set_Cursor@z,w,c
  6055  0023EE  ECC3  F012         	call	_Lcd_Cmd
  6056                           
  6057                           ;lcd.c: 53: Lcd_Cmd(y);
  6058  0023F2  5007               	movf	Lcd_Set_Cursor@y,w,c
  6059  0023F4  ECC3  F012         	call	_Lcd_Cmd
  6060  0023F8                     l101:
  6061  0023F8  0012               	return	
  6062  0023FA                     __end_of_Lcd_Set_Cursor:
  6063                           	opt stack 0
  6064                           tblptru	equ	0xFF8
  6065                           tblptrh	equ	0xFF7
  6066                           tblptrl	equ	0xFF6
  6067                           tablat	equ	0xFF5
  6068                           prodh	equ	0xFF4
  6069                           prodl	equ	0xFF3
  6070                           intcon	equ	0xFF2
  6071                           indf0	equ	0xFEF
  6072                           fsr0h	equ	0xFEA
  6073                           fsr0l	equ	0xFE9
  6074                           wreg	equ	0xFE8
  6075                           indf2	equ	0xFDF
  6076                           postinc2	equ	0xFDE
  6077                           postdec2	equ	0xFDD
  6078                           fsr2h	equ	0xFDA
  6079                           fsr2l	equ	0xFD9
  6080                           status	equ	0xFD8
  6081                           
  6082 ;; *************** function _Lcd_Clear *****************
  6083 ;; Defined at:
  6084 ;;		line 35 in file "lcd.c"
  6085 ;; Parameters:    Size  Location     Type
  6086 ;;		None
  6087 ;; Auto vars:     Size  Location     Type
  6088 ;;		None
  6089 ;; Return value:  Size  Location     Type
  6090 ;;		None               void
  6091 ;; Registers used:
  6092 ;;		wreg, status,2, cstack
  6093 ;; Tracked objects:
  6094 ;;		On entry : 0/0
  6095 ;;		On exit  : 0/0
  6096 ;;		Unchanged: 0/0
  6097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6098 ;;      Params:         0       0       0       0       0       0       0       0       0
  6099 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6100 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6101 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6102 ;;Total ram usage:        0 bytes
  6103 ;; Hardware stack levels used:    1
  6104 ;; Hardware stack levels required when called:    2
  6105 ;; This function calls:
  6106 ;;		_Lcd_Cmd
  6107 ;; This function is called by:
  6108 ;;		_mcu_init
  6109 ;;		_RobotControl
  6110 ;; This function uses a non-reentrant model
  6111 ;;
  6112                           
  6113                           	psect	text27
  6114  0025B6                     __ptext27:
  6115                           	opt stack 0
  6116  0025B6                     _Lcd_Clear:
  6117                           	opt stack 27
  6118                           
  6119                           ;lcd.c: 36: Lcd_Cmd(0);
  6120                           
  6121                           ;incstack = 0
  6122  0025B6  0E00               	movlw	0
  6123  0025B8  ECC3  F012         	call	_Lcd_Cmd
  6124                           
  6125                           ;lcd.c: 37: Lcd_Cmd(1);
  6126  0025BC  0E01               	movlw	1
  6127  0025BE  ECC3  F012         	call	_Lcd_Cmd
  6128  0025C2  0012               	return	
  6129  0025C4                     __end_of_Lcd_Clear:
  6130                           	opt stack 0
  6131                           tblptru	equ	0xFF8
  6132                           tblptrh	equ	0xFF7
  6133                           tblptrl	equ	0xFF6
  6134                           tablat	equ	0xFF5
  6135                           prodh	equ	0xFF4
  6136                           prodl	equ	0xFF3
  6137                           intcon	equ	0xFF2
  6138                           indf0	equ	0xFEF
  6139                           fsr0h	equ	0xFEA
  6140                           fsr0l	equ	0xFE9
  6141                           wreg	equ	0xFE8
  6142                           indf2	equ	0xFDF
  6143                           postinc2	equ	0xFDE
  6144                           postdec2	equ	0xFDD
  6145                           fsr2h	equ	0xFDA
  6146                           fsr2l	equ	0xFD9
  6147                           status	equ	0xFD8
  6148                           
  6149 ;; *************** function _Lcd_Cmd *****************
  6150 ;; Defined at:
  6151 ;;		line 27 in file "lcd.c"
  6152 ;; Parameters:    Size  Location     Type
  6153 ;;  a               1    wreg     unsigned char 
  6154 ;; Auto vars:     Size  Location     Type
  6155 ;;  a               1    2[COMRAM] unsigned char 
  6156 ;; Return value:  Size  Location     Type
  6157 ;;		None               void
  6158 ;; Registers used:
  6159 ;;		wreg, status,2, cstack
  6160 ;; Tracked objects:
  6161 ;;		On entry : 0/0
  6162 ;;		On exit  : 0/0
  6163 ;;		Unchanged: 0/0
  6164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6165 ;;      Params:         0       0       0       0       0       0       0       0       0
  6166 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6167 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6168 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6169 ;;Total ram usage:        2 bytes
  6170 ;; Hardware stack levels used:    1
  6171 ;; Hardware stack levels required when called:    1
  6172 ;; This function calls:
  6173 ;;		_Lcd_Port
  6174 ;; This function is called by:
  6175 ;;		_Lcd_Clear
  6176 ;;		_Lcd_Set_Cursor
  6177 ;;		_Lcd_Init
  6178 ;;		_Lcd_Shift_Right
  6179 ;;		_Lcd_Shift_Left
  6180 ;; This function uses a non-reentrant model
  6181 ;;
  6182                           
  6183                           	psect	text28
  6184  002586                     __ptext28:
  6185                           	opt stack 0
  6186  002586                     _Lcd_Cmd:
  6187                           	opt stack 27
  6188                           
  6189                           ;incstack = 0
  6190                           ;Lcd_Cmd@a stored from wreg
  6191  002586  6E03               	movwf	Lcd_Cmd@a,c
  6192                           
  6193                           ;lcd.c: 28: PORTEbits.RE0 = 0;
  6194  002588  9084               	bcf	3972,0,c	;volatile
  6195                           
  6196                           ;lcd.c: 29: Lcd_Port(a);
  6197  00258A  5003               	movf	Lcd_Cmd@a,w,c
  6198  00258C  EC71  F012         	call	_Lcd_Port
  6199                           
  6200                           ;lcd.c: 30: PORTEbits.RE2 = 1;
  6201  002590  8484               	bsf	3972,2,c	;volatile
  6202                           
  6203                           ;lcd.c: 31: _delay((unsigned long)((4)*(4000000/4000.0)));
  6204  002592  0E06               	movlw	6
  6205  002594  6E02               	movwf	??_Lcd_Cmd& (0+255),c
  6206  002596  0E30               	movlw	48
  6207  002598                     u3007:
  6208  002598  2EE8               	decfsz	wreg,f,c
  6209  00259A  D7FE               	goto	u3007
  6210  00259C  2E02               	decfsz	??_Lcd_Cmd& (0+255),f,c
  6211  00259E  D7FC               	goto	u3007
  6212  0025A0  D000               	nop2	
  6213                           
  6214                           ;lcd.c: 32: PORTEbits.RE2 = 0;
  6215  0025A2  9484               	bcf	3972,2,c	;volatile
  6216  0025A4  0012               	return	
  6217  0025A6                     __end_of_Lcd_Cmd:
  6218                           	opt stack 0
  6219                           tblptru	equ	0xFF8
  6220                           tblptrh	equ	0xFF7
  6221                           tblptrl	equ	0xFF6
  6222                           tablat	equ	0xFF5
  6223                           prodh	equ	0xFF4
  6224                           prodl	equ	0xFF3
  6225                           intcon	equ	0xFF2
  6226                           indf0	equ	0xFEF
  6227                           fsr0h	equ	0xFEA
  6228                           fsr0l	equ	0xFE9
  6229                           wreg	equ	0xFE8
  6230                           indf2	equ	0xFDF
  6231                           postinc2	equ	0xFDE
  6232                           postdec2	equ	0xFDD
  6233                           fsr2h	equ	0xFDA
  6234                           fsr2l	equ	0xFD9
  6235                           status	equ	0xFD8
  6236                           
  6237 ;; *************** function _Lcd_Port *****************
  6238 ;; Defined at:
  6239 ;;		line 6 in file "lcd.c"
  6240 ;; Parameters:    Size  Location     Type
  6241 ;;  a               1    wreg     unsigned char 
  6242 ;; Auto vars:     Size  Location     Type
  6243 ;;  a               1    0[COMRAM] unsigned char 
  6244 ;; Return value:  Size  Location     Type
  6245 ;;		None               void
  6246 ;; Registers used:
  6247 ;;		wreg
  6248 ;; Tracked objects:
  6249 ;;		On entry : 0/0
  6250 ;;		On exit  : 0/0
  6251 ;;		Unchanged: 0/0
  6252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6253 ;;      Params:         0       0       0       0       0       0       0       0       0
  6254 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6255 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6256 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6257 ;;Total ram usage:        1 bytes
  6258 ;; Hardware stack levels used:    1
  6259 ;; This function calls:
  6260 ;;		Nothing
  6261 ;; This function is called by:
  6262 ;;		_Lcd_Cmd
  6263 ;;		_Lcd_Init
  6264 ;;		_Lcd_Write_Char
  6265 ;; This function uses a non-reentrant model
  6266 ;;
  6267                           
  6268                           	psect	text29
  6269  0024E2                     __ptext29:
  6270                           	opt stack 0
  6271  0024E2                     _Lcd_Port:
  6272                           	opt stack 27
  6273                           
  6274                           ;incstack = 0
  6275                           ;Lcd_Port@a stored from wreg
  6276  0024E2  6E01               	movwf	Lcd_Port@a,c
  6277                           
  6278                           ;lcd.c: 7: if (a & 1)
  6279  0024E4  A001               	btfss	Lcd_Port@a,0,c
  6280  0024E6  D002               	goto	l81
  6281                           
  6282                           ;lcd.c: 8: PORTDbits.RD4 = 1;
  6283  0024E8  8883               	bsf	3971,4,c	;volatile
  6284  0024EA  D001               	goto	l2008
  6285  0024EC                     l81:
  6286                           
  6287                           ;lcd.c: 9: else
  6288                           ;lcd.c: 10: PORTDbits.RD4 = 0;
  6289  0024EC  9883               	bcf	3971,4,c	;volatile
  6290  0024EE                     l2008:
  6291                           
  6292                           ;lcd.c: 12: if (a & 2)
  6293  0024EE  A201               	btfss	Lcd_Port@a,1,c
  6294  0024F0  D002               	goto	l83
  6295                           
  6296                           ;lcd.c: 13: PORTDbits.RD5 = 1;
  6297  0024F2  8A83               	bsf	3971,5,c	;volatile
  6298  0024F4  D001               	goto	l2012
  6299  0024F6                     l83:
  6300                           
  6301                           ;lcd.c: 14: else
  6302                           ;lcd.c: 15: PORTDbits.RD5 = 0;
  6303  0024F6  9A83               	bcf	3971,5,c	;volatile
  6304  0024F8                     l2012:
  6305                           
  6306                           ;lcd.c: 17: if (a & 4)
  6307  0024F8  A401               	btfss	Lcd_Port@a,2,c
  6308  0024FA  D002               	goto	l85
  6309                           
  6310                           ;lcd.c: 18: PORTDbits.RD6 = 1;
  6311  0024FC  8C83               	bsf	3971,6,c	;volatile
  6312  0024FE  D001               	goto	l2016
  6313  002500                     l85:
  6314                           
  6315                           ;lcd.c: 19: else
  6316                           ;lcd.c: 20: PORTDbits.RD6 = 0;
  6317  002500  9C83               	bcf	3971,6,c	;volatile
  6318  002502                     l2016:
  6319                           
  6320                           ;lcd.c: 22: if (a & 8)
  6321  002502  A601               	btfss	Lcd_Port@a,3,c
  6322  002504  D002               	goto	l87
  6323                           
  6324                           ;lcd.c: 23: PORTDbits.RD7 = 1;
  6325  002506  8E83               	bsf	3971,7,c	;volatile
  6326  002508  D001               	goto	l89
  6327  00250A                     l87:
  6328                           
  6329                           ;lcd.c: 24: else
  6330                           ;lcd.c: 25: PORTDbits.RD7 = 0;
  6331  00250A  9E83               	bcf	3971,7,c	;volatile
  6332  00250C                     l89:
  6333  00250C  0012               	return	
  6334  00250E                     __end_of_Lcd_Port:
  6335                           	opt stack 0
  6336                           tblptru	equ	0xFF8
  6337                           tblptrh	equ	0xFF7
  6338                           tblptrl	equ	0xFF6
  6339                           tablat	equ	0xFF5
  6340                           prodh	equ	0xFF4
  6341                           prodl	equ	0xFF3
  6342                           intcon	equ	0xFF2
  6343                           indf0	equ	0xFEF
  6344                           fsr0h	equ	0xFEA
  6345                           fsr0l	equ	0xFE9
  6346                           wreg	equ	0xFE8
  6347                           indf2	equ	0xFDF
  6348                           postinc2	equ	0xFDE
  6349                           postdec2	equ	0xFDD
  6350                           fsr2h	equ	0xFDA
  6351                           fsr2l	equ	0xFD9
  6352                           status	equ	0xFD8
  6353                           
  6354 ;; *************** function _Pause_seg *****************
  6355 ;; Defined at:
  6356 ;;		line 18 in file "Retardos.c"
  6357 ;; Parameters:    Size  Location     Type
  6358 ;;  x               1    wreg     unsigned char 
  6359 ;; Auto vars:     Size  Location     Type
  6360 ;;  x               1    4[COMRAM] unsigned char 
  6361 ;;  i               1    5[COMRAM] unsigned char 
  6362 ;; Return value:  Size  Location     Type
  6363 ;;		None               void
  6364 ;; Registers used:
  6365 ;;		wreg, status,2, status,0, cstack
  6366 ;; Tracked objects:
  6367 ;;		On entry : 0/0
  6368 ;;		On exit  : 0/0
  6369 ;;		Unchanged: 0/0
  6370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6371 ;;      Params:         0       0       0       0       0       0       0       0       0
  6372 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6373 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6374 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6375 ;;Total ram usage:        2 bytes
  6376 ;; Hardware stack levels used:    1
  6377 ;; Hardware stack levels required when called:    1
  6378 ;; This function calls:
  6379 ;;		_Pause_ms
  6380 ;; This function is called by:
  6381 ;;		_main
  6382 ;; This function uses a non-reentrant model
  6383 ;;
  6384                           
  6385                           	psect	text30
  6386  0023FA                     __ptext30:
  6387                           	opt stack 0
  6388  0023FA                     _Pause_seg:
  6389                           	opt stack 29
  6390                           
  6391                           ;incstack = 0
  6392                           ;Pause_seg@x stored from wreg
  6393  0023FA  6E05               	movwf	Pause_seg@x,c
  6394                           
  6395                           ;Retardos.c: 19: unsigned char i=0;
  6396  0023FC  0E00               	movlw	0
  6397  0023FE  6E06               	movwf	Pause_seg@i,c
  6398                           
  6399                           ;Retardos.c: 20: for(i=0;i<=x;i++){
  6400  002400  0E00               	movlw	0
  6401  002402  6E06               	movwf	Pause_seg@i,c
  6402  002404  D019               	goto	l1904
  6403  002406                     l1900:
  6404                           
  6405                           ;Retardos.c: 21: Pause_ms(250);Pause_ms(250);
  6406  002406  0E00               	movlw	0
  6407  002408  6E02               	movwf	Pause_ms@x+1,c
  6408  00240A  0EFA               	movlw	250
  6409  00240C  6E01               	movwf	Pause_ms@x,c
  6410  00240E  EC87  F012         	call	_Pause_ms	;wreg free
  6411  002412  0E00               	movlw	0
  6412  002414  6E02               	movwf	Pause_ms@x+1,c
  6413  002416  0EFA               	movlw	250
  6414  002418  6E01               	movwf	Pause_ms@x,c
  6415  00241A  EC87  F012         	call	_Pause_ms	;wreg free
  6416                           
  6417                           ;Retardos.c: 22: Pause_ms(250);Pause_ms(250);
  6418  00241E  0E00               	movlw	0
  6419  002420  6E02               	movwf	Pause_ms@x+1,c
  6420  002422  0EFA               	movlw	250
  6421  002424  6E01               	movwf	Pause_ms@x,c
  6422  002426  EC87  F012         	call	_Pause_ms	;wreg free
  6423  00242A  0E00               	movlw	0
  6424  00242C  6E02               	movwf	Pause_ms@x+1,c
  6425  00242E  0EFA               	movlw	250
  6426  002430  6E01               	movwf	Pause_ms@x,c
  6427  002432  EC87  F012         	call	_Pause_ms	;wreg free
  6428  002436  2A06               	incf	Pause_seg@i,f,c
  6429  002438                     l1904:
  6430  002438  5006               	movf	Pause_seg@i,w,c
  6431  00243A  5C05               	subwf	Pause_seg@x,w,c
  6432  00243C  A0D8               	btfss	status,0,c
  6433  00243E  0012               	return	
  6434  002440  D7E2               	goto	l1900
  6435  002442                     __end_of_Pause_seg:
  6436                           	opt stack 0
  6437                           tblptru	equ	0xFF8
  6438                           tblptrh	equ	0xFF7
  6439                           tblptrl	equ	0xFF6
  6440                           tablat	equ	0xFF5
  6441                           prodh	equ	0xFF4
  6442                           prodl	equ	0xFF3
  6443                           intcon	equ	0xFF2
  6444                           indf0	equ	0xFEF
  6445                           fsr0h	equ	0xFEA
  6446                           fsr0l	equ	0xFE9
  6447                           wreg	equ	0xFE8
  6448                           indf2	equ	0xFDF
  6449                           postinc2	equ	0xFDE
  6450                           postdec2	equ	0xFDD
  6451                           fsr2h	equ	0xFDA
  6452                           fsr2l	equ	0xFD9
  6453                           status	equ	0xFD8
  6454                           
  6455 ;; *************** function _Pause_ms *****************
  6456 ;; Defined at:
  6457 ;;		line 11 in file "Retardos.c"
  6458 ;; Parameters:    Size  Location     Type
  6459 ;;  x               2    0[COMRAM] unsigned int 
  6460 ;; Auto vars:     Size  Location     Type
  6461 ;;  i               2    2[COMRAM] unsigned int 
  6462 ;; Return value:  Size  Location     Type
  6463 ;;		None               void
  6464 ;; Registers used:
  6465 ;;		wreg, status,2, status,0
  6466 ;; Tracked objects:
  6467 ;;		On entry : 0/0
  6468 ;;		On exit  : 0/0
  6469 ;;		Unchanged: 0/0
  6470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6471 ;;      Params:         2       0       0       0       0       0       0       0       0
  6472 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6473 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6474 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6475 ;;Total ram usage:        4 bytes
  6476 ;; Hardware stack levels used:    1
  6477 ;; This function calls:
  6478 ;;		Nothing
  6479 ;; This function is called by:
  6480 ;;		_Pause_seg
  6481 ;; This function uses a non-reentrant model
  6482 ;;
  6483                           
  6484                           	psect	text31
  6485  00250E                     __ptext31:
  6486                           	opt stack 0
  6487  00250E                     _Pause_ms:
  6488                           	opt stack 29
  6489                           
  6490                           ;Retardos.c: 12: unsigned int i=0;
  6491                           
  6492                           ;incstack = 0
  6493  00250E  0E00               	movlw	0
  6494  002510  6E04               	movwf	Pause_ms@i+1,c
  6495  002512  0E00               	movlw	0
  6496  002514  6E03               	movwf	Pause_ms@i,c
  6497                           
  6498                           ;Retardos.c: 13: for(i=0;i<=x;i++){
  6499  002516  0E00               	movlw	0
  6500  002518  6E04               	movwf	Pause_ms@i+1,c
  6501  00251A  0E00               	movlw	0
  6502  00251C  6E03               	movwf	Pause_ms@i,c
  6503  00251E  D006               	goto	l151
  6504  002520                     l1806:
  6505                           
  6506                           ;Retardos.c: 14: _delay((unsigned long)((1)*(4000000/4000.0)));
  6507  002520  0EFA               	movlw	250
  6508  002522                     u3017:
  6509  002522  F000               	nop	
  6510  002524  2EE8               	decfsz	wreg,f,c
  6511  002526  D7FD               	goto	u3017
  6512  002528  4A03               	infsnz	Pause_ms@i,f,c
  6513  00252A  2A04               	incf	Pause_ms@i+1,f,c
  6514  00252C                     l151:
  6515  00252C  5003               	movf	Pause_ms@i,w,c
  6516  00252E  5C01               	subwf	Pause_ms@x,w,c
  6517  002530  5004               	movf	Pause_ms@i+1,w,c
  6518  002532  5802               	subwfb	Pause_ms@x+1,w,c
  6519  002534  A0D8               	btfss	status,0,c
  6520  002536  0012               	return	
  6521  002538  D7F3               	goto	l1806
  6522  00253A                     __end_of_Pause_ms:
  6523                           	opt stack 0
  6524                           tblptru	equ	0xFF8
  6525                           tblptrh	equ	0xFF7
  6526                           tblptrl	equ	0xFF6
  6527                           tablat	equ	0xFF5
  6528                           prodh	equ	0xFF4
  6529                           prodl	equ	0xFF3
  6530                           intcon	equ	0xFF2
  6531                           indf0	equ	0xFEF
  6532                           fsr0h	equ	0xFEA
  6533                           fsr0l	equ	0xFE9
  6534                           wreg	equ	0xFE8
  6535                           indf2	equ	0xFDF
  6536                           postinc2	equ	0xFDE
  6537                           postdec2	equ	0xFDD
  6538                           fsr2h	equ	0xFDA
  6539                           fsr2l	equ	0xFD9
  6540                           status	equ	0xFD8
  6541                           tblptru	equ	0xFF8
  6542                           tblptrh	equ	0xFF7
  6543                           tblptrl	equ	0xFF6
  6544                           tablat	equ	0xFF5
  6545                           prodh	equ	0xFF4
  6546                           prodl	equ	0xFF3
  6547                           intcon	equ	0xFF2
  6548                           indf0	equ	0xFEF
  6549                           fsr0h	equ	0xFEA
  6550                           fsr0l	equ	0xFE9
  6551                           wreg	equ	0xFE8
  6552                           indf2	equ	0xFDF
  6553                           postinc2	equ	0xFDE
  6554                           postdec2	equ	0xFDD
  6555                           fsr2h	equ	0xFDA
  6556                           fsr2l	equ	0xFD9
  6557                           status	equ	0xFD8
  6558                           
  6559                           	psect	rparam
  6560  0000                     tblptru	equ	0xFF8
  6561                           tblptrh	equ	0xFF7
  6562                           tblptrl	equ	0xFF6
  6563                           tablat	equ	0xFF5
  6564                           prodh	equ	0xFF4
  6565                           prodl	equ	0xFF3
  6566                           intcon	equ	0xFF2
  6567                           indf0	equ	0xFEF
  6568                           fsr0h	equ	0xFEA
  6569                           fsr0l	equ	0xFE9
  6570                           wreg	equ	0xFE8
  6571                           indf2	equ	0xFDF
  6572                           postinc2	equ	0xFDE
  6573                           postdec2	equ	0xFDD
  6574                           fsr2h	equ	0xFDA
  6575                           fsr2l	equ	0xFD9
  6576                           status	equ	0xFD8


Data Sizes:
    Strings     61
    Constant    118
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     82      82
    BANK0           160     55      55
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_9(CODE[13]), STR_8(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 20
		 -> Lcd_Write_Integer@s(BANK0[20]), Lcd_Write_Float@s(COMRAM[20]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S741$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> Lcd_Write_Integer@s(BANK0[20]), Lcd_Write_Float@s(COMRAM[20]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[6]), STR_4(CODE[10]), STR_3(CODE[5]), STR_2(CODE[9]), 
		 -> STR_1(CODE[7]), 


Critical Paths under _main in COMRAM

    _main->_RobotControl
    _mcu_init->_Lcd_Write_String
    _Lcd_Init->_Lcd_Cmd
    _RobotControl->_Lcd_Write_Integer
    _Lcd_Write_Integer->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _Pause_seg->_Pause_ms

Critical Paths under _main in BANK0

    _RobotControl->_Lcd_Write_Integer
    _Lcd_Write_Integer->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   40500
                          _Pause_seg
                       _RobotControl
                           _mcu_init
 ---------------------------------------------------------------------------------
 (1) _mcu_init                                             3     3      0    1692
                                             10 COMRAM     3     3      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Init                                             1     1      0     198
                                              3 COMRAM     1     1      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _RobotControl                                         4     4      0   38576
                                             78 COMRAM     4     4      0
                          _Lcd_Clear
                     _Lcd_Set_Cursor
                  _Lcd_Write_Integer
                   _Lcd_Write_String
                      _getCNY70Value
 ---------------------------------------------------------------------------------
 (2) _getCNY70Value                                        2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Integer                                   22    20      2   37084
                                             76 COMRAM     2     0      2
                                             35 BANK0     20    20      0
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             54    47      7   36198
                                             63 COMRAM    13     6      7
                                              0 BANK0     35    35      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _scale
 ---------------------------------------------------------------------------------
 (4) _scale                                               10     7      3    8490
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _fround                                              13    10      3    8292
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    1855
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    3536
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4    1250
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1360
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) __tdiv_to_l_                                         15     9      6     409
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (4) __div_to_l_                                          16    10      6     552
                                              0 COMRAM    16    10      6
 ---------------------------------------------------------------------------------
 (4) ___lltoft                                             9     5      4    1768
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     583
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     480
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     411
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftsub                                              6     0      6    3009
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftadd                                             12     6      6    2778
                                             45 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftpack                                             8     3      5    1646
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3      98
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     454
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     6     4      2     745
                                              4 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       3     3      0     178
                                              1 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       5     4      1     592
                                              3 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              2     2      0     110
                                              1 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      88
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Pause_seg                                            2     2      0     232
                                              4 COMRAM     2     2      0
                           _Pause_ms
 ---------------------------------------------------------------------------------
 (2) _Pause_ms                                             4     2      2     202
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Pause_seg
     _Pause_ms
   _RobotControl
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Integer
       _Lcd_Write_String
         _Lcd_Write_Char
           _Lcd_Port
       _sprintf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___ftpack
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___ftpack
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     _getCNY70Value
   _mcu_init
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Init
       _Lcd_Cmd
         _Lcd_Port
       _Lcd_Port
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     52      52       1       86.3%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     37      37       5       34.4%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0       0      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Mon Aug 28 13:29:00 2017

                        l70 1DD8                          l81 24EC                          l83 24F6  
                        l85 2500                          l87 250A                          l89 250C  
              ___awdiv@sign 000C         ___wmul@multiplicand 0011                 __CFG_BORV$3 000000  
              __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000                __CFG_CP2$OFF 000000  
              __CFG_CP3$OFF 000000                ___ftadd@exp1 0039                ___ftadd@exp2 0038  
              ___ftadd@sign 0037                         l101 23F8                         l130 220E  
                       l131 2274                         l133 2224                         l151 252C  
                       l135 223C                         l232 0DFC                         l137 2254  
                       l185 153E                         l613 17C0                         l614 1924  
                       l535 1A5A                         l544 1A4A                         l617 17EC  
                       l628 1898                         l637 18B4                         l653 1B5A  
                       l662 1B4A                         l671 2100                         l655 1ACA  
                       l576 1F3C                         l736 2172                         l656 1AF2  
                       l746 233C                         l677 1C3E                         l687 2578  
                       l697 1D12                __CFG_CPB$OFF 000000                __CFG_CPD$OFF 000000  
              __CFG_BOR$OFF 000000                ___awmod@sign 0006                         wreg 000FE8  
               _sprintf$754 0063                __CFG_LVP$OFF 000000                __CFG_WDT$OFF 000000  
                      l2012 24F8                        l2102 1B76                        l2016 2502  
                      l2008 24EE                        l2040 17FA                        l2200 2022  
                      l2034 17CE                        l2122 1BCE                        l2220 2068  
                      l2212 2050                        l2204 2030                        l2132 1BF6  
                      l2108 1B9C                        l2300 151C                        l2062 184C  
                      l2310 1A76                        l2206 2038                        l2126 1BDE  
                      l2064 1856                        l2056 182A                        l2152 1F62  
                      l2208 203C                        l2216 205A                        l2136 1C06  
                      l2082 18D0                        l2074 1888                        l2066 185E  
                      l2402 1A12                        l2092 1900                        l2076 1892  
                      l2068 1866                        l2500 2134                        l2412 1A3A  
                      l2316 1A90                        l2164 1F98                        l2180 1FCA  
                      l2430 20D2                        l2414 1A46                        l2406 1A22  
                      l2166 1FA0                        l2158 1F82                        l2262 173A  
                      l2254 167A                        l2520 230A                        l2344 1B12  
                      l2184 1FD8                        l2176 1FC0                        l2168 1FA4  
                      l2426 20A2                        l2450 1C5A                        l2530 2354  
                      l2370 197E                        l2354 1B3A                        l2282 133E  
                      l2610 0ACE                        l2602 0A66                        l1900 2406  
                      l2540 218E                        l2436 20FE                        l2508 2164  
                      l2524 232E                        l2516 22FA                        l2532 2360  
                      l2364 1952                        l2356 1B46                        l2348 1B22  
                      l2196 2006                        l2276 129A                        l2700 0E7E  
                      l1806 2520                        l2518 2306                        l2294 146C  
                      l2286 134C                        l2710 0F62                        l2630 0BC6  
                      l2614 0AF4                        l1904 2438                        l2544 21C6  
                      l2480 1CE8                        l2472 1CC4                        l2392 19F0  
                      l2384 19C0                        l2712 0F70                        l2720 0F94  
                      l2482 1CEC                        l2730 100E                        l2642 0C38  
                      l2626 0BA0                        l2618 0B3A                        l2570 08FA  
                      l2804 23D2                        l2468 1CB4                        l2660 0CEC  
                      l2572 092E                        l2564 08E6                        l2486 1D02  
                      l2478 1CDC                        l2750 1082                        l2718 0F88  
                      l2646 0CA0                        l2566 08F4                        l2558 08C6  
                      l2496 2124                        l2752 1096                        l2744 105A  
                      l2760 1148                        l2498 2130                        l2682 0DCC  
                      l2666 0D10                        l2674 0DA6                        l2586 09A8  
                      l2762 1164                        l2906 25AA                        l1980 1EBE  
                      l2676 0DB4                        l1796 226C                        l1990 1F1A  
                      l1982 1EDC                        l1974 1EA6                        l2758 1134  
                      l2696 0E2C                        l2688 0E00                        l2960 1DC8  
                      l2880 1D46                        l2864 1E72                        l1986 1EF2  
                      l1978 1EB4                        l2890 1D8C                        l2882 1D54  
                      l1988 1F10                        l2884 1D62                        l2958 1DB2  
                      l2886 1D70                        l2894 1D9A                        l2888 1D7E  
                      STR_1 08AD                        STR_2 08A4                        STR_3 089F  
                      STR_4 089A                        STR_5 0894                        STR_6 088F  
                      STR_7 08A4                        STR_8 0884                        STR_9 0877  
                      u2201 1A86                        u3007 2598                        u3017 2522  
                      u2401 1C50                        u2250 1B28                        u2420 1C78  
                      u2340 1A28                        u2181 1A6C                        u2270 1944  
                      u1721 178A                        u2425 1C70                        u2450 1CCA  
                      u2290 1970                        u1731 179E                        u2275 193A  
                      u2620 09F4                        u2605 0982                        u2550 21BE  
                      u2295 1966                        u2560 21F6                        u2625 09EA  
                      u1931 1B6C                        u2557 21B4                        u2567 21EC  
                      u1951 1B86                        u1960 1B8E                        u2825 0FE6  
                      u2937 1E20                        u2947 1E62                        u2957 2282  
                      u2967 2298                        u2977 22AE                        u2987 245E  
                      u2997 2470           ?_Lcd_Write_String 0005                        _main 25A6  
              ___ftpack@arg 0001                ___ftpack@exp 0004                        fsr0h 000FEA  
                      indf0 000FEF                        fsr0l 000FE9                        fsr2h 000FDA  
                      indf2 000FDF                        fsr2l 000FD9                        prodh 000FF4  
                      prodl 000FF3                        start 0000          ??_Lcd_Write_String 0007  
             __CFG_IESO$OFF 000000                _sprintf$1281 0060             __end_of_Lcd_Cmd 25A6  
             __CFG_MCLRE$ON 000000                ___ftmul@cntr 0022                ___ftmul@sign 0023  
              ___fttol@exp1 0039                ___fttol@lval 0035               __CFG_PLLDIV$1 000000  
         _Lcd_Write_Integer 24B0              __CFG_CCP2MX$ON 000000                       ?_main 0001  
           __end_of___awdiv 1FE2             __end_of___ftadd 1926             __end_of___awmod 2072  
           __end_of___ftneg 2586             __end_of___lldiv 2184             __end_of___ftmul 1C40  
           ___awdiv@divisor 0009             __end_of___llmod 234E             __end_of___ftsub 24B0  
           __end_of___fttol 1D14              __CFG_DEBUG$OFF 000000          ?_Lcd_Write_Integer 004D  
           ___awdiv@counter 000B                       _PORTA 000F80                       _PORTB 000F81  
                     _PORTE 000F84               __CFG_USBDIV$2 000000     __size_of_Lcd_Set_Cursor 0050  
                     _TRISA 000F92                       _TRISB 000F93                       _TRISC 000F94  
                     _TRISD 000F95                       _TRISE 000F96               __CFG_PWRT$OFF 000000  
             __CFG_WRT0$OFF 000000               __CFG_WRT1$OFF 000000               __CFG_WRT2$OFF 000000  
             __CFG_WRT3$OFF 000000                ___lltoft@exp 0011              __CFG_EBTR0$OFF 000000  
            __CFG_FCMEN$OFF 000000              __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000  
            __CFG_EBTR3$OFF 000000               __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000  
             __CFG_WRTD$OFF 000000              __CFG_EBTRB$OFF 000000             __end_of_dpowers 0829  
       ??_Lcd_Write_Integer 004F                       _scale 1172               ___ftpack@sign 0005  
                     tablat 000FF5                       status 000FD8             __end_of_sprintf 1172  
            __CFG_ICPRT$OFF 000000                  Pause_seg@i 0006                  Pause_seg@x 0005  
          __end_of_Lcd_Init 22E8            __end_of_Lcd_Port 250E             __initialization 25C4  
              __end_of_main 25B6   __end_of_Lcd_Write_Integer 24E2                      ??_main 0053  
             ___fttol@sign1 0034            __end_of_Pause_ms 253A          __size_of_Lcd_Clear 000E  
             __activetblptr 000002        __size_of__tdiv_to_l_ 0100            ___llmod@dividend 000E  
                    ?_scale 0024            ___awdiv@dividend 0007            __end_of___ftpack 1F3E  
          __end_of___lltoft 23AA                      _INTCON 000FF2                   ??_Lcd_Cmd 0002  
   __size_of_Lcd_Write_Char 0038              __CFG_XINST$OFF 000000            __end_of__powers_ 0877  
                    ___ftge 2072          __size_of_Pause_seg 0048                      ___wmul 253A  
                 ??___awdiv 000B                   ??___ftadd 0034              __CFG_STVREN$ON 000000  
                 ??___awmod 0005                   ??___ftneg 0004                   ??___lldiv 0009  
                 ??___ftmul 001B                   ??___llmod 0016                   ??___ftsub 0040  
                 ??___fttol 002F            __end_of_mcu_init 1E96                      _fround 1540  
          ___awdiv@quotient 000D             ___awmod@divisor 0003             ___awmod@counter 0005  
     ___ftmul@f3_as_product 001F                __mediumconst 0000                      tblptrh 000FF7  
                    tblptrl 000FF6                      tblptru 000FF8                   ??_sprintf 0047  
           Lcd_Set_Cursor@a 0005             Lcd_Set_Cursor@b 0004             Lcd_Set_Cursor@y 0007  
           Lcd_Set_Cursor@z 0006                  __accesstop 0060     __end_of__initialization 25C4  
           __CFG_PBADEN$OFF 000000                  ___ftadd@f1 002E                  ___ftadd@f2 0031  
                ___ftge@ff1 0001                  ___ftge@ff2 0004           __end_of_Lcd_Clear 25C4  
                ___ftneg@f1 0001                  ___ftmul@f1 0015                  ___ftmul@f2 0018  
                ___ftsub@f1 003A                  ___ftsub@f2 003D                  ___fttol@f1 002B  
            __pcstackCOMRAM 0001  __size_of_Lcd_Write_Integer 0032                  ___lltoft@c 0009  
             __end_of_scale 1540              _Lcd_Set_Cursor 23AA                  __div_to_l_ 1926  
                 ?_Lcd_Init 0001                   ?_Lcd_Port 0001             __div_to_l_@exp1 0010  
           __div_to_l_@cntr 000F                sprintf@integ 0073           __end_of_Pause_seg 2442  
                   ??_scale 0027             __div_to_l_@quot 000B               __div_to_l_@f1 0001  
             __div_to_l_@f2 0004                   ?_Pause_ms 0001                     ?___ftge 0001  
                   ?___wmul 000F      __size_of_getCNY70Value 0078                     ?_fround 0024  
 __size_of_Lcd_Write_String 007A                   ?___ftpack 0001      __end_of_Lcd_Set_Cursor 23FA  
                 ?___lltoft 0009               ?_RobotControl 0001                  ??_Lcd_Init 0004  
                ??_Lcd_Port 0001             __CFG_VREGEN$OFF 000000              _Lcd_Write_Char 2442  
                   _Lcd_Cmd 2586                   ?_mcu_init 0001                  ??_Pause_ms 0003  
         __end_of__npowers_ 0850                     __Hparam 0000                  _scale$1280 0027  
                   __Lparam 0000             __size_of___ftge 0090                     ___awdiv 1F3E  
                   ___ftadd 177A                     ___awmod 1FE2                     ___ftneg 2560  
                   ___lldiv 2102             __size_of___wmul 0026                     ___ftmul 1B5C  
                   ___llmod 22E8                     ___ftsub 247A                     ___fttol 1C40  
              __psmallconst 0800                     __pcinit 25C4              ??_RobotControl 004F  
                ??___ftpack 0006             __size_of_fround 023A                     __ramtop 0800  
           ?_Lcd_Set_Cursor 0004                  ??___lltoft 000D                     __ptext0 25A6  
                   __ptext1 1DDA                     __ptext2 2276                     __ptext3 1D14  
                   __ptext4 21FE                     __ptext5 24B0                     __ptext6 08B6  
                   __ptext7 1172                     __ptext8 1540                     __ptext9 253A  
               ?__div_to_l_ 0001                     _dpowers 0801            ___awmod@dividend 0001  
                   _sprintf 08B6               _getCNY70Value 21FE      __end_of_Lcd_Write_Char 247A  
      end_of_initialization 25C4                  ??_mcu_init 000B               __Lmediumconst 0000  
           ___lldiv@divisor 0005             ___lldiv@counter 000D                     postdec2 000FDD  
                   postinc2 000FDE                   Lcd_Port@a 0001              __tdiv_to_l_@f1 0001  
            __tdiv_to_l_@f2 0004               ??__tdiv_to_l_ 0007                   _PORTBbits 000F81  
                 _PORTDbits 000F83                   _PORTEbits 000F84                   _TRISBbits 000F93  
                 _TRISCbits 000F94              ?_getCNY70Value 0001             ?_Lcd_Write_Char 0001  
         Lcd_Write_String@a 0005           Lcd_Write_String@i 0009         __size_of__div_to_l_ 0136  
               ___ftmul@exp 001E                   _Lcd_Clear 25B6              __end_of___ftge 2102  
            __end_of___wmul 2560            _Lcd_Write_String 2184              __end_of_fround 177A  
       start_initialization 25C4                   Pause_ms@i 0003                   Pause_ms@x 0001  
       __end_of__tdiv_to_l_ 1B5C           __size_of_Lcd_Init 0072           __size_of_Lcd_Port 002C  
      __end_of_RobotControl 1DDA                   _Pause_seg 23FA             ___llmod@divisor 0012  
           ___llmod@counter 0016           __size_of_Pause_ms 002C                  ?_Lcd_Clear 0001  
                  ??___ftge 0007                    ??___wmul 0013               sprintf@vd_756 006B  
          __CFG_LPT1OSC$OFF 000000             Lcd_Write_Char@a 0004             Lcd_Write_Char@y 0003  
                  ??_fround 0027                  fround@prec 002D           __size_of___ftpack 00A8  
         __size_of___lltoft 005C             ??_getCNY70Value 0003               __pcstackBANK0 0060  
       __end_of__stringdata 08B4                    ?_Lcd_Cmd 0001                 sprintf@_val 0078  
               sprintf@flag 0071                  ?_Pause_seg 0001                 sprintf@fval 007F  
               sprintf@prec 0076           __size_of_mcu_init 00BC            ??_Lcd_Set_Cursor 0005  
                  ?___awdiv 0007                    ?___ftadd 002E                    ?___awmod 0001  
                  ?___ftneg 0001                    ?___lldiv 0001                    ?___ftmul 0015  
                  ?___llmod 000E                    ?___ftsub 003A                   __npowers_ 0829  
                  ?___fttol 002B                 __tdiv_to_l_ 1A5C          RobotControl@sensed 0051  
              ??__div_to_l_ 0007                 __smallconst 0800                    ?_sprintf 0040  
            __size_of_scale 03CE              ___wmul@product 0013                    Lcd_Cmd@a 0003  
        __end_of__div_to_l_ 1A5C                 ??_Lcd_Clear 0004            __CFG_WDTPS$32768 000000  
                _ADCON1bits 000FC1                 __stringdata 0877           ___wmul@multiplier 000F  
          ??_Lcd_Write_Char 0002                    _Lcd_Init 2276                    _Lcd_Port 24E2  
     __size_of_RobotControl 00C6    __end_of_Lcd_Write_String 21FE                 ??_Pause_seg 0005  
          __size_of_Lcd_Cmd 0020                    _Pause_ms 250E                    __Hrparam 0000  
                  __Lrparam 0000                   mcu_init@i 000C            __size_of___awdiv 00A4  
          __size_of___ftadd 01AC            __size_of___awmod 0090            __size_of___ftneg 0026  
          __size_of___lldiv 0082            __size_of___ftmul 00E4            __size_of___llmod 0066  
          __size_of___ftsub 0036            __size_of___fttol 00D4                    ___ftpack 1E96  
               _fround$1278 002A                 _fround$1279 0027                    ___lltoft 234E  
     __CFG_FOSC$INTOSCIO_EC 000000                _RobotControl 1D14                  sprintf@exp 007D  
                  __ptext10 1B5C                    __ptext11 1FE2                    __ptext20 177A  
                  __ptext12 1F3E                    __ptext21 1E96                    __ptext13 1A5C  
                  __ptext30 23FA                    __ptext22 2560                    __ptext14 1926  
                  __ptext31 250E                    __ptext23 2072                    __ptext15 234E  
                  __ptext24 2184                    __ptext16 22E8                    __ptext25 2442  
                  __ptext17 2102                    __ptext26 23AA                    __ptext18 1C40  
                  __ptext27 25B6                    __ptext19 247A                    __ptext28 2586  
                  __ptext29 24E2                    __powers_ 0850            __size_of_sprintf 08BC  
                  _mcu_init 1DDA               __size_of_main 0010       __CFG_CPUDIV$OSC1_PLL2 000000  
                  scale@scl 002A          Lcd_Write_Char@temp 0002                   sprintf@ap 006F  
          __tdiv_to_l_@exp1 000F                   sprintf@vd 0067                   sprintf@sp 0040  
          __tdiv_to_l_@cntr 000E            __tdiv_to_l_@quot 000A            ___lldiv@dividend 0001  
                _OSCCONbits 000FD3          Lcd_Set_Cursor@temp 0008                ?__tdiv_to_l_ 0001  
                  sprintf@c 0082                    sprintf@f 0042            ___lldiv@quotient 0009  
        Lcd_Write_Integer@a 004D          Lcd_Write_Integer@s 0083       __end_of_getCNY70Value 2276  
